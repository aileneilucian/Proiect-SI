
ProectSI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ea4  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1ffe8000  1ffe8000  00018000  2**0
                  ALLOC
  2 .data         0000008c  1ffe8800  0c001ea4  00010800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000000c  1ffe888c  0c001f30  0001088c  2**2
                  ALLOC
  4 .no_init      00000014  2003ffc0  2003ffc0  00017fc0  2**2
                  ALLOC
  5 .debug_aranges 00000c78  00000000  00000000  00010890  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011cd7  00000000  00000000  00011508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000028c0  00000000  00000000  000231df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000052dd  00000000  00000000  00025a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003218  00000000  00000000  0002ad7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008837  00000000  00000000  0002df94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000685c  00000000  00000000  000367cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a88  00000000  00000000  0003d027  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 000005ed  00000000  00000000  0003daaf  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800004c:	99 02 00 08 99 02 00 08 5d 1d 00 08 99 02 00 08     ........].......
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c001ea4 	.word	0x0c001ea4
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	0000008c 	.word	0x0000008c
 8000254:	0c001ea4 	.word	0x0c001ea4
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe888c 	.word	0x1ffe888c
 8000264:	0000000c 	.word	0x0000000c
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	0800029d 	.word	0x0800029d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	08001df9 	.word	0x08001df9
    blx  r0
#endif

    ldr  r0, =main
 8000294:	08001d9d 	.word	0x08001d9d

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800029c:	b598      	push	{r3, r4, r7, lr}
 800029e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <SystemInit+0x1c>)
 80002a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002a6:	4614      	mov	r4, r2
 80002a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  SystemCoreSetup();
 80002ae:	f001 fc1f 	bl	8001af0 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002b2:	f001 fc87 	bl	8001bc4 <SystemCoreClockSetup>
}
 80002b6:	bd98      	pop	{r3, r4, r7, pc}
 80002b8:	2003ffc4 	.word	0x2003ffc4

080002bc <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002c2:	4b2f      	ldr	r3, [pc, #188]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d03e      	beq.n	800034c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002ce:	4b2d      	ldr	r3, [pc, #180]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d002      	beq.n	80002e0 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002da:	4b2b      	ldr	r3, [pc, #172]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	e002      	b.n	80002e6 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002e0:	f001 fc66 	bl	8001bb0 <OSCHP_GetFrequency>
 80002e4:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002e6:	4b27      	ldr	r3, [pc, #156]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f003 0304 	and.w	r3, r3, #4
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d020      	beq.n	8000334 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002f2:	4b24      	ldr	r3, [pc, #144]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80002fa:	0e1b      	lsrs	r3, r3, #24
 80002fc:	3301      	adds	r3, #1
 80002fe:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000300:	4b20      	ldr	r3, [pc, #128]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000308:	0a1b      	lsrs	r3, r3, #8
 800030a:	3301      	adds	r3, #1
 800030c:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800030e:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000316:	0c1b      	lsrs	r3, r3, #16
 8000318:	3301      	adds	r3, #1
 800031a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	683a      	ldr	r2, [r7, #0]
 8000320:	fb02 f303 	mul.w	r3, r2, r3
 8000324:	68fa      	ldr	r2, [r7, #12]
 8000326:	fbb2 f3f3 	udiv	r3, r2, r3
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	fb02 f303 	mul.w	r3, r2, r3
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e00d      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800033c:	3301      	adds	r3, #1
 800033e:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000340:	68fa      	ldr	r2, [r7, #12]
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	fbb2 f3f3 	udiv	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e001      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 800034e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	b2db      	uxtb	r3, r3
 8000356:	3301      	adds	r3, #1
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	fbb2 f3f3 	udiv	r3, r2, r3
 800035e:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000362:	691b      	ldr	r3, [r3, #16]
 8000364:	f003 0301 	and.w	r3, r3, #1
 8000368:	3301      	adds	r3, #1
 800036a:	68fa      	ldr	r2, [r7, #12]
 800036c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000370:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000372:	4a06      	ldr	r2, [pc, #24]	; (800038c <SystemCoreClockUpdate+0xd0>)
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	6013      	str	r3, [r2, #0]
}
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	50004600 	.word	0x50004600
 8000384:	50004710 	.word	0x50004710
 8000388:	016e3600 	.word	0x016e3600
 800038c:	2003ffc0 	.word	0x2003ffc0

08000390 <XMC_ERU_Enable>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* Enable the clock and De-assert the ERU module from the reset state. */
void XMC_ERU_Enable(XMC_ERU_t *const eru)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
#if defined(XMC_ERU1)
  if (eru == XMC_ERU1)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4a07      	ldr	r2, [pc, #28]	; (80003b8 <XMC_ERU_Enable+0x28>)
 800039c:	4293      	cmp	r3, r2
 800039e:	d107      	bne.n	80003b0 <XMC_ERU_Enable+0x20>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ERU1);
 80003a0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80003a4:	f000 faa4 	bl	80008f0 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ERU1);
 80003a8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80003ac:	f000 f950 	bl	8000650 <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#else
  XMC_UNUSED_ARG(eru);
  #endif
}
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40044000 	.word	0x40044000

080003bc <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80003bc:	b480      	push	{r7}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	60f8      	str	r0, [r7, #12]
 80003c4:	460b      	mov	r3, r1
 80003c6:	607a      	str	r2, [r7, #4]
 80003c8:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80003ca:	7afb      	ldrb	r3, [r7, #11]
 80003cc:	089b      	lsrs	r3, r3, #2
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	4618      	mov	r0, r3
 80003d2:	7afb      	ldrb	r3, [r7, #11]
 80003d4:	089b      	lsrs	r3, r3, #2
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	461a      	mov	r2, r3
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	3204      	adds	r2, #4
 80003de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003e2:	7afb      	ldrb	r3, [r7, #11]
 80003e4:	f003 0303 	and.w	r3, r3, #3
 80003e8:	00db      	lsls	r3, r3, #3
 80003ea:	4619      	mov	r1, r3
 80003ec:	23f8      	movs	r3, #248	; 0xf8
 80003ee:	408b      	lsls	r3, r1
 80003f0:	43db      	mvns	r3, r3
 80003f2:	ea02 0103 	and.w	r1, r2, r3
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	1d02      	adds	r2, r0, #4
 80003fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000402:	7afb      	ldrb	r3, [r7, #11]
 8000404:	005b      	lsls	r3, r3, #1
 8000406:	4619      	mov	r1, r3
 8000408:	2303      	movs	r3, #3
 800040a:	408b      	lsls	r3, r1
 800040c:	43db      	mvns	r3, r3
 800040e:	401a      	ands	r2, r3
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	4a3a      	ldr	r2, [pc, #232]	; (8000500 <XMC_GPIO_Init+0x144>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d003      	beq.n	8000424 <XMC_GPIO_Init+0x68>
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	4a39      	ldr	r2, [pc, #228]	; (8000504 <XMC_GPIO_Init+0x148>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d10a      	bne.n	800043a <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000428:	7afb      	ldrb	r3, [r7, #11]
 800042a:	2101      	movs	r1, #1
 800042c:	fa01 f303 	lsl.w	r3, r1, r3
 8000430:	43db      	mvns	r3, r3
 8000432:	401a      	ands	r2, r3
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	661a      	str	r2, [r3, #96]	; 0x60
 8000438:	e042      	b.n	80004c0 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	b2db      	uxtb	r3, r3
 8000440:	b25b      	sxtb	r3, r3
 8000442:	2b00      	cmp	r3, #0
 8000444:	da3c      	bge.n	80004c0 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	685a      	ldr	r2, [r3, #4]
 800044a:	7afb      	ldrb	r3, [r7, #11]
 800044c:	409a      	lsls	r2, r3
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000452:	7afb      	ldrb	r3, [r7, #11]
 8000454:	08db      	lsrs	r3, r3, #3
 8000456:	b2db      	uxtb	r3, r3
 8000458:	4618      	mov	r0, r3
 800045a:	7afb      	ldrb	r3, [r7, #11]
 800045c:	08db      	lsrs	r3, r3, #3
 800045e:	b2db      	uxtb	r3, r3
 8000460:	461a      	mov	r2, r3
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	3210      	adds	r2, #16
 8000466:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800046a:	7afb      	ldrb	r3, [r7, #11]
 800046c:	f003 0307 	and.w	r3, r3, #7
 8000470:	009b      	lsls	r3, r3, #2
 8000472:	4619      	mov	r1, r3
 8000474:	2307      	movs	r3, #7
 8000476:	408b      	lsls	r3, r1
 8000478:	43db      	mvns	r3, r3
 800047a:	ea02 0103 	and.w	r1, r2, r3
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	f100 0210 	add.w	r2, r0, #16
 8000484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000488:	7afb      	ldrb	r3, [r7, #11]
 800048a:	08db      	lsrs	r3, r3, #3
 800048c:	b2db      	uxtb	r3, r3
 800048e:	4618      	mov	r0, r3
 8000490:	7afb      	ldrb	r3, [r7, #11]
 8000492:	08db      	lsrs	r3, r3, #3
 8000494:	b2db      	uxtb	r3, r3
 8000496:	461a      	mov	r2, r3
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	3210      	adds	r2, #16
 800049c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	7a1b      	ldrb	r3, [r3, #8]
 80004a4:	4619      	mov	r1, r3
 80004a6:	7afb      	ldrb	r3, [r7, #11]
 80004a8:	f003 0307 	and.w	r3, r3, #7
 80004ac:	009b      	lsls	r3, r3, #2
 80004ae:	fa01 f303 	lsl.w	r3, r1, r3
 80004b2:	ea42 0103 	orr.w	r1, r2, r3
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	f100 0210 	add.w	r2, r0, #16
 80004bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80004c0:	7afb      	ldrb	r3, [r7, #11]
 80004c2:	089b      	lsrs	r3, r3, #2
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	4618      	mov	r0, r3
 80004c8:	7afb      	ldrb	r3, [r7, #11]
 80004ca:	089b      	lsrs	r3, r3, #2
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	461a      	mov	r2, r3
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	3204      	adds	r2, #4
 80004d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	4619      	mov	r1, r3
 80004de:	7afb      	ldrb	r3, [r7, #11]
 80004e0:	f003 0303 	and.w	r3, r3, #3
 80004e4:	00db      	lsls	r3, r3, #3
 80004e6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ea:	ea42 0103 	orr.w	r1, r2, r3
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	1d02      	adds	r2, r0, #4
 80004f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004f6:	3714      	adds	r7, #20
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	48028e00 	.word	0x48028e00
 8000504:	48028f00 	.word	0x48028f00

08000508 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 800050c:	4b03      	ldr	r3, [pc, #12]	; (800051c <XMC_SCU_GetMirrorStatus+0x14>)
 800050e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8000512:	4618      	mov	r0, r3
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr
 800051c:	50004000 	.word	0x50004000

08000520 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000528:	f7ff fec8 	bl	80002bc <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 800052c:	4b0b      	ldr	r3, [pc, #44]	; (800055c <XMC_SCU_lDelay+0x3c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <XMC_SCU_lDelay+0x40>)
 8000532:	fba2 2303 	umull	r2, r3, r2, r3
 8000536:	0c9a      	lsrs	r2, r3, #18
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	fb02 f303 	mul.w	r3, r2, r3
 800053e:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000540:	2300      	movs	r3, #0
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	e003      	b.n	800054e <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8000546:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	3301      	adds	r3, #1
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	68fa      	ldr	r2, [r7, #12]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	429a      	cmp	r2, r3
 8000554:	d3f7      	bcc.n	8000546 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	2003ffc0 	.word	0x2003ffc0
 8000560:	431bde83 	.word	0x431bde83

08000564 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000564:	b5b0      	push	{r4, r5, r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af02      	add	r7, sp, #8
 800056a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 800056c:	2000      	movs	r0, #0
 800056e:	f000 f88b 	bl	8000688 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8000572:	f000 fa39 	bl	80009e8 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	79db      	ldrb	r3, [r3, #7]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d00a      	beq.n	8000594 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800057e:	f000 fa71 	bl	8000a64 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 8000582:	bf00      	nop
 8000584:	f000 fa5c 	bl	8000a40 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8000588:	4603      	mov	r3, r0
 800058a:	f083 0301 	eor.w	r3, r3, #1
 800058e:	b2db      	uxtb	r3, r3
 8000590:	2b00      	cmp	r3, #0
 8000592:	d1f7      	bne.n	8000584 <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	7a5b      	ldrb	r3, [r3, #9]
 8000598:	4618      	mov	r0, r3
 800059a:	f000 f8ef 	bl	800077c <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 800059e:	bf00      	nop
 80005a0:	f7ff ffb2 	bl	8000508 <XMC_SCU_GetMirrorStatus>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d1fa      	bne.n	80005a0 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	7a1b      	ldrb	r3, [r3, #8]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f9f4 	bl	800099c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	7c1b      	ldrb	r3, [r3, #16]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 f8fd 	bl	80007b8 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	7c5b      	ldrb	r3, [r3, #17]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 f920 	bl	8000808 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	7c9b      	ldrb	r3, [r3, #18]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 f907 	bl	80007e0 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	7cdb      	ldrb	r3, [r3, #19]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 f92a 	bl	8000830 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	799b      	ldrb	r3, [r3, #6]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d00a      	beq.n	80005fa <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80005e4:	f000 fa72 	bl	8000acc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80005e8:	bf00      	nop
 80005ea:	f000 fa97 	bl	8000b1c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80005ee:	4603      	mov	r3, r0
 80005f0:	f083 0301 	eor.w	r3, r3, #1
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d1f7      	bne.n	80005ea <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	78db      	ldrb	r3, [r3, #3]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d102      	bne.n	8000608 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 8000602:	f000 faaf 	bl	8000b64 <XMC_SCU_CLOCK_DisableSystemPll>
 8000606:	e014      	b.n	8000632 <XMC_SCU_CLOCK_Init+0xce>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000608:	f000 fa9c 	bl	8000b44 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	8899      	ldrh	r1, [r3, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000618:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800061e:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	4608      	mov	r0, r1
 8000628:	4611      	mov	r1, r2
 800062a:	462a      	mov	r2, r5
 800062c:	4623      	mov	r3, r4
 800062e:	f000 faa9 	bl	8000b84 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	68db      	ldr	r3, [r3, #12]
 8000636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800063a:	d103      	bne.n	8000644 <XMC_SCU_CLOCK_Init+0xe0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 800063c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000640:	f000 f822 	bl	8000688 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8000644:	f7ff fe3a 	bl	80002bc <SystemCoreClockUpdate>
}
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bdb0      	pop	{r4, r5, r7, pc}
 800064e:	bf00      	nop

08000650 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	0f1b      	lsrs	r3, r3, #28
 800065c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000664:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	4613      	mov	r3, r2
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	4413      	add	r3, r2
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	461a      	mov	r2, r3
 8000672:	4b04      	ldr	r3, [pc, #16]	; (8000684 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8000674:	4413      	add	r3, r2
 8000676:	68ba      	ldr	r2, [r7, #8]
 8000678:	601a      	str	r2, [r3, #0]
}
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	50004414 	.word	0x50004414

08000688 <XMC_SCU_CLOCK_SetSystemClockSource>:
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000690:	4906      	ldr	r1, [pc, #24]	; (80006ac <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000694:	68db      	ldr	r3, [r3, #12]
 8000696:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4313      	orrs	r3, r2
 800069e:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	50004600 	.word	0x50004600

080006b0 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80006b8:	4906      	ldr	r1, [pc, #24]	; (80006d4 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	50004600 	.word	0x50004600

080006d8 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 80006e0:	4906      	ldr	r1, [pc, #24]	; (80006fc <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80006e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4313      	orrs	r3, r2
 80006ee:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	50004600 	.word	0x50004600

08000700 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800070a:	88fb      	ldrh	r3, [r7, #6]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d108      	bne.n	8000722 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000710:	4a0a      	ldr	r2, [pc, #40]	; (800073c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000712:	4b0a      	ldr	r3, [pc, #40]	; (800073c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000714:	68db      	ldr	r3, [r3, #12]
 8000716:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800071a:	f023 0301 	bic.w	r3, r3, #1
 800071e:	60d3      	str	r3, [r2, #12]
 8000720:	e007      	b.n	8000732 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000722:	4a06      	ldr	r2, [pc, #24]	; (800073c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	60d3      	str	r3, [r2, #12]
  }
}
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	50004710 	.word	0x50004710

08000740 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800074a:	bf00      	nop
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 800074e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000752:	f003 0308 	and.w	r3, r3, #8
 8000756:	2b00      	cmp	r3, #0
 8000758:	d1f8      	bne.n	800074c <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800075a:	4907      	ldr	r1, [pc, #28]	; (8000778 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8000764:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000766:	4313      	orrs	r3, r2
 8000768:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	50004000 	.word	0x50004000
 8000778:	50004300 	.word	0x50004300

0800077c <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000786:	bf00      	nop
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 800078a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800078e:	f003 0308 	and.w	r3, r3, #8
 8000792:	2b00      	cmp	r3, #0
 8000794:	d1f8      	bne.n	8000788 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000796:	4907      	ldr	r1, [pc, #28]	; (80007b4 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80007a0:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007a2:	4313      	orrs	r3, r2
 80007a4:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	50004000 	.word	0x50004000
 80007b4:	50004300 	.word	0x50004300

080007b8 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80007c0:	4906      	ldr	r1, [pc, #24]	; (80007dc <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80007c4:	68db      	ldr	r3, [r3, #12]
 80007c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80007ce:	4313      	orrs	r3, r2
 80007d0:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	50004600 	.word	0x50004600

080007e0 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80007e8:	4906      	ldr	r1, [pc, #24]	; (8000804 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80007ec:	6a1b      	ldr	r3, [r3, #32]
 80007ee:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80007f6:	4313      	orrs	r3, r2
 80007f8:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	50004600 	.word	0x50004600

08000808 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000810:	4906      	ldr	r1, [pc, #24]	; (800082c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000814:	691b      	ldr	r3, [r3, #16]
 8000816:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800081e:	4313      	orrs	r3, r2
 8000820:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	50004600 	.word	0x50004600

08000830 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000838:	4906      	ldr	r1, [pc, #24]	; (8000854 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000846:	4313      	orrs	r3, r2
 8000848:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	50004600 	.word	0x50004600

08000858 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000860:	4906      	ldr	r1, [pc, #24]	; (800087c <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 800086e:	4313      	orrs	r3, r2
 8000870:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	50004600 	.word	0x50004600

08000880 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000888:	4906      	ldr	r1, [pc, #24]	; (80008a4 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000896:	4313      	orrs	r3, r2
 8000898:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	50004600 	.word	0x50004600

080008a8 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008b0:	4906      	ldr	r1, [pc, #24]	; (80008cc <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008be:	4313      	orrs	r3, r2
 80008c0:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	50004600 	.word	0x50004600

080008d0 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 80008da:	4a04      	ldr	r2, [pc, #16]	; (80008ec <XMC_SCU_CLOCK_EnableClock+0x1c>)
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	6053      	str	r3, [r2, #4]
}
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	50004600 	.word	0x50004600

080008f0 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	0f1b      	lsrs	r3, r3, #28
 80008fc:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000904:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 8000906:	68fa      	ldr	r2, [r7, #12]
 8000908:	4613      	mov	r3, r2
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	4413      	add	r3, r2
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	461a      	mov	r2, r3
 8000912:	4b04      	ldr	r3, [pc, #16]	; (8000924 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 8000914:	4413      	add	r3, r2
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	601a      	str	r2, [r3, #0]
}
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	50004648 	.word	0x50004648

08000928 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000932:	4a19      	ldr	r2, [pc, #100]	; (8000998 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000934:	4b18      	ldr	r3, [pc, #96]	; (8000998 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000936:	695b      	ldr	r3, [r3, #20]
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 800093e:	4a16      	ldr	r2, [pc, #88]	; (8000998 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000942:	695b      	ldr	r3, [r3, #20]
 8000944:	f043 0310 	orr.w	r3, r3, #16
 8000948:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 800094a:	4913      	ldr	r1, [pc, #76]	; (8000998 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	3b01      	subs	r3, #1
 8000950:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3b01      	subs	r3, #1
 8000956:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000958:	4313      	orrs	r3, r2
 800095a:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 800095c:	4a0e      	ldr	r2, [pc, #56]	; (8000998 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000966:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000968:	4a0b      	ldr	r2, [pc, #44]	; (8000998 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	f023 0310 	bic.w	r3, r3, #16
 8000972:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000974:	4a08      	ldr	r2, [pc, #32]	; (8000998 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800097e:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000980:	bf00      	nop
 8000982:	4b05      	ldr	r3, [pc, #20]	; (8000998 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000984:	691b      	ldr	r3, [r3, #16]
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	2b00      	cmp	r3, #0
 800098c:	d0f9      	beq.n	8000982 <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	50004710 	.word	0x50004710

0800099c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80009a6:	4a0f      	ldr	r2, [pc, #60]	; (80009e4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009a8:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009b0:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d10e      	bne.n	80009d6 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 80009b8:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80009c2:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 80009c4:	2064      	movs	r0, #100	; 0x64
 80009c6:	f7ff fdab 	bl	8000520 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 80009ca:	4a06      	ldr	r2, [pc, #24]	; (80009e4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009d4:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 80009d6:	2064      	movs	r0, #100	; 0x64
 80009d8:	f7ff fda2 	bl	8000520 <XMC_SCU_lDelay>
}
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	50004710 	.word	0x50004710

080009e8 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f003 0301 	and.w	r3, r3, #1
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d109      	bne.n	8000a0c <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80009fe:	bf00      	nop
 8000a00:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d0f9      	beq.n	8000a00 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000a0c:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d00a      	beq.n	8000a2e <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a1e:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000a20:	bf00      	nop
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d1f9      	bne.n	8000a22 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	50004200 	.word	0x50004200
 8000a3c:	50004400 	.word	0x50004400

08000a40 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f003 0308 	and.w	r3, r3, #8
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	bf0c      	ite	eq
 8000a50:	2301      	moveq	r3, #1
 8000a52:	2300      	movne	r3, #0
 8000a54:	b2db      	uxtb	r3, r3
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	50004300 	.word	0x50004300

08000a64 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8000a68:	bf00      	nop
 8000a6a:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a6c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d1f8      	bne.n	8000a6a <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000a78:	4a13      	ldr	r2, [pc, #76]	; (8000ac8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a7a:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a82:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000a84:	bf00      	nop
 8000a86:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a88:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a8c:	f003 0308 	and.w	r3, r3, #8
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d1f8      	bne.n	8000a86 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000a94:	4a0c      	ldr	r2, [pc, #48]	; (8000ac8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	f043 0308 	orr.w	r3, r3, #8
 8000a9e:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8000aa0:	bf00      	nop
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000aa4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000aa8:	f003 0304 	and.w	r3, r3, #4
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d1f8      	bne.n	8000aa2 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000ab2:	2208      	movs	r2, #8
 8000ab4:	609a      	str	r2, [r3, #8]

  while (XMC_SCU_GetMirrorStatus() != 0)
 8000ab6:	bf00      	nop
 8000ab8:	f7ff fd26 	bl	8000508 <XMC_SCU_GetMirrorStatus>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d1fa      	bne.n	8000ab8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }
}
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	50004000 	.word	0x50004000
 8000ac8:	50004300 	.word	0x50004300

08000acc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000acc:	b5b0      	push	{r4, r5, r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000ad0:	4a0f      	ldr	r2, [pc, #60]	; (8000b10 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ada:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000adc:	4d0d      	ldr	r5, [pc, #52]	; (8000b14 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000ade:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000ae6:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000aea:	f001 f861 	bl	8001bb0 <OSCHP_GetFrequency>
 8000aee:	4602      	mov	r2, r0
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000af2:	fba3 2302 	umull	r2, r3, r3, r2
 8000af6:	0d1b      	lsrs	r3, r3, #20
 8000af8:	3b01      	subs	r3, #1
 8000afa:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000afc:	4323      	orrs	r3, r4
 8000afe:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000b00:	4a03      	ldr	r2, [pc, #12]	; (8000b10 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b02:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000b0a:	6053      	str	r3, [r2, #4]
}
 8000b0c:	bdb0      	pop	{r4, r5, r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	50004710 	.word	0x50004710
 8000b14:	50004700 	.word	0x50004700
 8000b18:	6b5fca6b 	.word	0x6b5fca6b

08000b1c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000b20:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000b28:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000b2c:	bf0c      	ite	eq
 8000b2e:	2301      	moveq	r3, #1
 8000b30:	2300      	movne	r3, #0
 8000b32:	b2db      	uxtb	r3, r3
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	50004710 	.word	0x50004710

08000b44 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b48:	4a05      	ldr	r2, [pc, #20]	; (8000b60 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b52:	f023 0302 	bic.w	r3, r3, #2
 8000b56:	6053      	str	r3, [r2, #4]
}
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	50004710 	.word	0x50004710

08000b64 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b68:	4a05      	ldr	r2, [pc, #20]	; (8000b80 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b6a:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b72:	f043 0302 	orr.w	r3, r3, #2
 8000b76:	6053      	str	r3, [r2, #4]
}
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	50004710 	.word	0x50004710

08000b84 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60ba      	str	r2, [r7, #8]
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4603      	mov	r3, r0
 8000b90:	81fb      	strh	r3, [r7, #14]
 8000b92:	460b      	mov	r3, r1
 8000b94:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000b96:	89fb      	ldrh	r3, [r7, #14]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fdb1 	bl	8000700 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000b9e:	7b7b      	ldrb	r3, [r7, #13]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	f040 8084 	bne.w	8000cae <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000ba6:	89fb      	ldrh	r3, [r7, #14]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d109      	bne.n	8000bc0 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000bac:	f001 f800 	bl	8001bb0 <OSCHP_GetFrequency>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	4b4b      	ldr	r3, [pc, #300]	; (8000ce0 <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8000bb4:	fba3 2302 	umull	r2, r3, r3, r2
 8000bb8:	0c9b      	lsrs	r3, r3, #18
 8000bba:	059b      	lsls	r3, r3, #22
 8000bbc:	617b      	str	r3, [r7, #20]
 8000bbe:	e002      	b.n	8000bc6 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000bc0:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000bc4:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	fb02 f203 	mul.w	r2, r2, r3
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd4:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	4a42      	ldr	r2, [pc, #264]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8000bda:	fba2 2303 	umull	r2, r3, r2, r3
 8000bde:	091b      	lsrs	r3, r3, #4
 8000be0:	0d9b      	lsrs	r3, r3, #22
 8000be2:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000be4:	4a40      	ldr	r2, [pc, #256]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000be6:	4b40      	ldr	r3, [pc, #256]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000bf0:	4a3d      	ldr	r2, [pc, #244]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bf2:	4b3d      	ldr	r3, [pc, #244]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f043 0310 	orr.w	r3, r3, #16
 8000bfa:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000bfc:	493a      	ldr	r1, [pc, #232]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bfe:	4b3a      	ldr	r3, [pc, #232]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c00:	689a      	ldr	r2, [r3, #8]
 8000c02:	4b3a      	ldr	r3, [pc, #232]	; (8000cec <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8000c04:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	0212      	lsls	r2, r2, #8
 8000c0c:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	3b01      	subs	r3, #1
 8000c12:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c14:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000c20:	4a31      	ldr	r2, [pc, #196]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c22:	4b31      	ldr	r3, [pc, #196]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c2a:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c2c:	4a2e      	ldr	r2, [pc, #184]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f023 0310 	bic.w	r3, r3, #16
 8000c36:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000c38:	4a2b      	ldr	r2, [pc, #172]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c42:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000c44:	bf00      	nop
 8000c46:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d0f9      	beq.n	8000c46 <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c52:	4a25      	ldr	r2, [pc, #148]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c54:	4b24      	ldr	r3, [pc, #144]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f023 0301 	bic.w	r3, r3, #1
 8000c5c:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000c5e:	bf00      	nop
 8000c60:	4b21      	ldr	r3, [pc, #132]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d1f9      	bne.n	8000c60 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	4a20      	ldr	r2, [pc, #128]	; (8000cf0 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8000c70:	fba2 2303 	umull	r2, r3, r2, r3
 8000c74:	095b      	lsrs	r3, r3, #5
 8000c76:	0d9b      	lsrs	r3, r3, #22
 8000c78:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c7a:	6a3a      	ldr	r2, [r7, #32]
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d202      	bcs.n	8000c88 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000c82:	6938      	ldr	r0, [r7, #16]
 8000c84:	f000 f838 	bl	8000cf8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	085b      	lsrs	r3, r3, #1
 8000c8c:	4a19      	ldr	r2, [pc, #100]	; (8000cf4 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8000c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c92:	095b      	lsrs	r3, r3, #5
 8000c94:	0d9b      	lsrs	r3, r3, #22
 8000c96:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c98:	6a3a      	ldr	r2, [r7, #32]
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d202      	bcs.n	8000ca6 <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000ca0:	6938      	ldr	r0, [r7, #16]
 8000ca2:	f000 f829 	bl	8000cf8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000ca6:	6a38      	ldr	r0, [r7, #32]
 8000ca8:	f000 f826 	bl	8000cf8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000cac:	e015      	b.n	8000cda <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000cae:	490e      	ldr	r1, [pc, #56]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000cb8:	6a3b      	ldr	r3, [r7, #32]
 8000cba:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000cc0:	4a09      	ldr	r2, [pc, #36]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000ccc:	bf00      	nop
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d0f9      	beq.n	8000cce <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	431bde83 	.word	0x431bde83
 8000ce4:	aaaaaaab 	.word	0xaaaaaaab
 8000ce8:	50004710 	.word	0x50004710
 8000cec:	f08080ff 	.word	0xf08080ff
 8000cf0:	88888889 	.word	0x88888889
 8000cf4:	b60b60b7 	.word	0xb60b60b7

08000cf8 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d00:	4907      	ldr	r1, [pc, #28]	; (8000d20 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000d02:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d10:	4313      	orrs	r3, r2
 8000d12:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8000d14:	2032      	movs	r0, #50	; 0x32
 8000d16:	f7ff fc03 	bl	8000520 <XMC_SCU_lDelay>
}
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	50004710 	.word	0x50004710

08000d24 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	60da      	str	r2, [r3, #12]
}
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a10      	ldr	r2, [pc, #64]	; (8000d90 <XMC_CCU4_lDeassertReset+0x4c>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d103      	bne.n	8000d5c <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8000d54:	2004      	movs	r0, #4
 8000d56:	f7ff fc7b 	bl	8000650 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000d5a:	e016      	b.n	8000d8a <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a0d      	ldr	r2, [pc, #52]	; (8000d94 <XMC_CCU4_lDeassertReset+0x50>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d103      	bne.n	8000d6c <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8000d64:	2008      	movs	r0, #8
 8000d66:	f7ff fc73 	bl	8000650 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000d6a:	e00e      	b.n	8000d8a <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <XMC_CCU4_lDeassertReset+0x54>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d103      	bne.n	8000d7c <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8000d74:	2010      	movs	r0, #16
 8000d76:	f7ff fc6b 	bl	8000650 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000d7a:	e006      	b.n	8000d8a <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a07      	ldr	r2, [pc, #28]	; (8000d9c <XMC_CCU4_lDeassertReset+0x58>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d102      	bne.n	8000d8a <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8000d84:	4806      	ldr	r0, [pc, #24]	; (8000da0 <XMC_CCU4_lDeassertReset+0x5c>)
 8000d86:	f7ff fc63 	bl	8000650 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	4000c000 	.word	0x4000c000
 8000d94:	40010000 	.word	0x40010000
 8000d98:	40014000 	.word	0x40014000
 8000d9c:	48004000 	.word	0x48004000
 8000da0:	10000001 	.word	0x10000001

08000da4 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a10      	ldr	r2, [pc, #64]	; (8000df0 <XMC_CCU4_lUngateClock+0x4c>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d103      	bne.n	8000dbc <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 8000db4:	2004      	movs	r0, #4
 8000db6:	f7ff fd9b 	bl	80008f0 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8000dba:	e016      	b.n	8000dea <XMC_CCU4_lUngateClock+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a0d      	ldr	r2, [pc, #52]	; (8000df4 <XMC_CCU4_lUngateClock+0x50>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d103      	bne.n	8000dcc <XMC_CCU4_lUngateClock+0x28>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 8000dc4:	2008      	movs	r0, #8
 8000dc6:	f7ff fd93 	bl	80008f0 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8000dca:	e00e      	b.n	8000dea <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <XMC_CCU4_lUngateClock+0x54>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d103      	bne.n	8000ddc <XMC_CCU4_lUngateClock+0x38>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 8000dd4:	2010      	movs	r0, #16
 8000dd6:	f7ff fd8b 	bl	80008f0 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8000dda:	e006      	b.n	8000dea <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <XMC_CCU4_lUngateClock+0x58>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d102      	bne.n	8000dea <XMC_CCU4_lUngateClock+0x46>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 8000de4:	4806      	ldr	r0, [pc, #24]	; (8000e00 <XMC_CCU4_lUngateClock+0x5c>)
 8000de6:	f7ff fd83 	bl	80008f0 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	4000c000 	.word	0x4000c000
 8000df4:	40010000 	.word	0x40010000
 8000df8:	40014000 	.word	0x40014000
 8000dfc:	48004000 	.word	0x48004000
 8000e00:	10000001 	.word	0x10000001

08000e04 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000e0c:	2010      	movs	r0, #16
 8000e0e:	f7ff fd5f 	bl	80008d0 <XMC_SCU_CLOCK_EnableClock>
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ffc6 	bl	8000da4 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff ff93 	bl	8000d44 <XMC_CCU4_lDeassertReset>
#endif
}
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff ffe7 	bl	8000e04 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ff74 	bl	8000d24 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e48:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8000e4a:	78fb      	ldrb	r3, [r7, #3]
 8000e4c:	039b      	lsls	r3, r3, #14
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	601a      	str	r2, [r3, #0]
}
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	795b      	ldrb	r3, [r3, #5]
 8000e76:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	051a      	lsls	r2, r3, #20
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	791b      	ldrb	r3, [r3, #4]
 8000e86:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	795b      	ldrb	r3, [r3, #5]
 8000e96:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	795b      	ldrb	r3, [r3, #5]
 8000ea6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	461a      	mov	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	791b      	ldrb	r3, [r3, #4]
 8000eb6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	70fb      	strb	r3, [r7, #3]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000ee2:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	2b09      	cmp	r3, #9
 8000ee8:	d82c      	bhi.n	8000f44 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 8000eea:	a201      	add	r2, pc, #4	; (adr r2, 8000ef0 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 8000eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef0:	08000f19 	.word	0x08000f19
 8000ef4:	08000f19 	.word	0x08000f19
 8000ef8:	08000f23 	.word	0x08000f23
 8000efc:	08000f23 	.word	0x08000f23
 8000f00:	08000f45 	.word	0x08000f45
 8000f04:	08000f45 	.word	0x08000f45
 8000f08:	08000f45 	.word	0x08000f45
 8000f0c:	08000f45 	.word	0x08000f45
 8000f10:	08000f2d 	.word	0x08000f2d
 8000f14:	08000f39 	.word	0x08000f39
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8000f18:	2303      	movs	r3, #3
 8000f1a:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
      break;
 8000f20:	e016      	b.n	8000f50 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8000f22:	230c      	movs	r3, #12
 8000f24:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8000f26:	2302      	movs	r3, #2
 8000f28:	617b      	str	r3, [r7, #20]
      break;
 8000f2a:	e011      	b.n	8000f50 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8000f2c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f30:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8000f32:	2308      	movs	r3, #8
 8000f34:	617b      	str	r3, [r7, #20]
      break;
 8000f36:	e00b      	b.n	8000f50 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8000f38:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f3c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8000f3e:	230a      	movs	r3, #10
 8000f40:	617b      	str	r3, [r7, #20]
      break;
 8000f42:	e005      	b.n	8000f50 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8000f44:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f48:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 8000f4a:	230c      	movs	r3, #12
 8000f4c:	617b      	str	r3, [r7, #20]
      break;
 8000f4e:	bf00      	nop
  }
  
  srs &= ~mask; 
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	68fa      	ldr	r2, [r7, #12]
 8000f56:	4013      	ands	r3, r2
 8000f58:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 8000f5a:	78ba      	ldrb	r2, [r7, #2]
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8000f70:	371c      	adds	r7, #28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	60da      	str	r2, [r3, #12]
}
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	611a      	str	r2, [r3, #16]
}
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <XMC_CCU8_lDeassertReset>:
    XMC_ASSERT("XMC_CCU8_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a09      	ldr	r2, [pc, #36]	; (8000fe4 <XMC_CCU8_lDeassertReset+0x30>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d103      	bne.n	8000fcc <XMC_CCU8_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 8000fc4:	2080      	movs	r0, #128	; 0x80
 8000fc6:	f7ff fb43 	bl	8000650 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000fca:	e007      	b.n	8000fdc <XMC_CCU8_lDeassertReset+0x28>
  }
#if defined(CCU81)
  else if (module == CCU81)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <XMC_CCU8_lDeassertReset+0x34>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d103      	bne.n	8000fdc <XMC_CCU8_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 8000fd4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000fd8:	f7ff fb3a 	bl	8000650 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40020000 	.word	0x40020000
 8000fe8:	40024000 	.word	0x40024000

08000fec <XMC_CCU8_lUngateClock>:
    XMC_ASSERT("XMC_CCU8_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lUngateClock(XMC_CCU8_MODULE_t *const module)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a09      	ldr	r2, [pc, #36]	; (800101c <XMC_CCU8_lUngateClock+0x30>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d103      	bne.n	8001004 <XMC_CCU8_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
 8000ffc:	2080      	movs	r0, #128	; 0x80
 8000ffe:	f7ff fc77 	bl	80008f0 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8001002:	e007      	b.n	8001014 <XMC_CCU8_lUngateClock+0x28>
  }
#if defined(CCU81)
  else if (module == CCU81)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a06      	ldr	r2, [pc, #24]	; (8001020 <XMC_CCU8_lUngateClock+0x34>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d103      	bne.n	8001014 <XMC_CCU8_lUngateClock+0x28>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU81);
 800100c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001010:	f7ff fc6e 	bl	80008f0 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lUngateClock:Invalid Module Pointer", 0);
  }
}
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40020000 	.word	0x40020000
 8001020:	40024000 	.word	0x40024000

08001024 <XMC_CCU8_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to set the CCU8 module as active and enable the clock  */
void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));

#if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 800102c:	2010      	movs	r0, #16
 800102e:	f7ff fc4f 	bl	80008d0 <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU8_lUngateClock(module);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ffda 	bl	8000fec <XMC_CCU8_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU8_lDeassertReset(module);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff ffbb 	bl	8000fb4 <XMC_CCU8_lDeassertReset>
#endif
}
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <XMC_CCU8_Init>:
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ffe7 	bl	8001024 <XMC_CCU8_EnableModule>
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(module);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ff90 	bl	8000f7c <XMC_CCU8_StartPrescaler>
  
  gctrl = module->GCTRL;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001068:	60fb      	str	r3, [r7, #12]
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 800106a:	78fb      	ldrb	r3, [r7, #3]
 800106c:	039b      	lsls	r3, r3, #14
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4313      	orrs	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	601a      	str	r2, [r3, #0]
}
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <XMC_CCU8_SLICE_CompareInit>:
}

/* API to configure CC8 Slice in Compare mode */
void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
             (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff ff86 	bl	8000f9c <XMC_CCU8_SLICE_StopTimer>
  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	7b5b      	ldrb	r3, [r3, #13]
 800109c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	051a      	lsls	r2, r3, #20
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	7b1b      	ldrb	r3, [r3, #12]
 80010ac:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	461a      	mov	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	7b1b      	ldrb	r3, [r3, #12]
 80010bc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	461a      	mov	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	7b5b      	ldrb	r3, [r3, #13]
 80010cc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	461a      	mov	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->psl;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	619a      	str	r2, [r3, #24]
  /* Asymmetric PWM and Slice output routing configuration */
#if defined(CCU8V3) /* Defined for XMC1400 devices only */
  slice->CHC = (uint32_t) compare_init->chc;
#else
  slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f083 0214 	eor.w	r2, r3, #20
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	649a      	str	r2, [r3, #72]	; 0x48
#endif
}
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop

080010f4 <XMC_CCU8_SLICE_SetTimerPeriodMatch>:
  slice->TC = tc;
}

/* Programs period match value of the timer  */
void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8001100:	887a      	ldrh	r2, [r7, #2]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <XMC_CCU8_SLICE_SetTimerCompareMatch>:

/* Programs timer compare match value for channel 1 or 2 */
void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
                                         const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
                                         const uint16_t compare_val)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	70fb      	strb	r3, [r7, #3]
 800111c:	4613      	mov	r3, r2
 800111e:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 8001120:	78fb      	ldrb	r3, [r7, #3]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d103      	bne.n	800112e <XMC_CCU8_SLICE_SetTimerCompareMatch+0x1e>
  {
    slice->CR1S = (uint32_t) compare_val;
 8001126:	883a      	ldrh	r2, [r7, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	63da      	str	r2, [r3, #60]	; 0x3c
 800112c:	e002      	b.n	8001134 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x24>
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
 800112e:	883a      	ldrh	r2, [r7, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop

08001140 <XMC_ERU_ETL_Init>:
 ********************************************************************************************************************/
/* Initializes the selected ERU_ETLx channel with the config structure.  */
void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_ETL_CONFIG_t *const config)
{ 
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	460b      	mov	r3, r1
 800114a:	607a      	str	r2, [r7, #4]
 800114c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f7ff f91e 	bl	8000390 <XMC_ERU_Enable>

  eru->EXISEL = (eru->EXISEL & 
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681a      	ldr	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 8001158:	7afb      	ldrb	r3, [r7, #11]
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4619      	mov	r1, r3
 800115e:	230f      	movs	r3, #15
 8001160:	408b      	lsls	r3, r1
 8001162:	43db      	mvns	r3, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 8001164:	401a      	ands	r2, r3
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	7af9      	ldrb	r1, [r7, #11]
 800116c:	0089      	lsls	r1, r1, #2
 800116e:	408b      	lsls	r3, r1
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 8001170:	431a      	orrs	r2, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	601a      	str	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
  
  eru->EXICON[channel] = config->raw;
 8001176:	7afa      	ldrb	r2, [r7, #11]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6859      	ldr	r1, [r3, #4]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	3204      	adds	r2, #4
 8001180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop

0800118c <XMC_ERU_OGU_SetServiceRequestMode>:

/* Configures the gating scheme for service request generation by setting (GP) bit. */
void XMC_ERU_OGU_SetServiceRequestMode(XMC_ERU_t *const eru,
                                       const uint8_t channel,
                                       const XMC_ERU_OGU_SERVICE_REQUEST_t mode)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	70fb      	strb	r3, [r7, #3]
 8001198:	4613      	mov	r3, r2
 800119a:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Service Request Mode", XMC_ERU_OGU_CHECK_SERIVCE_REQUEST(mode));

  eru->EXOCON_b[channel].GP = (uint8_t)mode;
 800119c:	78fa      	ldrb	r2, [r7, #3]
 800119e:	78bb      	ldrb	r3, [r7, #2]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	b2d9      	uxtb	r1, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3208      	adds	r2, #8
 80011aa:	f001 0103 	and.w	r1, r1, #3
 80011ae:	0109      	lsls	r1, r1, #4
 80011b0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80011b4:	f020 0030 	bic.w	r0, r0, #48	; 0x30
 80011b8:	4301      	orrs	r1, r0
 80011ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	70fb      	strb	r3, [r7, #3]
 80011d4:	4613      	mov	r3, r2
 80011d6:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80011dc:	78fb      	ldrb	r3, [r7, #3]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	4619      	mov	r1, r3
 80011e2:	2303      	movs	r3, #3
 80011e4:	408b      	lsls	r3, r1
 80011e6:	43db      	mvns	r3, r3
 80011e8:	401a      	ands	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80011f2:	78bb      	ldrb	r3, [r7, #2]
 80011f4:	78f9      	ldrb	r1, [r7, #3]
 80011f6:	0049      	lsls	r1, r1, #1
 80011f8:	408b      	lsls	r3, r1
 80011fa:	431a      	orrs	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop

0800120c <_init>:
  }
}

/* Init */
void _init(void)
{}
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <XMC_CCU8_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1 << slice_number);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68da      	ldr	r2, [r3, #12]
 8001228:	78fb      	ldrb	r3, [r7, #3]
 800122a:	2101      	movs	r1, #1
 800122c:	fa01 f303 	lsl.w	r3, r1, r3
 8001230:	431a      	orrs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	60da      	str	r2, [r3, #12]
}
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <XMC_CCU8_SLICE_IsTimerRunning>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer()<BR>  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU8_SLICE_IsTimerRunning(const XMC_CCU8_SLICE_t *const slice)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  return(bool)(((slice->TCST) & CCU8_CC8_TCST_TRB_Msk) == (uint32_t)CCU8_CC8_TCST_TRB_Msk);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	2b00      	cmp	r3, #0
 8001252:	bf14      	ite	ne
 8001254:	2301      	movne	r3, #1
 8001256:	2300      	moveq	r3, #0
 8001258:	b2db      	uxtb	r3, r3
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop

08001268 <XMC_CCU8_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	60da      	str	r2, [r3, #12]
}
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2201      	movs	r2, #1
 800128c:	611a      	str	r2, [r3, #16]
}
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <XMC_CCU8_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_ClearTimer(XMC_CCU8_SLICE_t *const slice)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TCC_Msk;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2202      	movs	r2, #2
 80012a4:	611a      	str	r2, [r3, #16]
}
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <XMC_CCU8_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	611a      	str	r2, [r3, #16]
}
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop

080012cc <XMC_CCU8_SLICE_GetTimerValue>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_SetTimerValue().
 */
__STATIC_INLINE uint16_t XMC_CCU8_SLICE_GetTimerValue(const XMC_CCU8_SLICE_t *const slice)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_GetTimerValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  return((uint16_t) slice->TIMER);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d8:	b29b      	uxth	r3, r3
}
 80012da:	4618      	mov	r0, r3
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop

080012e8 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 80012f0:	2300      	movs	r3, #0
 80012f2:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80012fa:	f083 0301 	eor.w	r3, r3, #1
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b00      	cmp	r3, #0
 8001302:	d009      	beq.n	8001318 <TIMER_Init+0x30>
      status = TIMER_CCU4_lInit(handle_ptr);
    }
#endif

#ifdef TIMER_CCU8_USED
    if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800130a:	2b01      	cmp	r3, #1
 800130c:	d104      	bne.n	8001318 <TIMER_Init+0x30>
    {
      /* Configure CCU8 timer for the required time tick settings */
      status = TIMER_CCU8_lInit(handle_ptr);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 f8c4 	bl	800149c <TIMER_CCU8_lInit>
 8001314:	4603      	mov	r3, r0
 8001316:	73fb      	strb	r3, [r7, #15]
    }
#endif
  }

  return (status);
 8001318:	7bfb      	ldrb	r3, [r7, #15]
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop

08001324 <TIMER_Start>:

/*
 * This function starts the timer to generate the events for the specified time_interval value
 */
TIMER_STATUS_t TIMER_Start(TIMER_t  *const handle_ptr)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00c      	beq.n	8001350 <TIMER_Start+0x2c>
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
    }
#endif

#ifdef TIMER_CCU8_USED
    if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800133c:	2b01      	cmp	r3, #1
 800133e:	d104      	bne.n	800134a <TIMER_Start+0x26>
       {
      /* Start the timer manually */
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	695b      	ldr	r3, [r3, #20]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff8f 	bl	8001268 <XMC_CCU8_SLICE_StartTimer>
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 800134a:	2300      	movs	r3, #0
 800134c:	73fb      	strb	r3, [r7, #15]
 800134e:	e001      	b.n	8001354 <TIMER_Start+0x30>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8001350:	2301      	movs	r3, #1
 8001352:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8001354:	7bfb      	ldrb	r3, [r7, #15]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop

08001360 <TIMER_Stop>:

/*
 * This function stops and clears the timer
 */
TIMER_STATUS_t TIMER_Stop(TIMER_t  *const handle_ptr)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Stop:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check whether timer is initialized and in running state */
  if ((TIMER_GetTimerStatus(handle_ptr)) && (true == handle_ptr->initialized))
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f000 f81d 	bl	80013a8 <TIMER_GetTimerStatus>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d011      	beq.n	8001398 <TIMER_Stop+0x38>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800137a:	2b00      	cmp	r3, #0
 800137c:	d00c      	beq.n	8001398 <TIMER_Stop+0x38>
      XMC_CCU4_SLICE_StopTimer(handle_ptr->ccu4_slice_ptr);
    }
#endif

#ifdef TIMER_CCU8_USED
    if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001384:	2b01      	cmp	r3, #1
 8001386:	d104      	bne.n	8001392 <TIMER_Stop+0x32>
       {
      /* Stops the timer */
      XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff77 	bl	8001280 <XMC_CCU8_SLICE_StopTimer>
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 8001392:	2300      	movs	r3, #0
 8001394:	73fb      	strb	r3, [r7, #15]
 8001396:	e001      	b.n	800139c <TIMER_Stop+0x3c>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8001398:	2301      	movs	r3, #1
 800139a:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 800139c:	7bfb      	ldrb	r3, [r7, #15]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop

080013a8 <TIMER_GetTimerStatus>:

/*
 * This function returns the status of the timer
 */
bool TIMER_GetTimerStatus(TIMER_t  *const handle_ptr)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  bool status;

  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));

  status = false;
 80013b0:	2300      	movs	r3, #0
 80013b2:	73fb      	strb	r3, [r7, #15]
    status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
  }
#endif

#ifdef TIMER_CCU8_USED
  if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d106      	bne.n	80013cc <TIMER_GetTimerStatus+0x24>
  {
    /* Returns the current status of the timer */
    status = XMC_CCU8_SLICE_IsTimerRunning(handle_ptr->ccu8_slice_ptr);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff ff3c 	bl	8001240 <XMC_CCU8_SLICE_IsTimerRunning>
 80013c8:	4603      	mov	r3, r0
 80013ca:	73fb      	strb	r3, [r7, #15]
  }
#endif

  return (status);
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop

080013d8 <TIMER_GetTime>:

/*
 * This function returns the current time value
 */
uint32_t TIMER_GetTime(TIMER_t *const handle_ptr)
{
 80013d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013da:	b087      	sub	sp, #28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t ltimer_val;
  uint32_t lprescaler;
  uint32_t ltime_val;

  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));
  ltime_val = 0U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
                           (TIMER_CLK_SCALE_FACTOR - lprescaler));
  }
#endif

#ifdef TIMER_CCU8_USED
  if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d131      	bne.n	8001452 <TIMER_GetTime+0x7a>
  {
    /* Added one to according to the edge aligned mode */
    ltimer_val = (uint32_t)XMC_CCU8_SLICE_GetTimerValue(handle_ptr->ccu8_slice_ptr) + 1U;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ff6a 	bl	80012cc <XMC_CCU8_SLICE_GetTimerValue>
 80013f8:	4603      	mov	r3, r0
 80013fa:	3301      	adds	r3, #1
 80013fc:	613b      	str	r3, [r7, #16]
    lprescaler = handle_ptr->ccu8_slice_config_ptr->prescaler_initval;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	7b1b      	ldrb	r3, [r3, #12]
 8001404:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001408:	b2db      	uxtb	r3, r3
 800140a:	60fb      	str	r3, [r7, #12]

    /* calculate the time value in micro seconds and scaled with 100 */
    ltime_val = (uint32_t)((uint64_t)((uint64_t)ltimer_val * (uint64_t)TIMER_CLK_CONST_SCALED) >> \
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	461a      	mov	r2, r3
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	4911      	ldr	r1, [pc, #68]	; (800145c <TIMER_GetTime+0x84>)
 8001416:	fb01 f003 	mul.w	r0, r1, r3
 800141a:	2100      	movs	r1, #0
 800141c:	fb01 f102 	mul.w	r1, r1, r2
 8001420:	4401      	add	r1, r0
 8001422:	480e      	ldr	r0, [pc, #56]	; (800145c <TIMER_GetTime+0x84>)
 8001424:	fba2 2300 	umull	r2, r3, r2, r0
 8001428:	4419      	add	r1, r3
 800142a:	460b      	mov	r3, r1
                           (TIMER_CLK_SCALE_FACTOR - lprescaler));
 800142c:	68f9      	ldr	r1, [r7, #12]
 800142e:	f1c1 0120 	rsb	r1, r1, #32
    /* Added one to according to the edge aligned mode */
    ltimer_val = (uint32_t)XMC_CCU8_SLICE_GetTimerValue(handle_ptr->ccu8_slice_ptr) + 1U;
    lprescaler = handle_ptr->ccu8_slice_config_ptr->prescaler_initval;

    /* calculate the time value in micro seconds and scaled with 100 */
    ltime_val = (uint32_t)((uint64_t)((uint64_t)ltimer_val * (uint64_t)TIMER_CLK_CONST_SCALED) >> \
 8001432:	f1c1 0620 	rsb	r6, r1, #32
 8001436:	f1a1 0020 	sub.w	r0, r1, #32
 800143a:	fa22 f401 	lsr.w	r4, r2, r1
 800143e:	fa03 f606 	lsl.w	r6, r3, r6
 8001442:	4334      	orrs	r4, r6
 8001444:	fa23 f000 	lsr.w	r0, r3, r0
 8001448:	4304      	orrs	r4, r0
 800144a:	fa23 f501 	lsr.w	r5, r3, r1
 800144e:	4623      	mov	r3, r4
 8001450:	617b      	str	r3, [r7, #20]
                           (TIMER_CLK_SCALE_FACTOR - lprescaler));
  }
#endif

  return ltime_val;
 8001452:	697b      	ldr	r3, [r7, #20]
}
 8001454:	4618      	mov	r0, r3
 8001456:	371c      	adds	r7, #28
 8001458:	46bd      	mov	sp, r7
 800145a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145c:	b1c71c71 	.word	0xb1c71c71

08001460 <TIMER_Clear>:

/*
 * Clear the timer
 */
TIMER_STATUS_t TIMER_Clear(TIMER_t *const handle_ptr)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Clear:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800146e:	2b00      	cmp	r3, #0
 8001470:	d00c      	beq.n	800148c <TIMER_Clear+0x2c>
      XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
    }
#endif

#ifdef TIMER_CCU8_USED
    if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001478:	2b01      	cmp	r3, #1
 800147a:	d104      	bne.n	8001486 <TIMER_Clear+0x26>
    {
      /* Clear the timer register */
      XMC_CCU8_SLICE_ClearTimer(handle_ptr->ccu8_slice_ptr);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	695b      	ldr	r3, [r3, #20]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff09 	bl	8001298 <XMC_CCU8_SLICE_ClearTimer>
    }
#endif
    status = TIMER_STATUS_SUCCESS;
 8001486:	2300      	movs	r3, #0
 8001488:	73fb      	strb	r3, [r7, #15]
 800148a:	e001      	b.n	8001490 <TIMER_Clear+0x30>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 800148c:	2301      	movs	r3, #1
 800148e:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8001490:	7bfb      	ldrb	r3, [r7, #15]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop

0800149c <TIMER_CCU8_lInit>:
#ifdef TIMER_CCU8_USED
/*
 * This function configures timer ccu8 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU8_lInit(TIMER_t* const handle_ptr)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU8_Init(handle_ptr->global_ccu8_handler);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f000 fa8d 	bl	80019c8 <GLOBAL_CCU8_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU8_EnableClock(handle_ptr->global_ccu8_handler->module_ptr, handle_ptr->ccu8_slice_number);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	7e1b      	ldrb	r3, [r3, #24]
 80014bc:	4610      	mov	r0, r2
 80014be:	4619      	mov	r1, r3
 80014c0:	f7ff feaa 	bl	8001218 <XMC_CCU8_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	695a      	ldr	r2, [r3, #20]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69db      	ldr	r3, [r3, #28]
 80014cc:	4610      	mov	r0, r2
 80014ce:	4619      	mov	r1, r3
 80014d0:	f7ff fdd6 	bl	8001080 <XMC_CCU8_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU8_lShadowTransfer(handle_ptr);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f000 f819 	bl	800150c <TIMER_CCU8_lShadowTransfer>
    /* Enables a timer(period match) event  */
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
  }
#endif
  /* Clears the timer register */
  XMC_CCU8_SLICE_ClearTimer(handle_ptr->ccu8_slice_ptr);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff feda 	bl	8001298 <XMC_CCU8_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d004      	beq.n	8001500 <TIMER_CCU8_lInit+0x64>
  {
    /* Start the timer */
    XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff feb4 	bl	8001268 <XMC_CCU8_SLICE_StartTimer>
  }

  return (status);
 8001500:	7bfb      	ldrb	r3, [r7, #15]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop

0800150c <TIMER_CCU8_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU8_lShadowTransfer(TIMER_t* const handle_ptr)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, handle_ptr->period_value);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	695a      	ldr	r2, [r3, #20]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	f7ff fde8 	bl	80010f4 <XMC_CCU8_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle in compare channel 1*/
  XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr,
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	4618      	mov	r0, r3
 800152a:	2100      	movs	r1, #0
 800152c:	2200      	movs	r2, #0
 800152e:	f7ff fdef 	bl	8001110 <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                      XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
                                      TIMER_CMP_100_DUTY);
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU8_EnableShadowTransfer(handle_ptr->global_ccu8_handler->module_ptr, handle_ptr->shadow_mask);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	4610      	mov	r0, r2
 800153e:	4619      	mov	r1, r3
 8001540:	f7ff feb6 	bl	80012b0 <XMC_CCU8_EnableShadowTransfer>
}
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop

0800154c <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68da      	ldr	r2, [r3, #12]
 800155c:	78fb      	ldrb	r3, [r7, #3]
 800155e:	2101      	movs	r1, #1
 8001560:	fa01 f303 	lsl.w	r3, r1, r3
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	60da      	str	r2, [r3, #12]
}
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	60da      	str	r2, [r3, #12]
}
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8001598:	887a      	ldrh	r2, [r7, #2]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 80015b4:	887a      	ldrh	r2, [r7, #2]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	611a      	str	r2, [r3, #16]
}
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop

080015e0 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80015f2:	78fb      	ldrb	r3, [r7, #3]
 80015f4:	2101      	movs	r1, #1
 80015f6:	fa01 f303 	lsl.w	r3, r1, r3
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <PWM_lCCU4_Init>:

#ifdef PWM_SLICE_USED_CCU4

/*Initialize the APP and CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_Init(PWM_t *const handle_ptr)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status = PWM_STATUS_FAILURE;
 8001614:	2301      	movs	r3, #1
 8001616:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_lCCU4_Init:Invalid handle_ptr" , (handle_ptr != NULL))

  if (PWM_STATUS_UNINITIALIZED == handle_ptr->state)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800161e:	2b02      	cmp	r3, #2
 8001620:	d14d      	bne.n	80016be <PWM_lCCU4_Init+0xb2>
  {
    /* Initialize consumed Apps */
    status = (PWM_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handle);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f9fe 	bl	8001a28 <GLOBAL_CCU4_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	73fb      	strb	r3, [r7, #15]

    /*Initialize CCU4 slice */
    if (PWM_STATUS_SUCCESS == status)/*check GLOBAL_CCU4_Init status*/
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d13f      	bne.n	80016b6 <PWM_lCCU4_Init+0xaa>
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	f7ff fc0d 	bl	8000e60 <XMC_CCU4_SLICE_CompareInit>

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689a      	ldr	r2, [r3, #8]
    		                             (uint16_t)handle_ptr->period_value);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69db      	ldr	r3, [r3, #28]
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
 800164e:	b29b      	uxth	r3, r3
 8001650:	4610      	mov	r0, r2
 8001652:	4619      	mov	r1, r3
 8001654:	f7ff ff9a 	bl	800158c <XMC_CCU4_SLICE_SetTimerPeriodMatch>
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689a      	ldr	r2, [r3, #8]
    		                              (uint16_t)handle_ptr->compare_value);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	699b      	ldr	r3, [r3, #24]

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
 8001660:	b29b      	uxth	r3, r3
 8001662:	4610      	mov	r0, r2
 8001664:	4619      	mov	r1, r3
 8001666:	f7ff ff9f 	bl	80015a8 <XMC_CCU4_SLICE_SetTimerCompareMatch>
    		                              (uint16_t)handle_ptr->compare_value);

      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	f7ff ffa5 	bl	80015c4 <XMC_CCU4_EnableShadowTransfer>

      /* Initialize interrupts */
      PWM_lCCU4_ConfigInterrupts(handle_ptr);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f824 	bl	80016c8 <PWM_lCCU4_ConfigInterrupts>

      XMC_GPIO_Init(handle_ptr->gpio_out_port,handle_ptr->gpio_out_pin,
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6919      	ldr	r1, [r3, #16]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	4608      	mov	r0, r1
 8001690:	4611      	mov	r1, r2
 8001692:	461a      	mov	r2, r3
 8001694:	f7fe fe92 	bl	80003bc <XMC_GPIO_Init>
    		        handle_ptr->gpio_out_config);

      handle_ptr->state = PWM_STATUS_SUCCESS;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->start_control)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d002      	beq.n	80016b0 <PWM_lCCU4_Init+0xa4>
      {
        PWM_Start(handle_ptr);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 f878 	bl	80017a0 <PWM_Start>
      }
      status = PWM_STATUS_SUCCESS;
 80016b0:	2300      	movs	r3, #0
 80016b2:	73fb      	strb	r3, [r7, #15]
 80016b4:	e003      	b.n	80016be <PWM_lCCU4_Init+0xb2>
    }
    else
    {
      handle_ptr->state = PWM_STATUS_UNINITIALIZED;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2202      	movs	r2, #2
 80016ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    }

  }
  return (status);
 80016be:	7bfb      	ldrb	r3, [r7, #15]
} /* end of PWM_lCCU4_Init() api */
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <PWM_lCCU4_ConfigInterrupts>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialize interrupts */
void PWM_lCCU4_ConfigInterrupts(PWM_t *const handle_ptr)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if ((bool) true == handle_ptr->period_match_enable)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00f      	beq.n	80016fa <PWM_lCCU4_ConfigInterrupts+0x32>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:period match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	4618      	mov	r0, r3
 80016e0:	2100      	movs	r1, #0
 80016e2:	f7ff ff7d 	bl	80015e0 <XMC_CCU4_SLICE_EnableEvent>

    /* Bind event to Service Request Node to period match event*/
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80016f0:	4610      	mov	r0, r2
 80016f2:	2100      	movs	r1, #0
 80016f4:	461a      	mov	r2, r3
 80016f6:	f7ff fbe9 	bl	8000ecc <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_period_match_node);
  }

  if ((bool) true == handle_ptr->compare_match_enable)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001700:	2b00      	cmp	r3, #0
 8001702:	d00f      	beq.n	8001724 <PWM_lCCU4_ConfigInterrupts+0x5c>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:compare match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	4618      	mov	r0, r3
 800170a:	2102      	movs	r1, #2
 800170c:	f7ff ff68 	bl	80015e0 <XMC_CCU4_SLICE_EnableEvent>

    /* Bind event to Service Request Node to compare match event */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800171a:	4610      	mov	r0, r2
 800171c:	2102      	movs	r1, #2
 800171e:	461a      	mov	r2, r3
 8001720:	f7ff fbd4 	bl	8000ecc <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_compare_match_node);
  }
}
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop

0800172c <PWM_lCCU4_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Starts the CCU4 slice. */
void PWM_lCCU4_Start(PWM_t *const handle_ptr)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  if ((PWM_STATUS_SUCCESS == handle_ptr->state) || (PWM_STATUS_STOPPED == handle_ptr->state))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800173a:	2b00      	cmp	r3, #0
 800173c:	d004      	beq.n	8001748 <PWM_lCCU4_Start+0x1c>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001744:	2b04      	cmp	r3, #4
 8001746:	d111      	bne.n	800176c <PWM_lCCU4_Start+0x40>
  {
    /* Clears the IDLE mode for the slice */
    XMC_CCU4_EnableClock(handle_ptr->ccu4_kernel_ptr,handle_ptr->slice_number);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	f7ff fef9 	bl	800154c <XMC_CCU4_EnableClock>
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff ff08 	bl	8001574 <XMC_CCU4_SLICE_StartTimer>

    handle_ptr->state = PWM_STATUS_RUNNING;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2203      	movs	r2, #3
 8001768:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    XMC_DEBUG("PWM_lCCU4_Start:start PWM")
  }
} /* end of PWM_lCCU4_Start() api */
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop

08001774 <PWM_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function initializes the app */
PWM_STATUS_t PWM_Init(PWM_t *const handle_ptr)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status;
  status = PWM_STATUS_FAILURE;
 800177c:	2301      	movs	r3, #1
 800177e:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_Init:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001786:	2b00      	cmp	r3, #0
 8001788:	d104      	bne.n	8001794 <PWM_Init+0x20>
  {
    status = PWM_lCCU4_Init(handle_ptr);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ff3e 	bl	800160c <PWM_lCCU4_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	73fb      	strb	r3, [r7, #15]
  {
    status = PWM_lCCU8_Init(handle_ptr);
  }
#endif

  return (status);
 8001794:	7bfb      	ldrb	r3, [r7, #15]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop

080017a0 <PWM_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function starts the PWM generation. This needs to be called even if external start is configured.*/
void PWM_Start(PWM_t *const handle_ptr)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PWM_Start:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d102      	bne.n	80017b8 <PWM_Start+0x18>
  {
    PWM_lCCU4_Start(handle_ptr);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff ffba 	bl	800172c <PWM_lCCU4_Start>
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
  {
    PWM_lCCU8_Start(handle_ptr);
  }
#endif
}
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop

080017c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <__NVIC_GetPriorityGrouping+0x18>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80017cc:	0a1b      	lsrs	r3, r3, #8
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	db0b      	blt.n	8001806 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80017ee:	4908      	ldr	r1, [pc, #32]	; (8001810 <__NVIC_EnableIRQ+0x34>)
 80017f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f4:	095b      	lsrs	r3, r3, #5
 80017f6:	79fa      	ldrb	r2, [r7, #7]
 80017f8:	f002 021f 	and.w	r2, r2, #31
 80017fc:	2001      	movs	r0, #1
 80017fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000e100 	.word	0xe000e100

08001814 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	2b00      	cmp	r3, #0
 8001824:	db0c      	blt.n	8001840 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001826:	4909      	ldr	r1, [pc, #36]	; (800184c <__NVIC_ClearPendingIRQ+0x38>)
 8001828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182c:	095b      	lsrs	r3, r3, #5
 800182e:	79fa      	ldrb	r2, [r7, #7]
 8001830:	f002 021f 	and.w	r2, r2, #31
 8001834:	2001      	movs	r0, #1
 8001836:	fa00 f202 	lsl.w	r2, r0, r2
 800183a:	3360      	adds	r3, #96	; 0x60
 800183c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000e100 	.word	0xe000e100

08001850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	6039      	str	r1, [r7, #0]
 800185a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	2b00      	cmp	r3, #0
 8001862:	db0a      	blt.n	800187a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001864:	490d      	ldr	r1, [pc, #52]	; (800189c <__NVIC_SetPriority+0x4c>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	0092      	lsls	r2, r2, #2
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	440b      	add	r3, r1
 8001874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001878:	e00a      	b.n	8001890 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187a:	4909      	ldr	r1, [pc, #36]	; (80018a0 <__NVIC_SetPriority+0x50>)
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	3b04      	subs	r3, #4
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	0092      	lsls	r2, r2, #2
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	440b      	add	r3, r1
 800188e:	761a      	strb	r2, [r3, #24]
  }
}
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000e100 	.word	0xe000e100
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b089      	sub	sp, #36	; 0x24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f1c3 0307 	rsb	r3, r3, #7
 80018be:	2b06      	cmp	r3, #6
 80018c0:	bf28      	it	cs
 80018c2:	2306      	movcs	r3, #6
 80018c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3306      	adds	r3, #6
 80018ca:	2b06      	cmp	r3, #6
 80018cc:	d902      	bls.n	80018d4 <NVIC_EncodePriority+0x30>
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	e000      	b.n	80018d6 <NVIC_EncodePriority+0x32>
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	2201      	movs	r2, #1
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	1e5a      	subs	r2, r3, #1
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	401a      	ands	r2, r3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	2101      	movs	r1, #1
 80018ee:	fa01 f303 	lsl.w	r3, r1, r3
 80018f2:	1e59      	subs	r1, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80018f8:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3724      	adds	r7, #36	; 0x24
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop

08001908 <PIN_INTERRUPT_Init>:
/*
 * API to initialize the PIN_INTERRUPT APP ERU Event Trigger Logic, Output Gating Unit Hardware initialization
 * and NVIC node configuration.
 */
PIN_INTERRUPT_STATUS_t PIN_INTERRUPT_Init(const PIN_INTERRUPT_t *const handle)
{
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PIN_INTERRUPT_Init: PIN_INTERRUPT APP handle function pointer uninitialized", (handle != NULL));

  /* Initializes input pin characteristics */
  XMC_GPIO_Init(handle->port, handle->pin, &handle->gpio_config);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6859      	ldr	r1, [r3, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3308      	adds	r3, #8
 800191e:	4608      	mov	r0, r1
 8001920:	4611      	mov	r1, r2
 8001922:	461a      	mov	r2, r3
 8001924:	f7fe fd4a 	bl	80003bc <XMC_GPIO_Init>
  /* ERU Event Trigger Logic Hardware initialization based on UI */
  XMC_ERU_ETL_Init(handle->eru, handle->etl, &handle->etl_config);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6819      	ldr	r1, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	7fda      	ldrb	r2, [r3, #31]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3314      	adds	r3, #20
 8001934:	4608      	mov	r0, r1
 8001936:	4611      	mov	r1, r2
 8001938:	461a      	mov	r2, r3
 800193a:	f7ff fc01 	bl	8001140 <XMC_ERU_ETL_Init>
  /* OGU is configured to generate event on configured trigger edge */
  XMC_ERU_OGU_SetServiceRequestMode(handle->eru, handle->ogu, XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	2201      	movs	r2, #1
 800194e:	f7ff fc1d 	bl	800118c <XMC_ERU_OGU_SetServiceRequestMode>
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	7f1c      	ldrb	r4, [r3, #28]
 8001956:	f7ff ff33 	bl	80017c0 <__NVIC_GetPriorityGrouping>
 800195a:	4601      	mov	r1, r0
                    handle->irq_priority, handle->irq_subpriority));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	7f5b      	ldrb	r3, [r3, #29]
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8001960:	461a      	mov	r2, r3
                    handle->irq_priority, handle->irq_subpriority));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	7f9b      	ldrb	r3, [r3, #30]
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8001966:	4608      	mov	r0, r1
 8001968:	4611      	mov	r1, r2
 800196a:	461a      	mov	r2, r3
 800196c:	f7ff ff9a 	bl	80018a4 <NVIC_EncodePriority>
 8001970:	4602      	mov	r2, r0
 8001972:	b263      	sxtb	r3, r4
 8001974:	4618      	mov	r0, r3
 8001976:	4611      	mov	r1, r2
 8001978:	f7ff ff6a 	bl	8001850 <__NVIC_SetPriority>
                    handle->irq_priority, handle->irq_subpriority));
#endif
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((IRQn_Type)handle->IRQn, (XMC_SCU_IRQCTRL_t)handle->irqctrl);
#endif
  if (true == handle->enable_at_init)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00b      	beq.n	800199e <PIN_INTERRUPT_Init+0x96>
  {
    /* Clear pending interrupt before enabling it */
    NVIC_ClearPendingIRQ((IRQn_Type)handle->IRQn);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	7f1b      	ldrb	r3, [r3, #28]
 800198a:	b25b      	sxtb	r3, r3
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff41 	bl	8001814 <__NVIC_ClearPendingIRQ>
    /* Enable NVIC node */
    NVIC_EnableIRQ((IRQn_Type)handle->IRQn);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	7f1b      	ldrb	r3, [r3, #28]
 8001996:	b25b      	sxtb	r3, r3
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff1f 	bl	80017dc <__NVIC_EnableIRQ>
  }
  return (PIN_INTERRUPT_STATUS_SUCCESS);
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd90      	pop	{r4, r7, pc}

080019a8 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	60da      	str	r2, [r3, #12]
}
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop

080019c8 <GLOBAL_CCU8_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	7b5b      	ldrb	r3, [r3, #13]
 80019d4:	f083 0301 	eor.w	r3, r3, #1
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00f      	beq.n	80019fe <GLOBAL_CCU8_Init+0x36>
  {
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	7b1b      	ldrb	r3, [r3, #12]
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	f7ff fb2b 	bl	8001044 <XMC_CCU8_Init>
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ffd8 	bl	80019a8 <XMC_CCU8_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	60da      	str	r2, [r3, #12]
}
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop

08001a28 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	7b5b      	ldrb	r3, [r3, #13]
 8001a34:	f083 0301 	eor.w	r3, r3, #1
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00f      	beq.n	8001a5e <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	7b1b      	ldrb	r3, [r3, #12]
 8001a46:	4610      	mov	r0, r2
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f7ff f9eb 	bl	8000e24 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ffd8 	bl	8001a08 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6819      	ldr	r1, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	7c1a      	ldrb	r2, [r3, #16]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	4608      	mov	r0, r1
 8001a7e:	4611      	mov	r1, r2
 8001a80:	461a      	mov	r2, r3
 8001a82:	f7fe fc9b 	bl	80003bc <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6819      	ldr	r1, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	7c1a      	ldrb	r2, [r3, #16]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	7c5b      	ldrb	r3, [r3, #17]
 8001a92:	4608      	mov	r0, r1
 8001a94:	4611      	mov	r1, r2
 8001a96:	461a      	mov	r2, r3
 8001a98:	f7ff fb96 	bl	80011c8 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop

08001aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <__NVIC_SetPriorityGrouping+0x44>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001ad0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad8:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8001ada:	4a04      	ldr	r2, [pc, #16]	; (8001aec <__NVIC_SetPriorityGrouping+0x44>)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	60d3      	str	r3, [r2, #12]
}
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8001af6:	2001      	movs	r0, #1
 8001af8:	f7ff ffd6 	bl	8001aa8 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001afc:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8001afe:	4b21      	ldr	r3, [pc, #132]	; (8001b84 <SystemCoreSetup+0x94>)
 8001b00:	4a21      	ldr	r2, [pc, #132]	; (8001b88 <SystemCoreSetup+0x98>)
 8001b02:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b04:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001b08:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8001b0a:	4a1e      	ldr	r2, [pc, #120]	; (8001b84 <SystemCoreSetup+0x94>)
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <SystemCoreSetup+0x94>)
 8001b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b12:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b16:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8001b1a:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <SystemCoreSetup+0x9c>)
 8001b1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b20:	3314      	adds	r3, #20
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f023 030f 	bic.w	r3, r3, #15
 8001b2c:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f043 0304 	orr.w	r3, r3, #4
 8001b34:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <SystemCoreSetup+0x9c>)
 8001b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b3c:	3314      	adds	r3, #20
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8001b42:	4a10      	ldr	r2, [pc, #64]	; (8001b84 <SystemCoreSetup+0x94>)
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <SystemCoreSetup+0x94>)
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	f023 0310 	bic.w	r3, r3, #16
 8001b4c:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8001b4e:	4a0d      	ldr	r2, [pc, #52]	; (8001b84 <SystemCoreSetup+0x94>)
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <SystemCoreSetup+0x94>)
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	f023 0308 	bic.w	r3, r3, #8
 8001b58:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <SystemCoreSetup+0x94>)
 8001b5c:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <SystemCoreSetup+0x94>)
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b64:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8001b66:	4a07      	ldr	r2, [pc, #28]	; (8001b84 <SystemCoreSetup+0x94>)
 8001b68:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <SystemCoreSetup+0x94>)
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001b70:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8001b72:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <SystemCoreSetup+0x94>)
 8001b74:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <SystemCoreSetup+0x94>)
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b7c:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	e000ed00 	.word	0xe000ed00
 8001b88:	08000000 	.word	0x08000000
 8001b8c:	58001000 	.word	0x58001000

08001b90 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	701a      	strb	r2, [r3, #0]

  return (status);
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8001bb4:	4b02      	ldr	r3, [pc, #8]	; (8001bc0 <OSCHP_GetFrequency+0x10>)
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	00b71b00 	.word	0x00b71b00

08001bc4 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8001bc4:	b5b0      	push	{r4, r5, r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <SystemCoreClockSetup+0x50>)
 8001bcc:	1d3c      	adds	r4, r7, #4
 8001bce:	461d      	mov	r5, r3
 8001bd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bd4:	682b      	ldr	r3, [r5, #0]
 8001bd6:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8001bd8:	1d3b      	adds	r3, r7, #4
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fcc2 	bl	8000564 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8001be0:	2000      	movs	r0, #0
 8001be2:	f7fe fdad 	bl	8000740 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8001be6:	2000      	movs	r0, #0
 8001be8:	f7fe fd62 	bl	80006b0 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8001bec:	2004      	movs	r0, #4
 8001bee:	f7fe fe33 	bl	8000858 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	2120      	movs	r1, #32
 8001bf6:	f7fe fe97 	bl	8000928 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f7fe fd6c 	bl	80006d8 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8001c00:	2001      	movs	r0, #1
 8001c02:	f7fe fe51 	bl	80008a8 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8001c06:	2001      	movs	r0, #1
 8001c08:	f7fe fe3a 	bl	8000880 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bdb0      	pop	{r4, r5, r7, pc}
 8001c12:	bf00      	nop
 8001c14:	08001e90 	.word	0x08001e90

08001c18 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8001c22:	4815      	ldr	r0, [pc, #84]	; (8001c78 <DAVE_Init+0x60>)
 8001c24:	f7ff ffb4 	bl	8001b90 <CLOCK_XMC4_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d104      	bne.n	8001c3c <DAVE_Init+0x24>
  {
	 /**  Initialization of PWM APP instance PWM_TRIGGER_MEASURE */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_TRIGGER_MEASURE); 
 8001c32:	4812      	ldr	r0, [pc, #72]	; (8001c7c <DAVE_Init+0x64>)
 8001c34:	f7ff fd9e 	bl	8001774 <PWM_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d104      	bne.n	8001c4c <DAVE_Init+0x34>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance PIN_INTERRUPT_ECHO_MEASURE */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&PIN_INTERRUPT_ECHO_MEASURE); 
 8001c42:	480f      	ldr	r0, [pc, #60]	; (8001c80 <DAVE_Init+0x68>)
 8001c44:	f7ff fe60 	bl	8001908 <PIN_INTERRUPT_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d104      	bne.n	8001c5c <DAVE_Init+0x44>
  {
	 /**  Initialization of TIMER APP instance TIMER_DISTANCE */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_DISTANCE); 
 8001c52:	480c      	ldr	r0, [pc, #48]	; (8001c84 <DAVE_Init+0x6c>)
 8001c54:	f7ff fb48 	bl	80012e8 <TIMER_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d104      	bne.n	8001c6c <DAVE_Init+0x54>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_LED_OUTPUT */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_LED_OUTPUT); 
 8001c62:	4809      	ldr	r0, [pc, #36]	; (8001c88 <DAVE_Init+0x70>)
 8001c64:	f7ff ff00 	bl	8001a68 <DIGITAL_IO_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	1ffe888c 	.word	0x1ffe888c
 8001c7c:	1ffe8838 	.word	0x1ffe8838
 8001c80:	08001e58 	.word	0x08001e58
 8001c84:	1ffe8810 	.word	0x1ffe8810
 8001c88:	08001e7c 	.word	0x08001e7c

08001c8c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8001c98:	78fb      	ldrb	r3, [r7, #3]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	409a      	lsls	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	605a      	str	r2, [r3, #4]
}
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8001cb8:	78fb      	ldrb	r3, [r7, #3]
 8001cba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	605a      	str	r2, [r3, #4]
}
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop

08001cd0 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ce0:	78fb      	ldrb	r3, [r7, #3]
 8001ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce6:	f003 0301 	and.w	r3, r3, #1
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop

08001cf8 <PIN_INTERRUPT_GetPinValue>:
*   return (1);
* }
*  @endcode
*/
__STATIC_INLINE uint32_t PIN_INTERRUPT_GetPinValue(const PIN_INTERRUPT_t *const handle)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PIN_INTERRUPT_GetPinValue: Handler null pointer", handle != NULL);
  return (XMC_GPIO_GetInput(handle->port, handle->pin));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f7ff ffdf 	bl	8001cd0 <XMC_GPIO_GetInput>
 8001d12:	4603      	mov	r3, r0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	7c1b      	ldrb	r3, [r3, #16]
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f7ff ffac 	bl	8001c8c <XMC_GPIO_SetOutputHigh>
}
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop

08001d3c <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	7c1b      	ldrb	r3, [r3, #16]
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f7ff ffac 	bl	8001cac <XMC_GPIO_SetOutputLow>
}
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop

08001d5c <ERU1_0_IRQHandler>:

int distance = 0;

int cooldown = 0;

void EchoReceivedFromSensor(){
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
	if(PIN_INTERRUPT_GetPinValue(&PIN_INTERRUPT_ECHO_MEASURE)){
 8001d60:	480b      	ldr	r0, [pc, #44]	; (8001d90 <ERU1_0_IRQHandler+0x34>)
 8001d62:	f7ff ffc9 	bl	8001cf8 <PIN_INTERRUPT_GetPinValue>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d006      	beq.n	8001d7a <ERU1_0_IRQHandler+0x1e>
		TIMER_Clear(&TIMER_DISTANCE);
 8001d6c:	4809      	ldr	r0, [pc, #36]	; (8001d94 <ERU1_0_IRQHandler+0x38>)
 8001d6e:	f7ff fb77 	bl	8001460 <TIMER_Clear>
		TIMER_Start(&TIMER_DISTANCE);
 8001d72:	4808      	ldr	r0, [pc, #32]	; (8001d94 <ERU1_0_IRQHandler+0x38>)
 8001d74:	f7ff fad6 	bl	8001324 <TIMER_Start>
 8001d78:	e009      	b.n	8001d8e <ERU1_0_IRQHandler+0x32>
	}else{
		distance = TIMER_GetTime(&TIMER_DISTANCE);
 8001d7a:	4806      	ldr	r0, [pc, #24]	; (8001d94 <ERU1_0_IRQHandler+0x38>)
 8001d7c:	f7ff fb2c 	bl	80013d8 <TIMER_GetTime>
 8001d80:	4603      	mov	r3, r0
 8001d82:	461a      	mov	r2, r3
 8001d84:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <ERU1_0_IRQHandler+0x3c>)
 8001d86:	601a      	str	r2, [r3, #0]
		TIMER_Stop(&TIMER_DISTANCE);
 8001d88:	4802      	ldr	r0, [pc, #8]	; (8001d94 <ERU1_0_IRQHandler+0x38>)
 8001d8a:	f7ff fae9 	bl	8001360 <TIMER_Stop>
	}
}
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	08001e58 	.word	0x08001e58
 8001d94:	1ffe8810 	.word	0x1ffe8810
 8001d98:	1ffe8890 	.word	0x1ffe8890

08001d9c <main>:


int main(void){
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
	DAVE_STATUS_t status;

	status = DAVE_Init();
 8001da2:	f7ff ff39 	bl	8001c18 <DAVE_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	71fb      	strb	r3, [r7, #7]

	if(status != DAVE_STATUS_SUCCESS){
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d000      	beq.n	8001db2 <main+0x16>
		XMC_DEBUG("DAVE APPs initialization failed\n");

		while(1U){

		}
 8001db0:	e7fe      	b.n	8001db0 <main+0x14>
	}

	while(1U){
		if(distance < 100000){
 8001db2:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <main+0x48>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a0c      	ldr	r2, [pc, #48]	; (8001de8 <main+0x4c>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	dc02      	bgt.n	8001dc2 <main+0x26>
			cooldown = 3000000;
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <main+0x50>)
 8001dbe:	4a0c      	ldr	r2, [pc, #48]	; (8001df0 <main+0x54>)
 8001dc0:	601a      	str	r2, [r3, #0]
		}
		if(cooldown > 0){
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <main+0x50>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	dd03      	ble.n	8001dd2 <main+0x36>
			DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_LED_OUTPUT);
 8001dca:	480a      	ldr	r0, [pc, #40]	; (8001df4 <main+0x58>)
 8001dcc:	f7ff ffa6 	bl	8001d1c <DIGITAL_IO_SetOutputHigh>
 8001dd0:	e002      	b.n	8001dd8 <main+0x3c>
		}else{
			DIGITAL_IO_SetOutputLow(&DIGITAL_IO_LED_OUTPUT);
 8001dd2:	4808      	ldr	r0, [pc, #32]	; (8001df4 <main+0x58>)
 8001dd4:	f7ff ffb2 	bl	8001d3c <DIGITAL_IO_SetOutputLow>
		}
		--cooldown;
 8001dd8:	4b04      	ldr	r3, [pc, #16]	; (8001dec <main+0x50>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	4a03      	ldr	r2, [pc, #12]	; (8001dec <main+0x50>)
 8001de0:	6013      	str	r3, [r2, #0]
	}
 8001de2:	e7e6      	b.n	8001db2 <main+0x16>
 8001de4:	1ffe8890 	.word	0x1ffe8890
 8001de8:	0001869f 	.word	0x0001869f
 8001dec:	1ffe8894 	.word	0x1ffe8894
 8001df0:	002dc6c0 	.word	0x002dc6c0
 8001df4:	08001e7c 	.word	0x08001e7c

08001df8 <__libc_init_array>:
 8001df8:	b570      	push	{r4, r5, r6, lr}
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <__libc_init_array+0x3c>)
 8001dfc:	4c0e      	ldr	r4, [pc, #56]	; (8001e38 <__libc_init_array+0x40>)
 8001dfe:	1ae4      	subs	r4, r4, r3
 8001e00:	10a4      	asrs	r4, r4, #2
 8001e02:	2500      	movs	r5, #0
 8001e04:	461e      	mov	r6, r3
 8001e06:	42a5      	cmp	r5, r4
 8001e08:	d004      	beq.n	8001e14 <__libc_init_array+0x1c>
 8001e0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e0e:	4798      	blx	r3
 8001e10:	3501      	adds	r5, #1
 8001e12:	e7f8      	b.n	8001e06 <__libc_init_array+0xe>
 8001e14:	f7ff f9fa 	bl	800120c <_init>
 8001e18:	4c08      	ldr	r4, [pc, #32]	; (8001e3c <__libc_init_array+0x44>)
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <__libc_init_array+0x48>)
 8001e1c:	1ae4      	subs	r4, r4, r3
 8001e1e:	10a4      	asrs	r4, r4, #2
 8001e20:	2500      	movs	r5, #0
 8001e22:	461e      	mov	r6, r3
 8001e24:	42a5      	cmp	r5, r4
 8001e26:	d004      	beq.n	8001e32 <__libc_init_array+0x3a>
 8001e28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e2c:	4798      	blx	r3
 8001e2e:	3501      	adds	r5, #1
 8001e30:	e7f8      	b.n	8001e24 <__libc_init_array+0x2c>
 8001e32:	bd70      	pop	{r4, r5, r6, pc}
 8001e34:	1ffe888c 	.word	0x1ffe888c
 8001e38:	1ffe888c 	.word	0x1ffe888c
 8001e3c:	1ffe888c 	.word	0x1ffe888c
 8001e40:	1ffe888c 	.word	0x1ffe888c

08001e44 <PWM_TRIGGER_MEASURE_compare_config>:
 8001e44:	00000000 00000008                       ........

08001e4c <PWM_TRIGGER_MEASURE_gpio_out_config>:
 8001e4c:	00000098 00010000 00000004              ............

08001e58 <PIN_INTERRUPT_ECHO_MEASURE>:
 8001e58:	40044000 48028000 00000000 00000000     .@.@...H........
	...
 8001e70:	0000010d 03003f05 00010300              .....?......

08001e7c <DIGITAL_IO_LED_OUTPUT>:
 8001e7c:	48028000 00000080 00010000 00000000     ...H............
 8001e8c:	00000000 01010230 00010000 00000000     ....0...........
 8001e9c:	00010000 01010102                       ........
