   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "timer.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_CCU8_EnableClock,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_CCU8_EnableClock:
  25              	.LFB144:
  26              	 .file 1 "F:/Fuckultate/ProectSI/Libraries/XMCLib/inc/xmc_ccu8.h"
   1:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
   2:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @file xmc_ccu8.h
   3:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @date 2017-09-15
   4:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
   5:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @cond
   6:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  **************************************************************************************************
   7:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
   9:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * All rights reserved.                        
  11:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                                             
  12:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * following conditions are met:   
  14:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                                                                              
  15:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * disclaimer.                        
  17:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 
  18:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 
  21:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * products derived from this software without specific prior written permission.                  
  23:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                                                                              
  24:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                                                                              
  32:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  **************************************************************************************************
  35:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  36:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Change History
  37:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * --------------
  38:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  39:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2015-02-20:
  40:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Initial <br>
  41:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Documentation updates <br>
  42:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  43:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2015-06-20:
  44:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  45:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Added XMC_CCU8_SLICE_LoadSelector() API, to select which compare register value has to be 
  46:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       during external load event.
  47:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  48:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2015-07-01:
  49:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - In XMC_CCU8_SLICE_CHECK_INTERRUPT macro, fixed the missing item for compare match down for
  50:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  51:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2015-07-24:
  52:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent() is updated to support XMC14 device. <br>
  53:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  54:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2015-08-17:
  55:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_PRESCALER_t enum is added to set the prescaler divider. <br>
  56:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_t is added for all the devices except XMC45 devices, t
  57:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       shadow transfer has to happen. <br>
  58:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SOURCE_OUT0_t, XMC_CCU8_SOURCE_OUT1_t, XMC_CCU8_SOURCE_OUT2_t, XMC_CCU8_SOURCE_OU
  59:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       to maps one of the ST to OUT0, OUT1, OUT3, OUT4 signals.
  60:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - In XMC_CCU8_SLICE_COMPARE_CONFIG_t structure, selector_out0, selector_out1, selector_out2,
  61:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       added to support XMC14 devices.
  62:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_EnableShadowTransfer() API is made as inline, to improve the speed. <br>
  63:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_EnableCascadedShadowTransfer(), XMC_CCU8_SLICE_DisableCascadedShadowTransfe
  64:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       XMC_CCU8_SLICE_SetShadowTransferMode() API are supported for all the devices except XMC45.
  65:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  66:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2015-09-29:
  67:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - In XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_t, two more enum items are added to support exte
  68:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       settings.
  69:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  70:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2015-10-07:
  71:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_SetTimerCompareMatchChannel1(), XMC_CCU8_SLICE_SetTimerCompareMatchChannel2
  72:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       added to update the respective compare registers directly.
  73:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_GetEvent() is made as inline.
  74:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_MULTI_IRQ_ID_t is added to support the XMC_CCU8_SLICE_EnableMultipleEvents(
  75:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       XMC_CCU8_SLICE_DisableMultipleEvents() APIs.
  76:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - DOC updates for the newly added APIs.
  77:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  78:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2016-03-09:
  79:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Optimization of write only registers
  80:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  81:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2016-05-20:
  82:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Added XMC_CCU8_SLICE_StopClearTimer()
  83:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Changed XMC_CCU8_SLICE_StopTimer() and XMC_CCU8_SLICE_ClearTimer() 
  84:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  85:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2017-04-27:
  86:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_SetPrescaler() changed div_val parameter to type XMC_CCU8_SLICE_PRESCALER_t
  87:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  88:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2017-09-15:
  89:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Fix XMC_CCU8_SLICE_SetShadowTransferMode()
  90:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Added parity checking functionality
  91:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  92:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @endcond
  93:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
  94:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
  95:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #ifndef XMC_CCU8_H
  96:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #define XMC_CCU8_H
  97:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
  98:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**************************************************************************************************
  99:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * HEADER FILES
 100:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  **************************************************************************************************
 101:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #include "xmc_common.h"
 102:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 103:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU80)
 104:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 105:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #if UC_FAMILY == XMC1
 106:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  #include "xmc1_ccu8_map.h"
 107:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
 108:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 109:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #if UC_FAMILY == XMC4
 110:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  #include "xmc4_ccu8_map.h"
 111:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
 112:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 113:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 114:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @addtogroup XMClib XMC Peripheral Library
 115:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @{
 116:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 117:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 118:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 119:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @addtogroup CCU8
 120:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 121:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @brief Capture Compare Unit 8 (CCU8) low level driver for XMC family of microcontrollers<br>
 122:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 123:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The CCU8 peripheral functions play a major role in applications that need complex Pulse Width Mo
 124:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * generation, with complementary high side and low side switches, multi phase control. These funct
 125:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * with a very flexible and programmable signal conditioning scheme, make the CCU8 the must have pe
 126:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * of the art motor control, multi phase and multi level power electronics systems.\n
 127:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Each CCU8 module is comprised of four identical 16 bit Capture/Compare Timer slices, CC8y (where
 128:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * timer slice can work in compare mode or in capture mode.
 129:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 130:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * APIs provided in this file cover the following functional blocks of CCU8:
 131:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -- Timer configuration, Capture configuration, Function/Event configuration, Interrupt configura
 132:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par Note:
 133:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 1. SLICE (APIs prefixed with e.g. XMC_CCU8_SLICE_)
 134:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2. Module (APIs are not having any prefix e.g. XMC_CCU8_)
 135:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 136:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par Timer(Compare mode) configuration:
 137:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This section of the LLD provides the configuration structure XMC_CCU8_SLICE_COMPARE_CONFIG_t, 
 138:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t and the initialization functions XMC_CCU8_SLICE_CompareInit(),
 139:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 140:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * It can be used to:
 141:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Start and Stop the timer. (XMC_CCU8_SLICE_StartTimer(), XMC_CCU8_SLICE_StopTimer())
 142:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Update the period, compare, Dither, Prescaler  and Passive values. (XMC_CCU8_SLICE_SetTimerPe
 143:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    XMC_CCU8_SLICE_SetTimerCompareMatch(), XMC_CCU8_SLICE_SetPrescaler(), XMC_CCU8_SLICE_SetDithe
 144:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    XMC_CCU8_SLICE_SetPassiveLevel())
 145:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Configure the dead time.(XMC_CCU8_SLICE_SetDeadTimeValue(), XMC_CCU8_SLICE_SetDeadTimePrescal
 146:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Enable the slices to support multichannel mode. (XMC_CCU8_SLICE_EnableMultiChannelMode())
 147:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 
 148:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par Capture configuration:
 149:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This section of the LLD provides the configuration structure XMC_CCU8_SLICE_CAPTURE_CONFIG_t and
 150:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * function XMC_CCU8_SLICE_CaptureInit().
 151:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 152:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * It can be used to:
 153:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Configure the capture functionality. (XMC_CCU8_SLICE_Capture0Config(), XMC_CCU8_SLICE_Capture
 154:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Read the captured values along with the status, which indicate the value is latest or not.
 155:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    (XMC_CCU8_SLICE_GetCaptureRegisterValue())
 156:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 
 157:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par Function/Event configuration:
 158:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This section of the LLD provides the configuration structure XMC_CCU8_SLICE_EVENT_CONFIG_t.
 159:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 
 160:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * It can be used to:
 161:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Enable and Disable the events. (XMC_CCU8_SLICE_EnableEvent(), XMC_CCU8_SLICE_DisableEvent())
 162:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Configure to start and stop the timer on external events.(XMC_CCU8_SLICE_StartConfig(), XMC_C
 163:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Modulation, external load and Gating of the timer output.(XMC_CCU8_SLICE_ModulationConfig(), 
 164:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    XMC_CCU8_SLICE_LoadConfig(), XMC_CCU8_SLICE_GateConfig())
 165:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Control the count direction of the timer based on the external event. (XMC_CCU8_SLICE_Directi
 166:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Count the external events.(XMC_CCU8_SLICE_CountConfig())
 167:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# External Trap. Which can be used as protective feature.(XMC_CCU8_SLICE_EnableTrap(), XMC_CCU8
 168:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    XMC_CCU8_SLICE_TrapConfig())
 169:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 170:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par Interrupt configuration:
 171:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This section of the LLD provides the function to configure the interrupt node to each event (XMC
 172:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 173:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @{
 174:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 175:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 176:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**************************************************************************************************
 177:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * MACROS
 178:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  **************************************************************************************************
 179:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #define XMC_CCU8_SLICE_CHECK_INTERRUPT(interrupt) \
 180:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****     ((interrupt == XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH)           || \
 181:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH)              || \
 182:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1)  || \
 183:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1)|| \
 184:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2)  || \
 185:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2)|| \
 186:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_EVENT0)                 || \
 187:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_EVENT1)                 || \
 188:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_EVENT2)                 || \
 189:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_TRAP))
 190:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****      
 191:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /* Macro to check if the slice ptr passed is valid */
 192:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #define XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(cmp_channel) \
 193:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****     ((cmp_channel == XMC_CCU8_SLICE_COMPARE_CHANNEL_1) || \
 194:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****      (cmp_channel == XMC_CCU8_SLICE_COMPARE_CHANNEL_2))
 195:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 196:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**************************************************************************************************
 197:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * ENUMS
 198:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  **************************************************************************************************
 199:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 200:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 201:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Typedef for CCU8 Global data structure
 202:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 203:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef CCU8_GLOBAL_TypeDef XMC_CCU8_MODULE_t;
 204:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 205:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 206:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Typedef for CCU8 Slice data structure
 207:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 208:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef CCU8_CC8_TypeDef XMC_CCU8_SLICE_t;
 209:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 210:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 211:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Return Value of an API
 212:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 213:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_STATUS
 214:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 215:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_STATUS_OK      = 0U, /**< API fulfils request */
 216:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_STATUS_ERROR       , /**< API cannot fulfil request */
 217:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_STATUS_RUNNING     , /**< The timer slice is currently running */
 218:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_STATUS_IDLE          /**< The timer slice is currently idle */
 219:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_STATUS_t;
 220:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 221:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 222:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * CCU8 module clock
 223:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 224:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_CLOCK
 225:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 226:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_CLOCK_SCU        = 0U, /**< Select the fCCU as the clock */
 227:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_CLOCK_EXTERNAL_A     , /**< External clock-A */
 228:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_CLOCK_EXTERNAL_B     , /**< External clock-B */
 229:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_CLOCK_EXTERNAL_C       /**< External clock-C */
 230:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_CLOCK_t;
 231:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 232:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 233:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * CCU8 set the shadow transfer type for multichannel mode
 234:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 235:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER
 236:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 237:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE0       = (uint32_t)0x4000000, /**< Shadow transfe
 238:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                      only for slice
 239:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE0  = (uint32_t)0x4000400, /**< Shadow transfe
 240:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                      and hardware f
 241:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE1       = (uint32_t)0x8000000, /**< Shadow transfe
 242:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                      only for slice
 243:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE1  = (uint32_t)0x8000800, /**< Shadow transfe
 244:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                      and hardware f
 245:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE2       = (uint32_t)0x10000000, /**< Shadow transf
 246:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                       only for slic
 247:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE2  = (uint32_t)0x10001000, /**< Shadow transf
 248:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                       and hardware 
 249:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE3       = (uint32_t)0x20000000, /**< Shadow transf
 250:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                       only for slic
 251:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE3  = (uint32_t)0x20002000  /**< Shadow transf
 252:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                       and hardware 
 253:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_t;
 254:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 255:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 256:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Operational modes of CCU8 slice
 257:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 258:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MODE
 259:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 260:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODE_COMPARE  = 0U, /**< slice(CC8y) operates in Compare Mode */
 261:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODE_CAPTURE        /**< slice(CC8y) operates in Capture Mode */
 262:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MODE_t;
 263:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 264:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 265:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Slice Output selection
 266:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 267:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_OUTPUT
 268:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 269:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_0  = 1U, /**< Slice Output-0 */
 270:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_1  = 2U, /**< Slice Output-1 */
 271:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_2  = 4U, /**< Slice Output-2 */
 272:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_3  = 8U  /**< Slice Output-3 */
 273:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_OUTPUT_t;
 274:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 275:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 276:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Timer counting modes for the slice
 277:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 278:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TIMER_COUNT_MODE
 279:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 280:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_COUNT_MODE_EA  = 0U, /**< Edge Aligned Mode */
 281:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_COUNT_MODE_CA        /**< Centre Aligned Mode */
 282:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_TIMER_COUNT_MODE_t;
 283:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 284:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 285:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Timer repetition mode for the slice
 286:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 287:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TIMER_REPEAT_MODE
 288:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 289:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_REPEAT_MODE_REPEAT = 0U, /**< Repetitive mode: continuous mode of operation 
 290:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_REPEAT_MODE_SINGLE       /**< Single shot mode: Once a Period match/One matc
 291:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                      occurs timer goes to idle state */
 292:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t;
 293:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 294:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 295:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Timer counting direction for the CCU8 slice
 296:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 297:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TIMER_COUNT_DIR
 298:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 299:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_COUNT_DIR_UP   = 0U, /**< Counting up */
 300:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_COUNT_DIR_DOWN       /**< Counting down */
 301:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_TIMER_COUNT_DIR_t;
 302:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 303:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 304:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Capture mode register sets
 305:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 306:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_CAP_REG_SET
 307:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 308:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_CAP_REG_SET_LOW  = 0U, /**< Capture register-0, Capture register-1 used */
 309:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_CAP_REG_SET_HIGH       /**< Capture register-0, Capture register-1 used */
 310:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_CAP_REG_SET_t;
 311:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 312:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 313:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Prescaler mode
 314:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 315:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_PRESCALER_MODE
 316:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 317:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_MODE_NORMAL = 0U, /**< Fixed division of module clock */
 318:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_MODE_FLOAT        /**< Floating divider */
 319:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_PRESCALER_MODE_t;
 320:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 321:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 322:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Timer output passive level
 323:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 324:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL
 325:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 326:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_LOW  = 0U, /**< Passive level = Low */
 327:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_HIGH       /**< Passive level = High */
 328:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t;
 329:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 330:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 331:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Compare Channel selection
 332:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 333:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_COMPARE_CHANNEL
 334:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 335:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_COMPARE_CHANNEL_1  = 0U, /**< Compare Channel-1 */
 336:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_COMPARE_CHANNEL_2        /**< Compare Channel-2 */
 337:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_COMPARE_CHANNEL_t;
 338:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 339:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 340:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Timer clock Divider
 341:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 342:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_PRESCALER
 343:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 344:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_1  = 0U, /**< Slice Clock = fccu8 */
 345:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_2      , /**< Slice Clock = fccu8/2 */
 346:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_4      , /**< Slice Clock = fccu8/4 */
 347:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_8      , /**< Slice Clock = fccu8/8 */
 348:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_16     , /**< Slice Clock = fccu8/16 */
 349:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_32     , /**< Slice Clock = fccu8/32 */
 350:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_64     , /**< Slice Clock = fccu8/64 */
 351:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_128    , /**< Slice Clock = fccu8/128 */
 352:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_256    , /**< Slice Clock = fccu8/256 */
 353:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_512    , /**< Slice Clock = fccu8/512 */
 354:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_1024   , /**< Slice Clock = fccu8/1024 */
 355:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_2048   , /**< Slice Clock = fccu8/2048 */
 356:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_4096   , /**< Slice Clock = fccu8/4096 */
 357:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_8192   , /**< Slice Clock = fccu8/8192 */
 358:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_16384  , /**< Slice Clock = fccu8/16384 */
 359:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_32768    /**< Slice Clock = fccu8/32768 */
 360:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_PRESCALER_t;
 361:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 362:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 363:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Dead Time Generator Clock Divider
 364:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 365:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_DTC_DIV
 366:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 367:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_DTC_DIV_1  = 0U, /**< DTC clock = Slice Clock */
 368:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_DTC_DIV_2      , /**< DTC clock = Slice Clock/2 */
 369:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_DTC_DIV_4      , /**< DTC clock = Slice Clock/4 */
 370:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_DTC_DIV_8        /**< DTC clock = Slice Clock/8 */
 371:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_DTC_DIV_t;
 372:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 373:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 374:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 375:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  The compare channel output which is routed to the slice output signal(STy).
 376:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 377:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_STATUS
 378:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 379:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_STATUS_CHANNEL_1        = 0U, /**< Channel-1 status connected to Slice Status */
 380:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_STATUS_CHANNEL_2            , /**< Channel-2 status connected to Slice Status */
 381:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_STATUS_CHANNEL_1_AND_2      , /**< \b Wired \b AND of Channel-1 and Channel-2 stat
 382:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                     Slice status */
 383:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #if ((UC_SERIES == XMC13) || (UC_SERIES == XMC14)) || defined(DOXYGEN)
 384:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_STATUS_CHANNEL_1_OR_2         /**< \b Wired \b OR of Channel-1 and Channel-2 statu
 385:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                     status. @note Only available for XMC1300 and XM
 386:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
 387:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_STATUS_t;
 388:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 389:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 390:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Compare channel for which modulation has to be applied
 391:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 392:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MODULATION_CHANNEL
 393:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 394:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_CHANNEL_NONE  = 0U, /**< No modulation */
 395:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_CHANNEL_1         , /**< Modulation for Compare Channel-1 */
 396:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_CHANNEL_2         , /**< Modulation for Compare Channel-2 */
 397:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2     /**< Modulation for Compare Channel-1 and Compare C
 398:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MODULATION_CHANNEL_t;
 399:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 400:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 401:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  External Function list
 402:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 403:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_FUNCTION
 404:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 405:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_START           = 0U, /**< Start function */
 406:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_STOP                , /**< Stop function */
 407:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_CAPTURE_EVENT0      , /**< Capture Event-0 function, CCycapt0 signal is u
 408:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                      generation */
 409:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_CAPTURE_EVENT1      , /**< Capture Event-1 function, CCycapt1 signal is u
 410:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                      generation */
 411:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_GATING              , /**< Gating function */
 412:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_DIRECTION           , /**< Direction function */
 413:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_LOAD                , /**< Load function */
 414:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_COUNT               , /**< Counting function */
 415:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_OVERRIDE            , /**< Override function */
 416:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_MODULATION          , /**< Modulation function */
 417:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_TRAP                  /**< Trap function */
 418:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_FUNCTION_t;
 419:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 420:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 421:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  External Event list
 422:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 423:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_EVENT
 424:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 425:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_NONE  = 0U, /**< None */
 426:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_0         , /**< Event-0 */
 427:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_1         , /**< Event-1 */
 428:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_2           /**< Event-2 */
 429:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_t;
 430:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 431:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 432:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  External Event trigger criteria  - Edge sensitivity
 433:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 434:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY
 435:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 436:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_NONE          = 0U, /**< None */
 437:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE       , /**< Rising Edge of the input signal ge
 438:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                  event trigger */
 439:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_FALLING_EDGE      , /**< Falling Edge of the input signal g
 440:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                  trigger */
 441:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_DUAL_EDGE           /**< Both Rising and Falling edges caus
 442:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_t;
 443:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 444:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 445:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  External Event trigger criteria  - Level sensitivity
 446:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 447:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY
 448:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 449:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH = 0U, /**< Level sensitive functions react to 
 450:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW  = 1U, /**< Level sensitive functions react to 
 451:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****     /* Below enum items can be utilised specific to the functionality */
 452:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_LOW = 0U, /**< Timer counts up, during Low sta
 453:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_HIGH = 1U /**< Timer counts up, during High st
 454:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_t;
 455:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 456:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 457:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Low pass filter Configuration. The External Event input should be stable for a selected number 
 458:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 459:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_EVENT_FILTER
 460:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 461:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_DISABLED  = 0U, /**< No Low Pass Filtering is applied */
 462:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_3_CYCLES      , /**< Input should be stable for 3 clock cycles */
 463:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_5_CYCLES      , /**< Input should be stable for 5 clock cycles */
 464:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_7_CYCLES        /**< Input should be stable for 7 clock cycles */
 465:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_FILTER_t;
 466:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 467:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 468:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  External Event Input list. This list depicts the possible input connections to the CCU8 slice.
 469:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Interconnects are specific to each device.
 470:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 471:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef uint8_t XMC_CCU8_SLICE_INPUT_t;
 472:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 473:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 474:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 475:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Actions that can be performed upon detection of an external Timer STOP event
 476:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 477:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_END_MODE
 478:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 479:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_END_MODE_TIMER_STOP       = 0U, /**< Stops the timer, without clearing TIMER regis
 480:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_END_MODE_TIMER_CLEAR          , /**< Without stopping timer, clears the TIMER regi
 481:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_END_MODE_TIMER_STOP_CLEAR       /**< Stops the timer and clears the TIMER register
 482:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_END_MODE_t;
 483:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 484:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 485:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Actions that can be performed upon detection of an external Timer START event
 486:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 487:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_START_MODE
 488:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 489:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_START_MODE_TIMER_START       = 0U, /**< Start the timer from the current count of 
 490:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR       /**< Clears the TIMER register and start the ti
 491:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_START_MODE_t;
 492:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 493:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 494:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Modulation of timer output signals
 495:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 496:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MODULATION_MODE
 497:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 498:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_ST_OUT  = 0U, /**< Clear ST and OUT signals */
 499:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT           /**< Clear only the OUT signal */
 500:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MODULATION_MODE_t;
 501:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 502:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 503:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Trap exit mode
 504:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 505:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TRAP_EXIT_MODE
 506:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 507:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TRAP_EXIT_MODE_AUTOMATIC = 0U, /**< Clear trap state as soon as the trap signal is
 508:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW              /**< Clear only when acknowledged by software */
 509:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_TRAP_EXIT_MODE_t;
 510:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 511:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 512:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Timer clear on capture
 513:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 514:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TIMER_CLEAR_MODE
 515:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 516:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_CLEAR_MODE_NEVER    = 0U, /**< Never clear the timer on any capture event */
 517:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_CLEAR_MODE_CAP_HIGH     , /**< Clear only when timer value has been captured
 518:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_CLEAR_MODE_CAP_LOW      , /**< Clear only when timer value has been captured
 519:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_CLEAR_MODE_ALWAYS         /**< Always clear the timer upon detection of any 
 520:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_TIMER_CLEAR_MODE_t;
 521:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 522:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 523:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Multi Channel Shadow transfer request configuration options
 524:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 525:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MCMS_ACTION
 526:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 527:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR          = 0U, /**< Transfer Compare and Period Shadow 
 528:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                 the actual registers upon MCS xfer 
 529:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP     = 1U, /**< Transfer Compare, Period and Presca
 530:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                 register values to the actual regis
 531:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                 request */
 532:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP_DIT = 3U  /**< Transfer Compare, Period ,Prescaler
 533:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                 Compare register values to the actu
 534:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                 MCS xfer request */
 535:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MCMS_ACTION_t;
 536:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 537:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 538:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Available Interrupt Event Ids
 539:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 540:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_IRQ_ID
 541:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 542:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH            = 0U , /**< Period match counting up */
 543:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH               = 1U , /**< One match counting down */
 544:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1   = 2U , /**< Compare match counting up for channel 1
 545:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1 = 3U , /**< Compare match counting down for channel
 546:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2   = 4U , /**< Compare match counting up for channel 2
 547:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2 = 5U , /**< Compare match counting down for channel
 548:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_EVENT0                  = 8U , /**< Event-0 occurrence */
 549:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_EVENT1                  = 9U , /**< Event-1 occurrence */
 550:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_EVENT2                  = 10U, /**< Event-2 occurrence */
 551:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_TRAP                    = 11U  /**< Trap occurrence */
 552:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_IRQ_ID_t;
 553:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 554:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 555:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Available Interrupt Event Ids, which is added to support multi event APIs
 556:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 557:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MULTI_IRQ_ID
 558:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 559:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_PERIOD_MATCH            = 0x1U,   /**< Period match counting up */
 560:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_ONE_MATCH               = 0x2U,   /**< One match counting down */
 561:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_UP_CH_1   = 0x4U,   /**< Compare match counting up for 
 562:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_DOWN_CH_1 = 0x8U,   /**< Compare match counting down fo
 563:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_UP_CH_2   = 0x10U,  /**< Compare match counting up for 
 564:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_DOWN_CH_2 = 0x20U,  /**< Compare match counting down fo
 565:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_EVENT0                  = 0x100U, /**< Event-0 occurrence */
 566:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_EVENT1                  = 0x200U, /**< Event-1 occurrence */
 567:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_EVENT2                  = 0x400U, /**< Event-2 occurrence */
 568:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MULTI_IRQ_ID_t;
 569:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 570:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 571:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Service Request Lines for CCU8. Event are mapped to these SR lines and these are used to generat
 572:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 573:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_SR_ID
 574:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 575:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SR_ID_0    = 0U, /**< Service Request Line-0 selected  */
 576:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SR_ID_1        , /**< Service Request Line-1 selected  */
 577:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SR_ID_2        , /**< Service Request Line-2 selected  */
 578:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SR_ID_3          /**< Service Request Line-3 selected  */
 579:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_SR_ID_t;
 580:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 581:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 582:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 583:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Slice shadow transfer options.
 584:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 585:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SHADOW_TRANSFER
 586:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 587:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_SLICE_0            = CCU8_GCSS_S0SE_Msk,  /**< Transfer Period, Compare 
 588:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           shadow register values to
 589:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           SLICE-0 */
 590:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_0     = CCU8_GCSS_S0DSE_Msk, /**< Transfer Dither compare s
 591:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           to actual register for SL
 592:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_0  = CCU8_GCSS_S0PSE_Msk, /**< Transfer Prescaler shadow
 593:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           actual register for SLICE
 594:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_SLICE_1            = CCU8_GCSS_S1SE_Msk,  /**< Transfer Period, Compare 
 595:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           shadow register values to
 596:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           SLICE-1 */
 597:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_1     = CCU8_GCSS_S1DSE_Msk, /**< Transfer Dither compare s
 598:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           to actual registers for S
 599:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_1  = CCU8_GCSS_S1PSE_Msk, /**< Transfer Prescaler shadow
 600:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           actual register for SLICE
 601:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_SLICE_2            = CCU8_GCSS_S2SE_Msk,  /**< Transfer Period, Compare 
 602:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           shadow register values to
 603:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           SLICE-2 */
 604:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_2     = CCU8_GCSS_S2DSE_Msk, /**< Transfer Dither compare s
 605:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           to actual register for SL
 606:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_2  = CCU8_GCSS_S2PSE_Msk, /**< Transfer Prescaler shadow
 607:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           actual register for SLICE
 608:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_SLICE_3            = CCU8_GCSS_S3SE_Msk,  /**< Transfer Period, Compare 
 609:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           shadow register values to
 610:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           SLICE-3 */
 611:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_3     = CCU8_GCSS_S3DSE_Msk, /**< Transfer Dither compare s
 612:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           to actual register for SL
 613:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_3  = CCU8_GCSS_S3PSE_Msk  /**< Transfer Prescaler shadow
 614:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           actual register for SLICE
 615:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SHADOW_TRANSFER_t;
 616:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 617:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #if (UC_SERIES != XMC45) || defined(DOXYGEN)
 618:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 619:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Slice shadow transfer mode options.
 620:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @note Not available for XMC4500 series
 621:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 622:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE
 623:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 624:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_IN_PERIOD_MATCH_AND_ONE_MATCH = 0U, /**< Shadow transfer is d
 625:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                One match. */
 626:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_PERIOD_MATCH = 1U,  /**< Shadow transfer is done only
 627:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_ONE_MATCH = 2U  /**< Shadow transfer is done only in 
 628:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_t;
 629:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
 630:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 631:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU8V3) || defined(DOXYGEN) /* Defined for XMC1400 devices only */
 632:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 633:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Output sources for OUTy0 signal
 634:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @note Only available for XMC1400 series
 635:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 636:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  typedef enum XMC_CCU8_SOURCE_OUT0
 637:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 638:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT0_ST1      = (uint32_t)0x0, /**< CCU8yST1 signal path is connected the CCU8x.O
 639:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT0_INV_ST1  = (uint32_t)0x1, /**< Inverted CCU8yST1 signal path is connected th
 640:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT0_ST2      = (uint32_t)0x2, /**< CCU8yST2 signal path is connected the CCU8x.O
 641:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT0_INV_ST2  = (uint32_t)0x3  /**< Inverted CCU8yST2 signal path is connected th
 642:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SOURCE_OUT0_t;
 643:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 644:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 645:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Output sources for OUTy1 signal
 646:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  @note Only available for XMC1400 series
 647:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 648:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  typedef enum XMC_CCU8_SOURCE_OUT1
 649:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 650:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT1_ST1      = (uint32_t)0x1, /**< CCU8yST1 signal path is connected the CCU8x.O
 651:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT1_INV_ST1  = (uint32_t)0x0, /**< Inverted CCU8yST1 signal path is connected th
 652:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT1_ST2      = (uint32_t)0x3, /**< CCU8yST2 signal path is connected the CCU8x.O
 653:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT1_INV_ST2  = (uint32_t)0x2  /**< Inverted CCU8yST2 signal path is connected th
 654:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SOURCE_OUT1_t;
 655:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 656:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 657:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Output sources for OUTy2 signal
 658:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @note Only available for XMC1400 series
 659:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 660:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  typedef enum XMC_CCU8_SOURCE_OUT2
 661:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 662:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT2_ST2      = (uint32_t)0x0, /**< CCU8yST2 signal path is connected the CCU8x.O
 663:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT2_INV_ST2  = (uint32_t)0x1, /**< Inverted CCU8yST2 signal path is connected th
 664:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT2_ST1      = (uint32_t)0x2, /**< CCU8yST1 signal path is connected the CCU8x.O
 665:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT2_INV_ST1  = (uint32_t)0x3  /**< Inverted CCU8yST1 signal path is connected th
 666:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SOURCE_OUT2_t;
 667:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 668:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 669:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Output sources for OUTy3 signal
 670:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  @note Only available for XMC1400 series
 671:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 672:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  typedef enum XMC_CCU8_SOURCE_OUT3
 673:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 674:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT3_ST2      = (uint32_t)0x1, /**< CCU8yST2 signal path is connected the CCU8x.O
 675:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT3_INV_ST2  = (uint32_t)0x0, /**< Inverted CCU8yST2 signal path is connected th
 676:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT3_ST1      = (uint32_t)0x3, /**< CCU8yST1 signal path is connected the CCU8x.O
 677:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT3_INV_ST1  = (uint32_t)0x2  /**< Inverted CCU8yST1 signal path is connected th
 678:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SOURCE_OUT3_t;
 679:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
 680:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 681:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 682:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 683:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Output selector for CCU8x.OUT0-3
 684:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 685:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #if !defined(CCU8V3) /* Defined for all devices except XMC1400 */
 686:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_OUT_PATH
 687:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 688:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_ST1      = (uint32_t)0x20000, /**< CCU8yST1 signal path is connected the C
 689:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_INV_ST1  = (uint32_t)0x20002, /**< Inverted CCU8yST1 signal path is connec
 690:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_ST1      = (uint32_t)0x40000, /**< CCU8yST1 signal path is connected the C
 691:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_INV_ST1  = (uint32_t)0x40004, /**< Inverted CCU8yST1 signal path is connec
 692:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_ST2      = (uint32_t)0x80000, /**< CCU8yST2 signal path is connected the C
 693:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_INV_ST2  = (uint32_t)0x80008, /**< Inverted CCU8yST2 signal path is connec
 694:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_ST2      = (uint32_t)0x100000,/**< CCU8yST2 signal path is connected the C
 695:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_INV_ST1  = (uint32_t)0x100010 /**< Inverted CCU8yST2 signal path is connec
 696:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_OUT_PATH_t;
 697:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #else
 698:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_OUT_PATH
 699:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 700:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_ST1      = (uint32_t)0x000C0, /**< CCU8yST1 signal path is connected the C
 701:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_INV_ST1  = (uint32_t)0x000D0, /**< Inverted CCU8yST1 signal path is connec
 702:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_ST2      = (uint32_t)0x000E0, /**< CCU8yST2 signal path is connected the C
 703:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_INV_ST2  = (uint32_t)0x000F0, /**< Inverted CCU8yST2 signal path is connec
 704:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_ST1      = (uint32_t)0x00D00, /**< CCU8yST1 signal path is connected the C
 705:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_INV_ST1  = (uint32_t)0x00C00, /**< Inverted CCU8yST1 signal path is connec
 706:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_ST2      = (uint32_t)0x00F00, /**< CCU8yST2 signal path is connected the C
 707:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_INV_ST2  = (uint32_t)0x00E00, /**< Inverted CCU8yST2 signal path is connec
 708:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_ST2      = (uint32_t)0x0C000, /**< CCU8yST2 signal path is connected the C
 709:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_INV_ST2  = (uint32_t)0x0D000, /**< Inverted CCU8yST2 signal path is connec
 710:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_ST1      = (uint32_t)0x0E000, /**< CCU8yST1 signal path is connected the C
 711:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_INV_ST1  = (uint32_t)0x0F000, /**< Inverted CCU8yST1 signal path is connec
 712:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_ST2      = (uint32_t)0xD0000, /**< CCU8yST2 signal path is connected the C
 713:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_INV_ST2  = (uint32_t)0xC0000, /**< Inverted CCU8yST2 signal path is connec
 714:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_ST1      = (uint32_t)0xF0000, /**< CCU8yST1 signal path is connected the C
 715:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_INV_ST1  = (uint32_t)0xE0000  /**< Inverted CCU8yST1 signal path is connec
 716:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_OUT_PATH_t;
 717:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 718:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 719:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Immediate write into configuration register
 720:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  @note Only available for XMC1400 series
 721:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 722:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_WRITE_INTO
 723:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 724:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_PERIOD_CONFIGURATION = CCU8_CC8_STC_IRPC_Msk,                  /**< Imm
 725:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Wri
 726:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Con
 727:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_COMPARE1_CONFIGURATION = CCU8_CC8_STC_IRCC1_Msk,               /**< Imm
 728:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Wri
 729:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Con
 730:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_COMPARE2_CONFIGURATION = CCU8_CC8_STC_IRCC2_Msk,               /**< Imm
 731:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Wri
 732:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Con
 733:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_PASSIVE_LEVEL_CONFIGURATION = CCU8_CC8_STC_IRLC_Msk,           /**< Imm
 734:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Wri
 735:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                            Config
 736:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_DITHER_VALUE_CONFIGURATION = CCU8_CC8_STC_IRDC_Msk,            /**< Imm
 737:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Wri
 738:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                            Config
 739:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_FLOATING_PRESCALER_VALUE_CONFIGURATION = CCU8_CC8_STC_IRFC_Msk /**< Imm
 740:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Wri
 741:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Val
 742:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_WRITE_INTO_t;
 743:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 744:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 745:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 746:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Automatic Shadow Transfer request when writing into shadow register
 747:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  @note Only available for XMC1400 series
 748:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 749:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO
 750:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 751:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PERIOD_SHADOW = CCU8_CC8_STC_ASPC_Msk,        
 752:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 753:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                    
 754:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                    
 755:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_COMPARE1_SHADOW = CCU8_CC8_STC_ASCC1_Msk,     
 756:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 757:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 758:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 759:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_COMPARE2_SHADOW = CCU8_CC8_STC_ASCC2_Msk,     
 760:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 761:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 762:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 763:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PASSIVE_LEVEL = CCU8_CC8_STC_ASLC_Msk,        
 764:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 765:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                    
 766:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_DITHER_SHADOW = CCU8_CC8_STC_ASDC_Msk,        
 767:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                    
 768:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                    
 769:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_FLOATING_PRESCALER_SHADOW = CCU8_CC8_STC_ASFC_
 770:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 771:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                    
 772:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                    
 773:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 774:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_t;
 775:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
 776:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 777:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 778:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  CCU8 slice mask which can be used for the APIs as input where multi slice support is available
 779:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 780:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MASK
 781:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 782:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MASK_SLICE_0  = 1U , /**< SLICE-0 */
 783:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MASK_SLICE_1  = 2U , /**< SLICE-1 */
 784:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MASK_SLICE_2  = 4U , /**< SLICE-2 */
 785:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MASK_SLICE_3  = 8U   /**< SLICE-3 */
 786:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MASK_t;
 787:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 788:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 789:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Selects which signal is controlling the delay between the change at the CCU8 outputs and effect
 790:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 791:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_PARITY_CHECKER_DELAY_INPUT
 792:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 793:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_DELAY_INPUT_IGBTA = 0 << CCU8_GPCHK_PCDS_Pos,
 794:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_DELAY_INPUT_IGBTB = 1 << CCU8_GPCHK_PCDS_Pos,
 795:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_DELAY_INPUT_IGBTC = 2 << CCU8_GPCHK_PCDS_Pos,
 796:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_DELAY_INPUT_IGBTD = 3 << CCU8_GPCHK_PCDS_Pos
 797:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_PARITY_CHECKER_DELAY_INPUT_t;
 798:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 799:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 800:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 801:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Selects which signal contains the driver parity information
 802:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 803:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_PARITY_CHECKER_DRIVER_INPUT
 804:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 805:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_DRIVER_INPUT_SLICE_0 = 0 << CCU8_GPCHK_PISEL_Pos,
 806:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_DRIVER_INPUT_SLICE_1 = 1 << CCU8_GPCHK_PISEL_Pos,
 807:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_DRIVER_INPUT_SLICE_2 = 2 << CCU8_GPCHK_PISEL_Pos,
 808:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_DRIVER_INPUT_SLICE_3 = 3 << CCU8_GPCHK_PISEL_Pos,
 809:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_PARITY_CHECKER_DRIVER_INPUT_t;
 810:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 811:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 812:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Selects if we have an odd or even parity
 813:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 814:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_PARITY_CHECKER_TYPE
 815:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 816:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_TYPE_EVEN = 0 << CCU8_GPCHK_PCTS_Pos,
 817:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_TYPE_ODD = 1 << CCU8_GPCHK_PCTS_Pos,
 818:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_PARITY_CHECKER_TYPE_t;
 819:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 820:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**************************************************************************************************
 821:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * DATA STRUCTURES
 822:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  **************************************************************************************************
 823:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 824:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 825:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Configuration data structure of an External Event(Event-0/1/2).
 826:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Needed to configure the various aspects of an External Event.
 827:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  This structure will not connect the external event with an external function.
 828:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 829:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef struct XMC_CCU8_SLICE_EVENT_CONFIG
 830:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 831:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_INPUT_t                   mapped_input; /**< Required input signal for the Event. 
 832:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_t  edge;         /**< Select the event edge of the input si
 833:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                               This is needed for an edge sensitive 
 834:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_t level;        /**< Select the event level of the input s
 835:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                               This is needed for an level sensitive
 836:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_t            duration;     /**< Low Pass filter duration in terms of 
 837:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_CONFIG_t;
 838:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 839:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /*Anonymous structure/union guard start*/
 840:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(__CC_ARM)
 841:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   #pragma push
 842:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   #pragma anon_unions
 843:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #elif defined(__TASKING__)
 844:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   #pragma warning 586
 845:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
 846:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 847:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 848:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Dead Time configuration
 849:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 850:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef struct XMC_CCU8_SLICE_DEAD_TIME_CONFIG
 851:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 852:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   union
 853:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   {
 854:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****     struct
 855:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****     {
 856:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t enable_dead_time_channel1 : 1; /**< Enable dead time for Compare Channel-1 */
 857:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t enable_dead_time_channel2 : 1; /**< Enable dead time for Compare Channel-2 */
 858:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t channel1_st_path : 1;          /**< Should dead time be applied to ST output of Comp
 859:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t channel1_inv_st_path : 1;      /**< Should dead time be applied to inverse ST output
 860:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                    Compare Channel-1? */
 861:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t channel2_st_path : 1;          /**< Should dead time be applied to ST output of Comp
 862:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t channel2_inv_st_path : 1;      /**< Should dead time be applied to inverse ST output
 863:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                    Compare Channel-2? */
 864:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t div : 2;                       /**< Dead time prescaler divider value.
 865:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                    Accepts enum ::XMC_CCU8_SLICE_DTC_DIV_t*/
 866:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 24;
 867:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****     };
 868:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****     uint32_t dtc;
 869:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   };
 870:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   union
 871:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   {
 872:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****     struct
 873:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****     {
 874:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t channel1_st_rising_edge_counter : 8; /**< Contains the delay value that is applied t
 875:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                       for compare channel-1. Range: [0x0 to 0xFF]
 876:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t channel1_st_falling_edge_counter : 8; /**< Contains the delay value that is applied 
 877:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                        for compare channel-1. Range: [0x0 to 0xFF
 878:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 16;
 879:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****     };
 880:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****     uint32_t dc1r;
 881:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   };
 882:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   union
 883:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   {
 884:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****     struct
 885:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****     {
 886:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t channel2_st_rising_edge_counter : 8; /**< Contains the delay value that is applied t
 887:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                     for compare channel-2. Range: [0x0 to 0xFF]*/
 888:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t channel2_st_falling_edge_counter : 8; /**< Contains the delay value that is applied 
 889:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                     for compare channel-2. Range: [0x0 to 0xFF]*/
 890:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 16;
 891:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****     };
 892:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****     uint32_t dc2r;
 893:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   };
 894:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t;
 895:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 896:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 897:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Configuration data structure for CCU8 slice. Specifically configures the CCU8 slice to compare 
 898:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  This excludes event and function configuration.
 899:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 900:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef struct XMC_CCU8_SLICE_COMPARE_CONFIG
 901:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 902:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   union
 903:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   {
 904:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****     struct
 905:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****     {
 906:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t timer_mode : 1;         /**< Edge aligned or Centre Aligned.
 907:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SLICE_TIMER_COUNT_MODE_t */
 908:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t monoshot : 1;           /**< Single shot or Continuous mode .
 909:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t */
 910:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t shadow_xfer_clear : 1; /**< Should PR and CR shadow xfer happen when timer is cleare
 911:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 10;
 912:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t dither_timer_period: 1; /**< Can the period of the timer dither? */
 913:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t dither_duty_cycle : 1;  /**< Can the compare match of the timer dither? */
 914:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 1;
 915:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t prescaler_mode: 1;      /**< Normal or floating prescaler mode.
 916:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SLICE_PRESCALER_MODE_t */
 917:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 8;
 918:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t mcm_ch1_enable : 1;     /**< Multi-Channel mode for compare channel 1 enable? */
 919:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t mcm_ch2_enable : 1;     /**< Multi-Channel mode for compare channel 2 enable? */
 920:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 2;
 921:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t slice_status : 2;       /**< Which of the two channels drives the slice status outpu
 922:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_STATUS_t*/
 923:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 1;
 924:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****     };
 925:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****     uint32_t tc;
 926:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   };
 927:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   union
 928:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   {
 929:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****     struct
 930:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****     {
 931:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t passive_level_out0 : 1; /**< ST and OUT passive levels Configuration for OUT0. 
 932:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t */
 933:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t passive_level_out1 : 1; /**< ST and OUT passive levels Configuration for OUT1. 
 934:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t */
 935:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t passive_level_out2 : 1; /**< ST and OUT passive levels Configuration for OUT2. 
 936:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t */
 937:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t passive_level_out3 : 1; /**< ST and OUT passive levels Configuration for OUT3. 
 938:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t */
 939:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 28;
 940:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****     };
 941:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****     uint32_t psl;
 942:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   };
 943:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   union
 944:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   {
 945:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****     struct
 946:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****     {
 947:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t asymmetric_pwm : 1;     /**< Should the PWM be a function of the 2 compare channels
 948:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             rather than period value? */
 949:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   #if !defined(CCU8V3)    /* Defined for all devices except XMC1400 */                             
 950:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t invert_out0 : 1;        /**< Should inverted ST of Channel-1 be connected to OUT0? *
 951:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t invert_out1 : 1;        /**< Should inverted ST of Channel-1 be connected to OUT1? *
 952:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t invert_out2 : 1;        /**< Should inverted ST of Channel-2 be connected to OUT2? *
 953:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t invert_out3 : 1;        /**< Should inverted ST of Channel-2 be connected to OUT3? *
 954:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 27;
 955:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   #else
 956:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 3;
 957:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t selector_out0 : 2;      /**< Connect ST or inverted ST of Channel-1 or Channel-2 be 
 958:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SOURCE_OUT0_t 
 959:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             refer OCS1 bit-field of CHC register. 
 960:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 											@note Only available for XMC1400 series */
 961:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 2;
 962:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t selector_out1 : 2;      /**< Connect ST or inverted ST of Channel-1 or Channel-2 be 
 963:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SOURCE_OUT1_t 
 964:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             refer OCS2 bit-field of CHC register. 
 965:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 											@note Only available for XMC1400 series */
 966:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 2;
 967:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t selector_out2 : 2;      /**< Connect ST or inverted ST of Channel-1 or Channel-2 be 
 968:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SOURCE_OUT2_t 
 969:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             refer OCS3 bit-field of CHC register.
 970:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 											@note Only available for XMC1400 series */
 971:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 2;
 972:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t selector_out3 : 2;      /**< Connect ST or inverted ST of Channel-1 or Channel-2 be 
 973:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SOURCE_OUT3_t 
 974:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             refer OCS4 bit-field of CHC register.
 975:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 											@note Only available for XMC1400 series */
 976:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 14;
 977:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   #endif
 978:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****     };
 979:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****     uint32_t chc;
 980:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   };
 981:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   uint32_t prescaler_initval : 4;      /**< Initial prescaler divider value 
 982:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SLICE_PRESCALER_t */
 983:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   uint32_t float_limit : 4;            /**< The max value which the prescaler divider can increment
 984:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Range : [0 to 15] */
 985:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   uint32_t dither_limit : 4;           /**< The value that determines the spreading of dithering 
 986:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Range : [0 to 15] */
 987:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   uint32_t timer_concatenation : 1;    /**< Enables the concatenation of the timer if true*/
 988:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_COMPARE_CONFIG_t;
 989:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 990:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 991:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Configuration data structure for CCU8 slice. Specifically configures the CCU8 slice to capture 
 992:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  This excludes event and function configuration.
 993:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 994:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef struct XMC_CCU8_SLICE_CAPTURE_CONFIG
 995:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 996:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   union
 997:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   {
 998:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****     struct
 999:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****     {
1000:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 4;
1001:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t fifo_enable : 1;      /**< Should the capture registers be setup as a FIFO?(Extended
1002:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t timer_clear_mode : 2; /**< How should the timer register be cleared upon detection o
1003:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                           Accepts enum ::XMC_CCU8_SLICE_TIMER_CLEAR_MODE_t */
1004:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 4;
1005:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t same_event : 1;       /**< Should the capture event for C1V/C0V and C3V/C2V be same 
1006:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t ignore_full_flag : 1; /**< Should updates to capture registers follow full flag rule
1007:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 3;
1008:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t prescaler_mode: 1;    /**< Normal or floating prescaler Accepts enum :: XMC_CCU8_SLI
1009:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 15;
1010:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****     };
1011:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****     uint32_t tc;
1012:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   };
1013:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   uint32_t prescaler_initval : 4;    /**< Prescaler divider value */
1014:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   uint32_t float_limit : 4;          /**< The max value which the prescaler divider can increment t
1015:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   uint32_t timer_concatenation : 1;    /**< Enables the concatenation of the timer */
1016:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_CAPTURE_CONFIG_t;
1017:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /*Anonymous structure/union guard end*/
1018:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(__CC_ARM)
1019:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   #pragma pop
1020:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #elif defined(__TASKING__)
1021:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   #pragma warning restore
1022:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1023:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**************************************************************************************************
1024:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * API Prototypes
1025:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  **************************************************************************************************
1026:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #ifdef __cplusplus
1027:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** extern "C" {
1028:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1029:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1030:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_IsValidModule(const XMC_CCU8_MODULE_t *const module)
1031:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1032:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   bool tmp = false;
1033:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   
1034:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = (module == CCU80);
1035:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   
1036:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU81)
1037:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = tmp || (module == CCU81);
1038:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1039:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   
1040:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   return tmp;  
1041:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } 
1042:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1043:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_IsValidSlice(const XMC_CCU8_SLICE_t *const slice)
1044:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1045:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   bool tmp = false;
1046:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   
1047:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = (slice == CCU80_CC80);
1048:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU80_CC81)  
1049:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU80_CC81);
1050:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1051:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU80_CC82)  
1052:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU80_CC82);
1053:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1054:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU80_CC83)  
1055:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU80_CC83);
1056:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1057:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU81)  
1058:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU81_CC80);
1059:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU81_CC81)  
1060:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU81_CC81);
1061:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1062:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU81_CC82)  
1063:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU81_CC82);
1064:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1065:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU81_CC83)  
1066:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU81_CC83);
1067:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1068:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif 
1069:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  
1070:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   return tmp;  
1071:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** } 
1072:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1073:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1074:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1075:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param mcs_action multi-channel shadow transfer request configuration
1076:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1077:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1078:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1079:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1080:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Initialization of global register GCTRL.\n\n
1081:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  As part of module initialization, behaviour of the module upon detection
1082:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Multi-Channel Mode trigger is configured. Will also invoke the XMC_CCU8_EnableModule().
1083:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  The API call would bring up the required CCU8 module and also initialize the module for
1084:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  the required multi-channel shadow transfer.
1085:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1086:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1087:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_CompareInit()<BR> XMC_CCU8_SLICE_CaptureInit().
1088:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1089:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action);
1090:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1091:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1092:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1093:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1094:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1095:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1096:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1097:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables the CCU8 module and brings it to active state.\n\n
1098:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Also disables the gating of the clock signal (if applicable depending on the device being select
1099:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Invoke this API before any operations are done on the CCU8 module. Invoked from  XMC_CCU8_Init()
1100:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1101:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1102:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_SetModuleClock()<BR>  XMC_CCU8_DisableModule()<BR>  XMC_CCU8_StartPrescaler().
1103:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1104:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module);
1105:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1106:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1107:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1108:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1109:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1110:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1111:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1112:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Brings the CCU8 module to reset state and enables gating of the clock signal(if applicable depen
1113:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * on the device being selected).\n\n
1114:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Invoke this API when a CCU8 module needs to be disabled completely.
1115:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Any operation on the CCU8 module will have no effect after this API is called.
1116:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1117:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1118:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_EnableModule()<BR> XMC_CCU8_DisableModule().
1119:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1120:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_DisableModule(XMC_CCU8_MODULE_t *const module);
1121:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1122:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1123:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1124:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param clock Choice of input clock to the module
1125:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1126:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1127:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1128:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1129:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Selects the Module Clock by configuring GCTRL.PCIS bits.\n\n
1130:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  There are 3 potential clock sources. This API helps to select the required clock source.
1131:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Call to this API is valid after the XMC_CCU8_Init().
1132:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1133:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1134:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * None.<BR>
1135:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1136:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SetModuleClock(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_CLOCK_t clock);
1137:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1138:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1139:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1140:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1141:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1142:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1143:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1144:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1145:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Starts the prescaler and restores clocks to the timer slices, by setting GIDLC.SPRB bit.<br>\n
1146:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Once the input to the prescaler has been chosen and the prescaler divider of all slices program
1147:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  the prescaler itself may be started. Invoke this  API after XMC_CCU8_Init()
1148:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  (Mandatory to fully initialize the module).
1149:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1150:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1151:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPres
1152:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_StopPrescaler().
1153:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1154:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
1155:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1156:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1157:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
1158:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1159:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1160:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1161:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1162:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1163:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1164:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1165:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1166:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Starts the parity function.<br>\n
1167:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Invoke this  API after XMC_CCU8_Init()
1168:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1169:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1170:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR> XMC_CCU8_StopParity
1171:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1172:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_StartParityChecker(XMC_CCU8_MODULE_t *const module)
1173:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1174:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_StartParityChecker:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1175:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GIDLC |= (uint32_t) CCU8_GIDLC_SPCH_Msk;
1176:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1177:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1178:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1179:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1180:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1181:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1182:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1183:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1184:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Stops the prescaler and blocks clocks to the timer slices, by setting GIDLS.CPRB bit.\n\n
1185:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Clears the run bit of the prescaler. Ensures that the module clock is not supplied to
1186:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the slices of the module.
1187:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1188:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1189:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8
1190:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1191:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_StopPrescaler(XMC_CCU8_MODULE_t *const module)
1192:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1193:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_StopPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1194:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GIDLS |= (uint32_t) CCU8_GIDLS_CPRB_Msk;
1195:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1196:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1197:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1198:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1199:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1200:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1201:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1202:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1203:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Stops the parity function.<br>\n
1204:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1205:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1206:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartParityChecker()<BR>
1207:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1208:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_StopParityChecker(XMC_CCU8_MODULE_t *const module)
1209:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1210:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_StopParityChecker:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1211:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GIDLS |= (uint32_t) CCU8_GIDLS_CPCH_Msk;
1212:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1213:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1214:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1215:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1216:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1217:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1218:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1219:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1220:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Returns the state of the prescaler, by reading GSTAT.PRB bit.\n\n
1221:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * If clock is being supplied to the slices of the  module then returns as true. 
1222:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1223:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1224:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler()<BR> XMC_CCU8_EnableClock()<BR>  XMC_CCU8
1225:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1226:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_IsPrescalerRunning(XMC_CCU8_MODULE_t *const module)
1227:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1228:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_IsPrescalerRunning:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1229:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   return((bool)((module->GSTAT & (uint32_t) CCU8_GSTAT_PRB_Msk) == CCU8_GSTAT_PRB_Msk));
1230:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1231:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1232:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1233:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1234:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1235:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1236:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1237:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1238:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Returns the state of the parity checker.\n\n
1239:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1240:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1241:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_StartParityChecker()<BR>  XMC_CCU8_StopParityChecker()<BR> XMC_CCU8_EnableClock()<BR>  
1242:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1243:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_IsParityCheckerRunning(XMC_CCU8_MODULE_t *const module)
1244:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1245:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_IsPrescalerRunning:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1246:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   return((bool)((module->GSTAT & (uint32_t) CCU8_GSTAT_PCRB_Msk) == CCU8_GSTAT_PCRB_Msk));
1247:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1248:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1249:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1250:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1251:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param clock_mask Slices whose clocks are to be enabled simultaneously.
1252:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Bit location 0/1/2/3 represents slice-0/1/2/3 respectively. 
1253:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Range: [0x1 to 0xF]
1254:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1255:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1256:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1257:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1258:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables clocks of multiple slices at a time, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I, 
1259:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * GIDLC.CS3I bits.\n\n
1260:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Takes an input clock_mask, which determines the slices that would receive the clock. Bring them 
1261:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * of the idle state simultaneously.
1262:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1263:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1264:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock().
1265:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1266:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_EnableMultipleClocks(XMC_CCU8_MODULE_t *const module, const uint8_t c
1267:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1268:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableMultipleClocks:Invalid Module Pointer", XMC_CCU8_IsValidModule(module)
1269:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableMultipleClocks:Invalid clock mask", (clock_mask < 16U));
1270:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1271:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GIDLC |= (uint32_t) clock_mask;
1272:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1273:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1274:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1275:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1276:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param compare_init Pointer to slice configuration structure
1277:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1278:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1279:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1280:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1281:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Initialization of a CC8 slice to compare mode, by configuring CC8yTC, CC8yCMC, CC8yPSC, CC8yDITH
1282:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * CC8yFPCS, CC8yCHC registers.\n\n
1283:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * CC8 slice is configured with Timer configurations in this routine. Timer is stopped before initi
1284:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * by calling XMC_CCU8_SLICE_StopTimer(). After initialization user has to explicitly enable
1285:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the shadow transfer for the required values by calling XMC_CCU8_EnableShadowTransfer() with appr
1286:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1287:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1288:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * None.
1289:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1290:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
1291:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                 const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init);
1292:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1293:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1294:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1295:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param capture_init Pointer to slice configuration structure
1296:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1297:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1298:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1299:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1300:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Initialization of a CC8 slice to capture mode, by configuring CC8yTC, CC8yCMC, CC8yPSC,CC8yFPCS 
1301:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * CC8 slice is configured with Capture configurations in  this routine. Timer is stopped before in
1302:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * by calling XMC_CCU8_SLICE_StopTimer(). After initialization user has to explicitly enable the sh
1303:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * for the required  values by calling XMC_CCU8_EnableShadowTransfer() with appropriate mask. 
1304:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1305:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1306:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_Capture0Config()<BR>  XMC_CCU8_SLICE_Capture1Config().
1307:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1308:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_CaptureInit(XMC_CCU8_SLICE_t *const slice,
1309:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                 const XMC_CCU8_SLICE_CAPTURE_CONFIG_t *const capture_init);
1310:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1311:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1312:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1313:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice_number Slice for which the clock should be Enabled.
1314:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Range: [0x0 to 0x3]
1315:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1316:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1317:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1318:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1319:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Enables the slice timer clock, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I, 
1320:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  GIDLC.CS3I bits according to the selected \a slice_number.\n\n
1321:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  It is possible to enable/disable clock at slice level. This uses the \b slice_number to indicat
1322:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  slice whose clock needs to be enabled. Directly accessed register is GIDLC.
1323:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1324:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1325:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR> 
1326:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1327:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_numb
1328:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
  27              	 .loc 1 1328 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0B46     	 mov r3,r1
  44 000a FB70     	 strb r3,[r7,#3]
1329:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1330:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));
1331:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1332:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GIDLC |= ((uint32_t) 1 << slice_number);
  45              	 .loc 1 1332 0
  46 000c 7B68     	 ldr r3,[r7,#4]
  47 000e DA68     	 ldr r2,[r3,#12]
  48 0010 FB78     	 ldrb r3,[r7,#3]
  49 0012 0121     	 movs r1,#1
  50 0014 01FA03F3 	 lsl r3,r1,r3
  51 0018 1A43     	 orrs r2,r2,r3
  52 001a 7B68     	 ldr r3,[r7,#4]
  53 001c DA60     	 str r2,[r3,#12]
1333:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
  54              	 .loc 1 1333 0
  55 001e 0C37     	 adds r7,r7,#12
  56              	.LCFI3:
  57              	 .cfi_def_cfa_offset 4
  58 0020 BD46     	 mov sp,r7
  59              	.LCFI4:
  60              	 .cfi_def_cfa_register 13
  61              	 
  62 0022 5DF8047B 	 ldr r7,[sp],#4
  63              	.LCFI5:
  64              	 .cfi_restore 7
  65              	 .cfi_def_cfa_offset 0
  66 0026 7047     	 bx lr
  67              	 .cfi_endproc
  68              	.LFE144:
  70              	 .section .text.XMC_CCU8_SLICE_IsTimerRunning,"ax",%progbits
  71              	 .align 2
  72              	 .thumb
  73              	 .thumb_func
  75              	XMC_CCU8_SLICE_IsTimerRunning:
  76              	.LFB155:
1334:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1335:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1336:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1337:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice_number Slice for which the clock should be disabled.
1338:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Range: [0x0 to 0x3]
1339:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1340:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1341:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1342:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1343:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Disables the slice timer clock, by configuring GIDLS.SS0I, GIDLS.SSS1I, GIDLS.SSS2I, 
1344:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * GIDLS.SSS3I bits according to the selected \a slice_number .\n\n
1345:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * It is possible to disable clock at slice level using the module pointer.
1346:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \b slice_number is used to disable the clock to a given slice of the module.
1347:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1348:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1349:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_EnableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  
1350:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1351:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_DisableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_num
1352:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1353:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_DisableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1354:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_DisableClock:Invalid Slice Number", (slice_number < 4U));
1355:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1356:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GIDLS |= ((uint32_t) 1 << slice_number);
1357:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1358:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1359:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1360:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1361:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice_number Slice for which the clock should be disabled.
1362:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Range: [0x0 to 0x3]
1363:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param output Slice output.
1364:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1365:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1366:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1367:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1368:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables slice outputs to be used to perform the parity check. 
1369:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1370:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1371:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_StartParityChecker()<BR>  XMC_CCU8_SLICE_ParityCheckerDisableSliceOutput()<BR>
1372:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1373:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_ParityCheckerEnableSliceOutput(XMC_CCU8_MODULE_t *const module,
1374:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1375:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ParityCheckerEnableSliceOutput:Invalid Module Pointer", XMC_CCU8_IsVal
1376:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ParityCheckerEnableSliceOutput:Invalid Slice Number", (slice_number < 
1377:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1378:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GPCHK |= (uint32_t)(((output & (1 << slice_number)) << CCU8_GPCHK_PCSEL0_Pos) |
1379:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                               ((output & (2 << slice_number)) << CCU8_GPCHK_PCSEL1_Pos) |
1380:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                               ((output & (4 << slice_number)) << CCU8_GPCHK_PCSEL2_Pos) |
1381:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                               ((output & (8 << slice_number)) << CCU8_GPCHK_PCSEL3_Pos));
1382:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1383:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1384:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1385:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1386:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice_number Slice for which the clock should be disabled.
1387:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Range: [0x0 to 0x3]
1388:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param output Slice output ::XMC_CCU8_SLICE_OUTPUT_t.
1389:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1390:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1391:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1392:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1393:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables slice outputs to be used to perform the parity check. 
1394:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1395:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1396:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_StartParityChecker()<BR>  XMC_CCU8_SLICE_ParityCheckerEnableSliceOutput()<BR>
1397:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1398:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_ParityCheckerDisableSliceOutput(XMC_CCU8_MODULE_t *const module
1399:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1400:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ParityCheckerDisableSliceOutput:Invalid Slice Pointer", XMC_CCU8_IsVal
1401:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ParityCheckerDisableSliceOutput:Invalid Slice Number", (slice_number <
1402:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1403:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GPCHK &= (uint32_t)~(((output & (1 << slice_number)) << CCU8_GPCHK_PCSEL0_Pos) |
1404:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                ((output & (2 << slice_number)) << CCU8_GPCHK_PCSEL1_Pos) |
1405:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                ((output & (4 << slice_number)) << CCU8_GPCHK_PCSEL2_Pos) |
1406:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                ((output & (8 << slice_number)) << CCU8_GPCHK_PCSEL3_Pos));
1407:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1408:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1409:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1410:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1411:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param input signal controlling the delay between the change at the CCU8 outputs and effective c
1412:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1413:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1414:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1415:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1416:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Selects which signal is controlling the delay between the change at the CCU8 outputs and effecti
1417:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1418:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1419:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_StartParityChecker()<BR>
1420:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1421:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_ParityCheckerSetDelayInput(XMC_CCU8_MODULE_t *const module, con
1422:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1423:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ParityCheckerSetDelayInput:Invalid Module Pointer", XMC_CCU8_IsValidMo
1424:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GPCHK = (module->GPCHK & (uint32_t)~CCU8_GPCHK_PCDS_Msk) | input;
1425:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1426:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1427:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1428:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1429:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param input signal contains the driver parity information ::XMC_CCU8_PARITY_CHECKER_DRIVER_INPU
1430:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1431:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1432:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1433:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1434:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Selects which signal contains the driver parity information.
1435:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The signal must be selected throughout the input selector mux of each slice. The signal must be 
1436:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1437:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1438:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_StartParityChecker(), XMC_CCU8_SLICE_SetInput()<BR>.
1439:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1440:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_ParityCheckerSetDriverInput(XMC_CCU8_MODULE_t *const module, co
1441:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1442:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ParityCheckerSetDelayInput:Invalid Module Pointer", XMC_CCU8_IsValidMo
1443:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GPCHK = (module->GPCHK & (uint32_t)~CCU8_GPCHK_PISEL_Msk) | input;
1444:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1445:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1446:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1447:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1448:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param type odd or even parity ::XMC_CCU8_PARITY_CHECKER_TYPE_t.
1449:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1450:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1451:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1452:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1453:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Selects if we have an odd or even parity.
1454:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1455:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1456:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_StartParityChecker()<BR>.
1457:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1458:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_ParityCheckerSetType(XMC_CCU8_MODULE_t *const module, const XMC
1459:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1460:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ParityCheckerSetDelayInput:Invalid Module Pointer", XMC_CCU8_IsValidMo
1461:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GPCHK = (module->GPCHK & (uint32_t)~CCU8_GPCHK_PCTS_Msk) | type;
1462:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1463:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1464:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1465:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1466:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1467:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return status of parity checker. If >0 then an error is dectected
1468:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1469:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1470:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Returns current value of the XOR chain.
1471:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1472:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1473:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_StartParityChecker()<BR>
1474:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1475:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE uint32_t XMC_CCU8_SLICE_ParityCheckerGetStatus(XMC_CCU8_MODULE_t *const module)
1476:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1477:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ParityCheckerSetDelayInput:Invalid Module Pointer", XMC_CCU8_IsValidMo
1478:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   return (module->GPCHK & CCU8_GPCHK_PCST_Msk);
1479:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1480:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1481:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1482:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1483:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param out_path_msk configuration for output path selection.
1484:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *        combination of XMC_CCU8_OUT_PATH_t enum items can be used to create a mask.
1485:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 
1486:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1487:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1488:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1489:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1490:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configure the out the path of the two compare channels with specified ST signal, by configuring 
1491:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  ^ CC8yCHC register.\n\n
1492:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 
1493:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * For the two compare channels it is possible to select either direct ST signal or inverted ST sig
1494:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \b out_path_msk is used to set the required out put path.
1495:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1496:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1497:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * None
1498:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** */
1499:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetOutPath(XMC_CCU8_SLICE_t *const slice, const uint32_t out_path_msk);
1500:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1501:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1502:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1503:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Map an External event to the External Start Function
1504:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param start_mode Behaviour of slice when the start function is activated
1505:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1506:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1507:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1508:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1509:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Configures the Start Function of the slice, by configuring CC8yCMC.ENDS and CC8yTC.ENDM bits.\n
1510:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Start function is mapped with one of the 3 events. An external signal can control when a CC8 ti
1511:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Additionally, the behaviour of the slice upon activation of the start function is configured as
1512:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1513:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1514:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_StopConfig()<BR>  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1515:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1516:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_StartConfig(XMC_CCU8_SLICE_t *const slice,
1517:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                 const XMC_CCU8_SLICE_EVENT_t event,
1518:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                 const XMC_CCU8_SLICE_START_MODE_t start_mode);
1519:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1520:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1521:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1522:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Map an External event to the External Stop Function
1523:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param end_mode Behaviour of slice when the stop function is activated
1524:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1525:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1526:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1527:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1528:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Stop function for the slice, by configuring CC8yCMC.STRTS and CC8yTC.STRM bits.\n
1529:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Stop function is mapped with one of the 3 events. An external signal can control when a CCU8 tim
1530:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Additionally, the behaviour of the slice upon activation of the stop function is configured as w
1531:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1532:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1533:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_StartConfig()<BR>  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput()
1534:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1535:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_StopConfig(XMC_CCU8_SLICE_t *const slice,
1536:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                const XMC_CCU8_SLICE_EVENT_t event,
1537:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                const XMC_CCU8_SLICE_END_MODE_t end_mode);
1538:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1539:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1540:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1541:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Map an External event to the External load Function
1542:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1543:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1544:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1545:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1546:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Configures the Load Function for the slice, by configuring CC8yCMC.LDS bit.\n\n
1547:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Load function is mapped with one of the 3 events. Up on occurrence of the event,\n
1548:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  if CC8yTCST.CDIR set to 0,CC8yTIMER register is reloaded with the value from compare channel 1 
1549:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                            compare channel 2\n
1550:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  if CC8yTCST.CDIR set to 1,CC8yTIMER register is reloaded with the value from period register\n
1551:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  
1552:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1553:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1554:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1555:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1556:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_LoadConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event);
1557:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1558:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1559:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1560:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param ch_num Select which compare channel value has to be loaded to the Timer register during e
1561:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1562:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1563:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1564:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1565:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Up on occurrence of the external load event, if CC8yTCST.CDIR set to 0, CC8yTIMER register can 
1566:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  with the value from compare channel 1 or compare channel 2\n
1567:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  If CC8yTC.TLS is 0, compare channel 1 value is loaded to the CC8yTIMER register\n
1568:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  If CC8yTC.TLS is 1, compare channel 2 value is loaded to the CC8yTIMER register\n
1569:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1570:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1571:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1572:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1573:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_LoadSelector(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_COMPARE_CHANNE
1574:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1575:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1576:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1577:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Map an External event to the External Modulation Function
1578:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param mod_mode Desired Modulation mode
1579:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param channel Specify the channel(s) on which the modulation should be applied.
1580:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param synch_with_pwm Option to synchronize modulation with PWM start
1581:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                       Pass \b true if the modulation needs to be synchronized with PWM signal.
1582:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1583:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1584:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1585:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1586:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Output Modulation Function of the slice, by configuring CC8yCMC.MOS, CC8yTC.EMT a
1587:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * CC8yTC.EMS bits.\n\n
1588:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Modulation function is mapped with one of the 3 events. The output signal of the CCU can
1589:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * be modulated according to a external input.  Additionally, the behaviour of the slice upon activ
1590:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * of the modulation function is configured as well.
1591:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1592:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1593:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1594:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1595:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_ModulationConfig(XMC_CCU8_SLICE_t *const slice,
1596:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                      const XMC_CCU8_SLICE_EVENT_t event,
1597:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                      const XMC_CCU8_SLICE_MODULATION_MODE_t mod_mode,
1598:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                      const XMC_CCU8_SLICE_MODULATION_CHANNEL_t channel, 
1599:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                      const bool synch_with_pwm
1600:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                      );
1601:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1602:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1603:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1604:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Map an External event to the External Count Function
1605:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1606:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1607:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1608:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1609:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Count Function of the slice, by configuring CC8yCMC.CNTS bit.\n\n
1610:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Count function is mapped with one of the 3 events. CCU8 slice can take an external
1611:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * signal to act as the counting event. The CCU8 slice would count the
1612:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * edges present on the \b event selected. 
1613:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1614:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1615:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1616:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1617:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_CountConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event);
1618:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1619:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1620:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1621:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event  Map an External event to the External Gating Function
1622:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1623:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1624:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1625:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1626:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Gating Function of the slice, by configuring CC8yCMC.GATES bit.\n\n
1627:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Gating function is mapped with one of the 3 events.  A CCU8 slice can use an input signal that w
1628:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * operate as counter gating. If the configured Active level is detected the counter will gate all 
1629:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1630:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1631:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1632:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1633:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_GateConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event);
1634:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1635:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1636:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1637:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Map an External event to the Capture-0 Function
1638:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1639:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1640:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1641:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1642:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Capture-0 Function of the slice, by configuring CC8yCMC.CAP0S bit.\n\n
1643:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Capture function is mapped with one of the 3 events.  A CCU8 slice can be configured into captur
1644:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * with the selected \b event. In this mode the CCU8 will capture the timer value into CC8yC0V and 
1645:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1646:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1647:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1648:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1649:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_Capture0Config(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t even
1650:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1651:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1652:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1653:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Map an External event to the Capture-1 Function
1654:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1655:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1656:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1657:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1658:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Capture-1 Function of the slice, by configuring CC8yCMC.CAP1S bit.\n\n
1659:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Capture function is mapped with one of the 3 events. A CCU8 slice can be configured into capture
1660:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * mode with the selected \b event. In this mode the CCU8 will capture the timer value into CC8yC2V
1661:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1662:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1663:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1664:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1665:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_Capture1Config(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t even
1666:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1667:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1668:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1669:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1670:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    bool would return true if the extended capture read back mode is enabled<BR>
1671:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1672:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1673:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Checks if Extended capture mode read is enabled for particular slice or not, by reading CC8yTC.E
1674:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * In this mode the there is only one associated read address for all the capture registers.
1675:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Individual capture registers can still be accessed in this mode.
1676:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1677:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1678:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_GetCapturedValueFromFifo().
1679:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1680:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_SLICE_IsExtendedCapReadEnabled(const XMC_CCU8_SLICE_t *const slice)
1681:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1682:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_IsPrescalerRunning:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1683:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   return((bool)((slice->TC & (uint32_t) CCU8_CC8_TC_ECM_Msk) == (uint32_t)CCU8_CC8_TC_ECM_Msk));
1684:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1685:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1686:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU8V1) /* Defined for XMC4800, XMC4700, XMC4500, XMC4400, XMC4200, XMC4100 devices onl
1687:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1688:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1689:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice_number to check whether read value belongs to required slice or not
1690:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1691:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *   int32_t   Returns -1 if the FIFO value being retrieved is not from the \b slice_number.
1692:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *             Returns the value captured in the \b slice_number, if captured value is from the cor
1693:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                     Range: [0x0 to 0xFFFF]
1694:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1695:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1696:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Read captured value from FIFO(ECRD register).\n\n
1697:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1698:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1699:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1700:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * derived/inferred from the captured values.
1701:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1702:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1703:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_IsExtendedCapReadEnabled().
1704:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1705:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** int32_t XMC_CCU8_GetCapturedValueFromFifo(const XMC_CCU8_MODULE_t *const module, const uint8_t slic
1706:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #else
1707:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1708:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1709:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param set The capture register set from which the captured value is to be retrieved
1710:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1711:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    uint32_t Returns the value captured in the \b slice_number
1712:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *             Range: [0x0 to 0xFFFF]
1713:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1714:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1715:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Read captured value from FIFO(CC8yECRD0 and CC8yECRD1).\n\n
1716:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1717:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1718:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1719:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * derived/inferred from the captured values.
1720:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1721:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1722:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_IsExtendedCapReadEnabled().
1723:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @note Defined for XMC4800, XMC4700, XMC4500, XMC4400, XMC4200, XMC4100 devices only. For other d
1724:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1725:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** uint32_t XMC_CCU8_SLICE_GetCapturedValueFromFifo(const XMC_CCU8_SLICE_t *const slice,
1726:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 		                                             const XMC_CCU8_SLICE_CAP_REG_SET_t set);
1727:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1728:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1729:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1730:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1731:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Map an External event to the External Count Direction Function
1732:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1733:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1734:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1735:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1736:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Count Direction of the slice, by configuring CC8yCMC.UDS bit.\n\n
1737:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Count direction function is mapped with one of the 3 events. A slice can be configured to change
1738:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * CC8yTIMER count direction depending on an external signal.
1739:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1740:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1741:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1742:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1743:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_DirectionConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t eve
1744:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1745:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1746:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1747:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1748:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1749:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1750:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1751:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the status bit override Function of the slice, by configuring CC8yCMC.OFS bit.\n\n
1752:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Status bit override function is mapped with one of the 3 events. A slice can be configured to ch
1753:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * output of the timer's CC8yST1 signal depending on an external signal.
1754:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1755:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1756:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent().
1757:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1758:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_StatusBitOverrideConfig(XMC_CCU8_SLICE_t *const slice);
1759:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1760:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1761:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1762:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param exit_mode How should a previously logged trap state be exited?
1763:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param synch_with_pwm Should exit of trap state be synchronized with PWM cycle start?
1764:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1765:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1766:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1767:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1768:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1769:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Trap Function of the slice, by configuring CC8yCMC.TS, CC8yTC.TRPSE, and CC8yTC.T
1770:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Trap function is mapped with Event-2. Criteria for exiting the trap state is configured.
1771:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This trap function allows PWM outputs to react on the state of an input pin.
1772:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Thus PWM output can be forced to inactive state upon detection of a trap.
1773:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * It is also possible to synchronize the trap function with the PWM signal using the \b synch_with
1774:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1775:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1776:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1777:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1778:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_TrapConfig(XMC_CCU8_SLICE_t *const slice,
1779:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                const XMC_CCU8_SLICE_TRAP_EXIT_MODE_t exit_mode,
1780:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                bool synch_with_pwm);
1781:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1782:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1783:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1784:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param ev1_config Pointer to event 1 configuration data
1785:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param ev2_config Pointer to event 2 configuration data
1786:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1787:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1788:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1789:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1790:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1791:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Map Status bit override function with an Event1 & Event 2 of the slice and configure CC8yINS reg
1792:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Details such as the input mapped to the event, event detection criteria and Low Pass filter opti
1793:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * by this routine for the events 1 & 2.  Event-1 input would be the trigger to override the value.
1794:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Event-2 input would be the override value.
1795:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1796:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1797:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StatusBitOverrideConfig().
1798:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1799:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU8_SLICE_t *const slice,
1800:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                     const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev1_
1801:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                     const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev2_
1802:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1803:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1804:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1805:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event The External Event which needs to be configured.
1806:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param config Pointer to event configuration data.
1807:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1808:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1809:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1810:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1811:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures an External Event of the slice, by updating CC8yINS register .\n\n
1812:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Details such as the input mapped to the event, event detection criteria and low pass filter
1813:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * options are programmed by this routine. The Event \b config  will configure the input selection,
1814:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the edge selection, the level selection and the Low pass filter for the  event.
1815:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1816:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1817:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartConfig()<BR>  XMC_CCU8_SLICE_StopConfig()<BR>  XMC_CCU8_SLICE_LoadConfig()<
1818:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ModulationConfig()<BR>  XMC_CCU8_SLICE_CountConfig()<BR>  XMC_CCU8_SLICE_GateCon
1819:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_Capture0Config()<BR> XMC_CCU8_SLICE_Capture1Config()<BR>  XMC_CCU8_SLICE_Directi
1820:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StatusBitOverrideConfig()<BR>  XMC_CCU8_SLICE_TrapConfig().
1821:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1822:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_ConfigureEvent(XMC_CCU8_SLICE_t *const slice,
1823:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                    const XMC_CCU8_SLICE_EVENT_t event,
1824:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                    const XMC_CCU8_SLICE_EVENT_CONFIG_t *config);
1825:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1826:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1827:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1828:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event The External Event which needs to be configured.
1829:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param input One of the 16 inputs meant to be mapped to the desired event
1830:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1831:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1832:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1833:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1834:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1835:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Selects an input for an external event, by configuring CC8yINS register.\n\n
1836:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * It is possible to select one of the possible 16 input signals for a given Event.
1837:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This configures the CC8yINS.EVxIS for the selected event.
1838:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1839:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1840:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartConfig()<BR>  XMC_CCU8_SLICE_StopConfig()<BR>  XMC_CCU8_SLICE_LoadConfig()<
1841:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ModulationConfig()<BR> XMC_CCU8_SLICE_CountConfig()<BR>  XMC_CCU8_SLICE_GateConf
1842:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_Capture0Config()<BR>  XMC_CCU8_SLICE_Capture1Config()<BR> XMC_CCU8_SLICE_Directi
1843:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StatusBitOverrideConfig()<BR>  XMC_CCU8_SLICE_TrapConfig().
1844:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1845:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetInput(XMC_CCU8_SLICE_t *const slice,
1846:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                              const XMC_CCU8_SLICE_EVENT_t event,
1847:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                              const XMC_CCU8_SLICE_INPUT_t input);
1848:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1849:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1850:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1851:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param out_mask  Output signals for which the Trap function needs to be activated.
1852:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Use ::XMC_CCU8_SLICE_OUTPUT_t enum items to create a mask of choice,
1853:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   using a bit wise OR operation
1854:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Range: [0x1 to 0xF]
1855:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1856:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1857:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1858:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1859:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables the trap feature, by setting CC8yTC.TRAPE0, CC8yTC.TRAPE1, CC8yTC.TRAPE2 and CC8yTC.TRAP
1860:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \a out_mask.\n\n
1861:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * A particularly useful feature where the PWM output can be forced inactive upon detection of a tr
1862:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * can be the output of a sensing element which has just detected an abnormal electrical condition.
1863:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1864:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1865:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_TrapConfig()<BR>  XMC_CCU8_SLICE_DisableTrap()<BR>  XMC_CCU8_SLICE_ConfigureEven
1866:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetInput().
1867:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1868:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_EnableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_ma
1869:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1870:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1871:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TC |= (uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos;
1872:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1873:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1874:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1875:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1876:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param out_mask  Output signals for which the Trap function needs to be deactivated.
1877:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Use ::XMC_CCU8_SLICE_OUTPUT_t enum items to create a mask of choice,
1878:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   using a bit wise OR operation.
1879:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Range: [0x1 to 0xF]
1880:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1881:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1882:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1883:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1884:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Disables the trap feature, by clearing CC8yTC.TRAPE0, CC8yTC.TRAPE1, CC8yTC.TRAPE2 and CC8yTC.TR
1885:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \a out_mask.\n\n.\n\n
1886:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This API will revert the changes done by XMC_CCU8_SLICE_EnableTrap().
1887:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This Ensures that the TRAP function has no effect on the output of the CCU8 slice.
1888:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1889:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1890:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableTrap().
1891:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1892:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_DisableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_m
1893:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1894:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1895:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   
1896:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TC &= ~((uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos);
1897:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1898:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1899:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1900:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1901:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1902:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    bool returns \b true if the Timer is running else it returns \b false.
1903:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1904:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1905:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Returns the state of the timer (Either Running or stopped(idle)), by reading CC8yTCST.TRB bit.
1906:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1907:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1908:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartTimer()<BR>  XMC_CCU8_SLICE_StopTimer().
1909:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1910:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_SLICE_IsTimerRunning(const XMC_CCU8_SLICE_t *const slice)
1911:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
  77              	 .loc 1 1911 0
  78              	 .cfi_startproc
  79              	 
  80              	 
  81              	 
  82 0000 80B4     	 push {r7}
  83              	.LCFI6:
  84              	 .cfi_def_cfa_offset 4
  85              	 .cfi_offset 7,-4
  86 0002 83B0     	 sub sp,sp,#12
  87              	.LCFI7:
  88              	 .cfi_def_cfa_offset 16
  89 0004 00AF     	 add r7,sp,#0
  90              	.LCFI8:
  91              	 .cfi_def_cfa_register 7
  92 0006 7860     	 str r0,[r7,#4]
1912:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1913:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   return(bool)(((slice->TCST) & CCU8_CC8_TCST_TRB_Msk) == (uint32_t)CCU8_CC8_TCST_TRB_Msk);
  93              	 .loc 1 1913 0
  94 0008 7B68     	 ldr r3,[r7,#4]
  95 000a 9B68     	 ldr r3,[r3,#8]
  96 000c 03F00103 	 and r3,r3,#1
  97 0010 002B     	 cmp r3,#0
  98 0012 14BF     	 ite ne
  99 0014 0123     	 movne r3,#1
 100 0016 0023     	 moveq r3,#0
 101 0018 DBB2     	 uxtb r3,r3
1914:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
 102              	 .loc 1 1914 0
 103 001a 1846     	 mov r0,r3
 104 001c 0C37     	 adds r7,r7,#12
 105              	.LCFI9:
 106              	 .cfi_def_cfa_offset 4
 107 001e BD46     	 mov sp,r7
 108              	.LCFI10:
 109              	 .cfi_def_cfa_register 13
 110              	 
 111 0020 5DF8047B 	 ldr r7,[sp],#4
 112              	.LCFI11:
 113              	 .cfi_restore 7
 114              	 .cfi_def_cfa_offset 0
 115 0024 7047     	 bx lr
 116              	 .cfi_endproc
 117              	.LFE155:
 119 0026 00BF     	 .section .text.XMC_CCU8_SLICE_StartTimer,"ax",%progbits
 120              	 .align 2
 121              	 .thumb
 122              	 .thumb_func
 124              	XMC_CCU8_SLICE_StartTimer:
 125              	.LFB159:
1915:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1916:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1917:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Pointer to an instance of CC8 slice
1918:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1919:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    bool returns \b true if the dead time counter of Compare channel-1 is running else it returns
1920:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1921:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1922:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Returns the state of the  Dead time counter 1 (Either Running or stopped(idle)), by reading CC8y
1923:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This returns the state of the dead time counter which is linked to Compare channel-1.
1924:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1925:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1926:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_IsDeadTimeCntr2Running().
1927:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1928:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_SLICE_IsDeadTimeCntr1Running(const XMC_CCU8_SLICE_t *const slice)
1929:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1930:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_IsDeadTimeCntr1Running:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(s
1931:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   return(bool)(((slice->TCST) & CCU8_CC8_TCST_DTR1_Msk) == (uint32_t)CCU8_CC8_TCST_DTR1_Msk);
1932:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1933:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1934:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1935:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Pointer to an instance of CC8 slice
1936:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1937:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    bool returns \b true if the dead time counter of Compare channel-2 is running else it returns
1938:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1939:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1940:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Returns the state of the  Dead time counter 2 (Either Running or stopped(idle)), by reading CC8y
1941:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This returns the state of the dead time counter which is linked to Compare channel-2.
1942:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1943:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1944:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_IsDeadTimeCntr1Running().
1945:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1946:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_SLICE_IsDeadTimeCntr2Running(const XMC_CCU8_SLICE_t *const slice)
1947:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1948:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_IsDeadTimeCntr2Running:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(s
1949:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   return(bool)(((slice->TCST) & CCU8_CC8_TCST_DTR2_Msk) == (uint32_t)CCU8_CC8_TCST_DTR2_Msk);
1950:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1951:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1952:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1953:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1954:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1955:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *   ::XMC_CCU8_SLICE_TIMER_COUNT_DIR_t returns the direction in which the timer is counting.
1956:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1957:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1958:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Returns the timer counting direction, by reading CC8yTCST.CDIR bit.\n\n
1959:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This API will return the direction in which the timer is currently
1960:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * incrementing(XMC_CCU8_SLICE_TIMER_COUNT_DIR_UP) or decrementing (XMC_CCU8_SLICE_TIMER_COUNT_DIR_
1961:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1962:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1963:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  None.
1964:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1965:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE XMC_CCU8_SLICE_TIMER_COUNT_DIR_t XMC_CCU8_SLICE_GetCountingDir(const XMC_CCU8_SLICE
1966:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1967:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetCountingDir:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1968:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   return((XMC_CCU8_SLICE_TIMER_COUNT_DIR_t)(((slice->TCST) & CCU8_CC8_TCST_CDIR_Msk) >> CCU8_CC8_TC
1969:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1970:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1971:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1972:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1973:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1974:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1975:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1976:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Starts the timer counting operation, by setting CC8yTCSET.TRBS bit.\n\n
1977:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * It is necessary to have configured the CC8 slice before starting its timer.
1978:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Before the Timer is started ensure that the clock is provided to the slice.
1979:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1980:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1981:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StopTimer().
1982:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1983:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
1984:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 126              	 .loc 1 1984 0
 127              	 .cfi_startproc
 128              	 
 129              	 
 130              	 
 131 0000 80B4     	 push {r7}
 132              	.LCFI12:
 133              	 .cfi_def_cfa_offset 4
 134              	 .cfi_offset 7,-4
 135 0002 83B0     	 sub sp,sp,#12
 136              	.LCFI13:
 137              	 .cfi_def_cfa_offset 16
 138 0004 00AF     	 add r7,sp,#0
 139              	.LCFI14:
 140              	 .cfi_def_cfa_register 7
 141 0006 7860     	 str r0,[r7,#4]
1985:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1986:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
 142              	 .loc 1 1986 0
 143 0008 7B68     	 ldr r3,[r7,#4]
 144 000a 0122     	 movs r2,#1
 145 000c DA60     	 str r2,[r3,#12]
1987:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
 146              	 .loc 1 1987 0
 147 000e 0C37     	 adds r7,r7,#12
 148              	.LCFI15:
 149              	 .cfi_def_cfa_offset 4
 150 0010 BD46     	 mov sp,r7
 151              	.LCFI16:
 152              	 .cfi_def_cfa_register 13
 153              	 
 154 0012 5DF8047B 	 ldr r7,[sp],#4
 155              	.LCFI17:
 156              	 .cfi_restore 7
 157              	 .cfi_def_cfa_offset 0
 158 0016 7047     	 bx lr
 159              	 .cfi_endproc
 160              	.LFE159:
 162              	 .section .text.XMC_CCU8_SLICE_StopTimer,"ax",%progbits
 163              	 .align 2
 164              	 .thumb
 165              	 .thumb_func
 167              	XMC_CCU8_SLICE_StopTimer:
 168              	.LFB160:
1988:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1989:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1990:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1991:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1992:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1993:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1994:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1995:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Stops the Timer.\n\n
1996:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Timer counting operation can be stopped by invoking this API, by setting CC8yTCCLR.TRBC bit.
1997:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1998:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1999:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartTimer().
2000:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2001:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
2002:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 169              	 .loc 1 2002 0
 170              	 .cfi_startproc
 171              	 
 172              	 
 173              	 
 174 0000 80B4     	 push {r7}
 175              	.LCFI18:
 176              	 .cfi_def_cfa_offset 4
 177              	 .cfi_offset 7,-4
 178 0002 83B0     	 sub sp,sp,#12
 179              	.LCFI19:
 180              	 .cfi_def_cfa_offset 16
 181 0004 00AF     	 add r7,sp,#0
 182              	.LCFI20:
 183              	 .cfi_def_cfa_register 7
 184 0006 7860     	 str r0,[r7,#4]
2003:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2004:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 185              	 .loc 1 2004 0
 186 0008 7B68     	 ldr r3,[r7,#4]
 187 000a 0122     	 movs r2,#1
 188 000c 1A61     	 str r2,[r3,#16]
2005:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
 189              	 .loc 1 2005 0
 190 000e 0C37     	 adds r7,r7,#12
 191              	.LCFI21:
 192              	 .cfi_def_cfa_offset 4
 193 0010 BD46     	 mov sp,r7
 194              	.LCFI22:
 195              	 .cfi_def_cfa_register 13
 196              	 
 197 0012 5DF8047B 	 ldr r7,[sp],#4
 198              	.LCFI23:
 199              	 .cfi_restore 7
 200              	 .cfi_def_cfa_offset 0
 201 0016 7047     	 bx lr
 202              	 .cfi_endproc
 203              	.LFE160:
 205              	 .section .text.XMC_CCU8_SLICE_ClearTimer,"ax",%progbits
 206              	 .align 2
 207              	 .thumb
 208              	 .thumb_func
 210              	XMC_CCU8_SLICE_ClearTimer:
 211              	.LFB161:
2006:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2007:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2008:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2009:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2010:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2011:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2012:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2013:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Resets the timer count to zero, by setting CC8yTCCLR.TCC bit.\n\n
2014:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * A timer which has been stopped can still retain the last counted value.
2015:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * After invoking this API the timer value will be cleared.
2016:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2017:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2018:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartTimer().
2019:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2020:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_ClearTimer(XMC_CCU8_SLICE_t *const slice)
2021:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 212              	 .loc 1 2021 0
 213              	 .cfi_startproc
 214              	 
 215              	 
 216              	 
 217 0000 80B4     	 push {r7}
 218              	.LCFI24:
 219              	 .cfi_def_cfa_offset 4
 220              	 .cfi_offset 7,-4
 221 0002 83B0     	 sub sp,sp,#12
 222              	.LCFI25:
 223              	 .cfi_def_cfa_offset 16
 224 0004 00AF     	 add r7,sp,#0
 225              	.LCFI26:
 226              	 .cfi_def_cfa_register 7
 227 0006 7860     	 str r0,[r7,#4]
2022:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2023:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TCC_Msk;
 228              	 .loc 1 2023 0
 229 0008 7B68     	 ldr r3,[r7,#4]
 230 000a 0222     	 movs r2,#2
 231 000c 1A61     	 str r2,[r3,#16]
2024:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
 232              	 .loc 1 2024 0
 233 000e 0C37     	 adds r7,r7,#12
 234              	.LCFI27:
 235              	 .cfi_def_cfa_offset 4
 236 0010 BD46     	 mov sp,r7
 237              	.LCFI28:
 238              	 .cfi_def_cfa_register 13
 239              	 
 240 0012 5DF8047B 	 ldr r7,[sp],#4
 241              	.LCFI29:
 242              	 .cfi_restore 7
 243              	 .cfi_def_cfa_offset 0
 244 0016 7047     	 bx lr
 245              	 .cfi_endproc
 246              	.LFE161:
 248              	 .section .text.XMC_CCU8_EnableShadowTransfer,"ax",%progbits
 249              	 .align 2
 250              	 .thumb
 251              	 .thumb_func
 253              	XMC_CCU8_EnableShadowTransfer:
 254              	.LFB169:
2025:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2026:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2027:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2028:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2029:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2030:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2031:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2032:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Stops and resets the timer count to zero, by setting CC8yTCCLR.TCC and CC8yTCCLR.TRBC bit.\n\n
2033:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2034:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2035:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartTimer().
2036:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2037:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_StopClearTimer(XMC_CCU8_SLICE_t *const slice)
2038:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2039:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_StopClearTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2040:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TCCLR = CCU8_CC8_TCCLR_TRBC_Msk | CCU8_CC8_TCCLR_TCC_Msk;
2041:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2042:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2043:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2044:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2045:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2046:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    ::XMC_CCU8_SLICE_MODE_t returns XMC_CCU8_SLICE_MODE_COMPARE if the slice is operating in comp
2047:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                          returns XMC_CCU8_SLICE_MODE_CAPTURE if the slice is operating in captur
2048:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2049:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2050:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Retrieves the current mode of operation in the slice (either Capture mode or Compare mode), by r
2051:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * CC8yTC.CMOD bit.\n\n
2052:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Ensure that before invoking this API the CCU8 slice should be configured otherwise the output of
2053:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * invalid.
2054:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2055:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2056:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  None.
2057:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2058:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE XMC_CCU8_SLICE_MODE_t XMC_CCU8_SLICE_GetSliceMode(const XMC_CCU8_SLICE_t *const sli
2059:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2060:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetSliceMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2061:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   return((XMC_CCU8_SLICE_MODE_t)(((slice->TC) & CCU8_CC8_TC_CMOD_Msk) >> CCU8_CC8_TC_CMOD_Pos));
2062:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2063:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2064:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2065:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2066:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param mode Desired repetition mode (Either single shot or Continuous)
2067:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2068:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2069:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2070:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2071:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Timer to either Single shot mode or continuous mode, by configuring CC8yTC.TSSM b
2072:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The timer will count up to the terminal count as specified in the period register and stops imme
2073:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * mode has been set to single shot. In the continuous mode of operation, the timer starts counting
2074:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * reaching the terminal count.
2075:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2076:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2077:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetTimerRepeatMode().
2078:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2079:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetTimerRepeatMode(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_TIMER_RE
2080:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2081:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2082:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2083:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <br>
2084:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  ::XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t returns XMC_CCU8_SLICE_TIMER_REPEAT_MODE_REPEAT if continu
2085:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                                     returns XMC_CCU8_SLICE_TIMER_REPEAT_MODE_SINGLE if single sh
2086:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2087:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2088:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Retrieves the Timer repeat mode, either Single shot mode or continuous mode, by reading CC8yTC.T
2089:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The timer will count upto the terminal count as specified in the period register and stops immed
2090:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * mode has been set to single shot mode. In the continuous mode of operation, the timer starts cou
2091:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * all over again after reaching the terminal count.
2092:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2093:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2094:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerRepeatMode().
2095:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2096:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t XMC_CCU8_SLICE_GetTimerRepeatMode(
2097:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                     const XMC_CCU8_
2098:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2099:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice
2100:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   return((XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t)(((slice->TC) & CCU8_CC8_TC_TSSM_Msk) >> CCU8_CC8_TC_T
2101:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2102:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2103:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2104:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param mode Desired counting mode (Either Edge Aligned or Center Aligned)
2105:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2106:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2107:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2108:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2109:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the timer counting mode either Edge Aligned or Center Aligned, by configuring CC8yTC.
2110:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * In the edge aligned mode, the timer counts from 0 to the terminal count. Once the timer count ha
2111:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * compare value, the timer status output asserts itself. It will now deassert only after the timer
2112:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * terminal count.\n In the center aligned mode, the timer first counts from 0 to the terminal coun
2113:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * During this upward and downward counting, the timer status output stays asserted as long as the 
2114:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * greater than the compare value.
2115:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2116:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2117:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetTimerCountingMode().
2118:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2119:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetTimerCountingMode(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_TIMER_
2120:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2121:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2122:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2123:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <br>
2124:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  ::XMC_CCU8_SLICE_TIMER_COUNT_MODE_t returns XMC_CCU8_SLICE_TIMER_COUNT_MODE_EA if edge aligned 
2125:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                                     returns XMC_CCU8_SLICE_TIMER_COUNT_MODE_CA if center aligned
2126:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2127:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2128:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Retrieves timer counting mode either Edge aligned or Center Aligned, by reading CC8yTC.TCM bit.\
2129:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2130:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2131:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerCountingMode().
2132:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2133:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE XMC_CCU8_SLICE_TIMER_COUNT_MODE_t XMC_CCU8_SLICE_GetTimerCountingMode(
2134:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 		                                                                            const XMC_CCU8_SLICE_
2135:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2136:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerCountingMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(sli
2137:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   return((XMC_CCU8_SLICE_TIMER_COUNT_MODE_t)(((slice->TC) & CCU8_CC8_TC_TCM_Msk) >> CCU8_CC8_TC_TCM
2138:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2139:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2140:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2141:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param period_val Timer period value
2142:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *        Range: [0x0 to 0xFFFF]
2143:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2144:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2145:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2146:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2147:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Programs the timer period, by writing CC8yPRS register.\n\n
2148:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The frequency of counting/ PWM frequency is determined by this value. The period value is writte
2149:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * register. Explicitly enable the shadow transfer for the the period value by calling
2150:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_EnableShadowTransfer() with appropriate mask. If shadow transfer is enabled and the tim
2151:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * a period match transfers the value from the shadow register to the actual period register.
2152:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2153:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2154:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetTimerPeriodMatch().
2155:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2156:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val);
2157:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2158:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2159:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2160:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2161:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *   uint16_t returns the current timer period value
2162:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *            Range: [0x0 to 0xFFFF]
2163:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2164:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2165:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Retrieves the timer period value currently effective, by reading CC8yPR register.\n\n
2166:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * If the timer is active then the value being returned is currently being used for the PWM period.
2167:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2168:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Note:</b><br>
2169:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The XMC_CCU8_SLICE_SetTimerPeriodMatch() would set the new period value to a shadow register.
2170:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This would only transfer the new values into the actual period register if the shadow transfer r
2171:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU8_SLICE_GetTimerPeri
2172:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * would not reflect the new values until the shadow transfer completes.
2173:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2174:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2175:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerPeriodMatch().
2176:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2177:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE uint16_t XMC_CCU8_SLICE_GetTimerPeriodMatch(const XMC_CCU8_SLICE_t *const slice)
2178:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2179:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slic
2180:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   return((uint16_t) slice->PR);
2181:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2182:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2183:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2184:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param channel Select the compare channel to which the \b compare_val has to programmed.
2185:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param compare_val Timer compare value
2186:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2187:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2188:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2189:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2190:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Programs the timer compare value, by writing CC8yCR1S and CC8yCR2S registers.\n\n
2191:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  The PWM duty cycle is determined by this value.\n\n
2192:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The compare value is written to a shadow register. Explicitly enable the shadow transfer for
2193:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the the period/compare value by calling XMC_CCU8_EnableShadowTransfer() with
2194:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * appropriate mask.If shadow transfer is enabled and the timer is running,
2195:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * a period match transfers the value from the shadow register to the actual compare register.
2196:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2197:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2198:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_EnableShadowTransfer().
2199:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2200:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
2201:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                          const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
2202:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                          const uint16_t compare_val);
2203:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2204:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2205:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2206:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param compare_val Timer compare value
2207:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2208:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2209:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2210:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2211:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Programs the timer compare1 value, by writing CC8yCR1S register.\n\n
2212:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The PWM duty cycle is determined by this value.\n\n
2213:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The compare value is written to a shadow register. Explicitly enable the shadow transfer for
2214:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the the period/compare value by calling XMC_CCU8_EnableShadowTransfer() with appropriate mask.
2215:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * If shadow transfer is enabled and the timer is running, a period match transfers the value from
2216:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the shadow register to the actual compare register.
2217:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2218:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2219:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_EnableShadowTransfer().
2220:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2221:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetTimerCompareMatchChannel1(XMC_CCU8_SLICE_t *const slice, con
2222:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2223:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatchChannel1:Invalid Slice Pointer", XMC_CCU8_IsValidS
2224:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->CR1S = (uint32_t) compare_val;
2225:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2226:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2227:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2228:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2229:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param compare_val Timer compare value
2230:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2231:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2232:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2233:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2234:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Programs the timer compare2 value, by writing CC8yCR2S register.\n\n
2235:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The PWM duty cycle is determined by this value.\n\n
2236:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The compare value is written to a shadow register. Explicitly enable the shadow transfer for
2237:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the the period/compare value by calling XMC_CCU8_EnableShadowTransfer() with appropriate mask.
2238:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * If shadow transfer is enabled and the timer is running, a period match transfers the value from
2239:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the shadow register to the actual compare register.
2240:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2241:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2242:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_EnableShadowTransfer().
2243:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2244:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetTimerCompareMatchChannel2(XMC_CCU8_SLICE_t *const slice, con
2245:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2246:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatchChannel2:Invalid Slice Pointer", XMC_CCU8_IsValidS
2247:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->CR2S = (uint32_t) compare_val;
2248:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2249:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2250:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2251:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2252:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param channel Select the compare channel to retrieve from.
2253:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2254:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *   uint16_t returns the current timer compare value
2255:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *            Range: [0x0 to 0xFFFF]
2256:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2257:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2258:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Retrieves the timer compare value currently effective, by reading CC8yCR1S and CC8yCR2S register
2259:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * If the timer is active then the value being returned is currently being for the PWM duty cycle( 
2260:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2261:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Note:</b><br>
2262:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The XMC_CCU8_SLICE_SetTimerCompareMatch() would set the new compare value to a shadow register.
2263:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This would only transfer the new values into the actual compare register if the shadow transfer 
2264:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU8_SLICE_GetTimerComp
2265:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * would not reflect the new values until the shadow transfer completes.
2266:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2267:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2268:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerCompareMatch().
2269:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2270:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** uint16_t XMC_CCU8_SLICE_GetTimerCompareMatch(const XMC_CCU8_SLICE_t *const slice,
2271:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                              const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel);
2272:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2273:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2274:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
2275:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param shadow_transfer_msk Shadow transfer request mask for various transfers.
2276:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                            Use ::XMC_CCU8_SHADOW_TRANSFER_t enum items to create a mask of choic
2277:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                            using a bit wise OR operation.
2278:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2279:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2280:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2281:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2282:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Requests of shadow transfer for Period, Compare, Passive level, dither and prescaler, by configu
2283:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the GCSS register.\n\n
2284:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The transfer from the shadow registers to the actual registers is done in the immediate next occ
2285:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * shadow transfer trigger after the API is called.
2286:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2287:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Any call to XMC_CCU8_SLICE_SetTimerPeriodMatch()<BR>  XMC_CCU8_SLICE_SetTimerCompareMatch()<BR> 
2288:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_XMC_CCU8_SLICE_SetPrescaler()<BR> XMC_CCU8_SLICE_CompareInit()<BR> XMC_CCU8_SLICE_CaptureIni
2289:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * must be succeeded by this API.
2290:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2291:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2292:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  None.
2293:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2294:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t 
2295:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 255              	 .loc 1 2295 0
 256              	 .cfi_startproc
 257              	 
 258              	 
 259              	 
 260 0000 80B4     	 push {r7}
 261              	.LCFI30:
 262              	 .cfi_def_cfa_offset 4
 263              	 .cfi_offset 7,-4
 264 0002 83B0     	 sub sp,sp,#12
 265              	.LCFI31:
 266              	 .cfi_def_cfa_offset 16
 267 0004 00AF     	 add r7,sp,#0
 268              	.LCFI32:
 269              	 .cfi_def_cfa_register 7
 270 0006 7860     	 str r0,[r7,#4]
 271 0008 3960     	 str r1,[r7]
2296:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module)
2297:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GCSS = (uint32_t)shadow_transfer_msk;  
 272              	 .loc 1 2297 0
 273 000a 7B68     	 ldr r3,[r7,#4]
 274 000c 3A68     	 ldr r2,[r7]
 275 000e 1A61     	 str r2,[r3,#16]
2298:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
 276              	 .loc 1 2298 0
 277 0010 0C37     	 adds r7,r7,#12
 278              	.LCFI33:
 279              	 .cfi_def_cfa_offset 4
 280 0012 BD46     	 mov sp,r7
 281              	.LCFI34:
 282              	 .cfi_def_cfa_register 13
 283              	 
 284 0014 5DF8047B 	 ldr r7,[sp],#4
 285              	.LCFI35:
 286              	 .cfi_restore 7
 287              	 .cfi_def_cfa_offset 0
 288 0018 7047     	 bx lr
 289              	 .cfi_endproc
 290              	.LFE169:
 292 001a 00BF     	 .section .text.XMC_CCU8_SLICE_GetTimerValue,"ax",%progbits
 293              	 .align 2
 294              	 .thumb
 295              	 .thumb_func
 297              	XMC_CCU8_SLICE_GetTimerValue:
 298              	.LFB170:
2299:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2300:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2301:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2302:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2303:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *   uint16_t returns the current timer value
2304:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *            Range: [0x0 to 0xFFFF]
2305:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2306:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2307:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Retrieves the latest timer value, from CC8yTIMER register.\n\n
2308:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2309:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2310:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerValue().
2311:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2312:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE uint16_t XMC_CCU8_SLICE_GetTimerValue(const XMC_CCU8_SLICE_t *const slice)
2313:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 299              	 .loc 1 2313 0
 300              	 .cfi_startproc
 301              	 
 302              	 
 303              	 
 304 0000 80B4     	 push {r7}
 305              	.LCFI36:
 306              	 .cfi_def_cfa_offset 4
 307              	 .cfi_offset 7,-4
 308 0002 83B0     	 sub sp,sp,#12
 309              	.LCFI37:
 310              	 .cfi_def_cfa_offset 16
 311 0004 00AF     	 add r7,sp,#0
 312              	.LCFI38:
 313              	 .cfi_def_cfa_register 7
 314 0006 7860     	 str r0,[r7,#4]
2314:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2315:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   return((uint16_t) slice->TIMER);
 315              	 .loc 1 2315 0
 316 0008 7B68     	 ldr r3,[r7,#4]
 317 000a 1B6F     	 ldr r3,[r3,#112]
 318 000c 9BB2     	 uxth r3,r3
2316:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
 319              	 .loc 1 2316 0
 320 000e 1846     	 mov r0,r3
 321 0010 0C37     	 adds r7,r7,#12
 322              	.LCFI39:
 323              	 .cfi_def_cfa_offset 4
 324 0012 BD46     	 mov sp,r7
 325              	.LCFI40:
 326              	 .cfi_def_cfa_register 13
 327              	 
 328 0014 5DF8047B 	 ldr r7,[sp],#4
 329              	.LCFI41:
 330              	 .cfi_restore 7
 331              	 .cfi_def_cfa_offset 0
 332 0018 7047     	 bx lr
 333              	 .cfi_endproc
 334              	.LFE170:
 336 001a 00BF     	 .section .text.XMC_CCU8_SLICE_ClearEvent,"ax",%progbits
 337              	 .align 2
 338              	 .thumb
 339              	 .thumb_func
 341              	XMC_CCU8_SLICE_ClearEvent:
 342              	.LFB184:
2317:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2318:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2319:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param timer_val The new timer value that has to be loaded into the TIMER register.
2320:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                  Range: [0x0 to 0xFFFF]
2321:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2322:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2323:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2324:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2325:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Loads a new timer value, by setting CC8yTIMER register.\n\n
2326:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 
2327:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Note:</b><br>
2328:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Request to load is ignored if the timer is running.
2329:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2330:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2331:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetTimerValue().
2332:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2333:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetTimerValue(XMC_CCU8_SLICE_t *const slice, const uint16_t tim
2334:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2335:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2336:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TIMER = (uint32_t) timer_val;
2337:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2338:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2339:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2340:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param period_dither Boolean instruction on dithering of period match
2341:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param duty_dither Boolean instruction on dithering of compare match
2342:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param spread Dither compare value
2343:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2344:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2345:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2346:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2347:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables dithering of PWM frequency and duty cycle, by configuring CC8yTC.DITHE and CC8yDITS bits
2348:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Some control loops are slow in updating PWM frequency and duty cycle. In such a case, a Bresenha
2349:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * can help reduce long term errors. Dithering can be applied to period and duty individually,
2350:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * this can be selected using the parameter \b period_dither and \b duty_dither.
2351:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The \b spread would provide the dither compare value. If the dither counter value is less than t
2352:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the period/compare values would be dithered according to the dither mode selected. This API woul
2353:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_SetDitherCompareValue().
2354:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2355:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Note:</b><br>
2356:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * After this API call, XMC_CCU8_EnableShadowTransfer() has to be called with appropriate mask
2357:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * to transfer the dither value.
2358:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2359:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2360:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_DisableDithering().
2361:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2362:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_EnableDithering(XMC_CCU8_SLICE_t *const slice,
2363:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                     const bool period_dither,
2364:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                     const bool duty_dither,
2365:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                     const uint8_t spread);
2366:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2367:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2368:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2369:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2370:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2371:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2372:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2373:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Disables dithering of PWM frequency and duty cycle, by clearing CC8yTC.DITHE bits.\n\n
2374:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This disables the Dither mode that was set in XMC_CCU8_SLICE_EnableDithering().
2375:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This API will not clear the dither compare value.
2376:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2377:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2378:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableDithering().
2379:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2380:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_DisableDithering(XMC_CCU8_SLICE_t *const slice)
2381:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2382:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableDithering:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice))
2383:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TC &= ~((uint32_t) CCU8_CC8_TC_DITHE_Msk);
2384:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2385:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2386:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2387:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2388:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2389:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2390:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2391:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2392:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables the floating prescaler, by setting CC8yTC.FPE bit.\n\n
2393:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The prescaler divider starts with an initial value and increments upon every period match. It ke
2394:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * until a ceiling (prescaler compare value) is hit and thereafter rolls back to the original presc
2395:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * It is necessary to have programmed an initial divider value and a compare value before the featu
2396:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2397:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2398:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetFloatingPrescalerCompareValue()<BR>  XMC_CCU8_SLICE_DisableFloatingPrescaler(
2399:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_XMC_CCU8_SLICE_SetPrescaler().
2400:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2401:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_EnableFloatingPrescaler(XMC_CCU8_SLICE_t *const slice)
2402:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2403:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableFloatingPrescaler:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(
2404:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TC |= (uint32_t) CCU8_CC8_TC_FPE_Msk;
2405:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2406:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2407:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2408:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2409:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2410:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2411:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2412:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2413:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Disables the floating prescaler, by clearing CC8yTC.FPE bit.\n\n
2414:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This would return the prescaler to the normal mode.
2415:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The prescaler that would be applied is the value present in CC8yPSC.
2416:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2417:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   * \par<b>Related APIs:</b><br>
2418:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableFloatingPrescaler().
2419:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2420:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_DisableFloatingPrescaler(XMC_CCU8_SLICE_t *const slice)
2421:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2422:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableFloatingPrescaler:Invalid Slice Pointer", XMC_CCU8_IsValidSlice
2423:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TC &= ~((uint32_t) CCU8_CC8_TC_FPE_Msk);
2424:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2425:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2426:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2427:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2428:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param comp_val Dither compare value
2429:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                 Range: [0x0 to 0xF]
2430:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2431:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2432:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2433:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2434:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Sets the dither spread/compare value, by setting CC8yDITS.DCVS bits.\n\n
2435:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This value is the cornerstone of PWM dithering feature. Dithering is applied/done when the value
2436:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * dithering counter is less than this compare/spread value. For all dithering counter values great
2437:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the spread value, there is no dithering. After setting the value XMC_CCU8_EnableShadowTransfer()
2438:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * called with appropriate mask.
2439:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2440:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   * \par<b>Related APIs:</b><br>
2441:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableDithering().
2442:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2443:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetDitherCompareValue(XMC_CCU8_SLICE_t *const slice, const uint
2444:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2445:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetDitherCompareValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(sl
2446:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetDitherCompareValue:Invalid Dither compare value", (comp_val <= 15U)
2447:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2448:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->DITS = comp_val;
2449:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2450:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2451:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2452:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2453:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param div_val Prescaler divider value. Accepts enum :: XMC_CCU8_SLICE_PRESCALER_t
2454:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                 Range: [0x0 to 0xF]
2455:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2456:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2457:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2458:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2459:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Programs the slice specific prescaler divider, by configuring the CC8yPSC and CC8yFPC registers.
2460:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The prescaler divider may only be programmed after the prescaler run bit has been cleared
2461:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * by calling XMC_CCU8_StopPrescaler().
2462:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2463:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2464:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetFloatingPrescalerCompareValue().
2465:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2466:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetPrescaler(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_PRESCALER_t di
2467:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2468:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2469:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2470:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param cmp_val Prescaler divider compare value
2471:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                 Range: [0x0 to 0xF]
2472:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2473:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2474:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2475:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2476:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Programs the slice specific prescaler divider compare value, by configuring CC8yFPCS register.\n
2477:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The compare value is applicable only in floating mode of operation. The prescaler divider starts
2478:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * value and increments to the compare value steadily upon every period match. Once prescaler divid
2479:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * equals the prescaler divider compare value, the value in the former resets back to the PVAL (fro
2480:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the value, XMC_CCU8_EnableShadowTransfer() has to be called with appropriate mask.
2481:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2482:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2483:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetPrescaler().
2484:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2485:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetFloatingPrescalerCompareValue(XMC_CCU8_SLICE_t *const slice,
2486:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                      const uint8_t cmp_val)
2487:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2488:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetFloatingPrescalerCompareValue:Invalid Slice Pointer", XMC_CCU8_IsVa
2489:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   /* First, write to the shadow register */
2490:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->FPCS = (uint32_t) cmp_val;
2491:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2492:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2493:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2494:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2495:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param ch_num Compare channel for which the multi-channel mode is needed.
2496:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2497:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2498:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2499:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2500:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables the multichannel mode, by setting CC8yTC.MCME1 or CC8yTC.MCME1 bits based on the \a ch_n
2501:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The output state of the Timer slices can be controlled in parallel by a single input signal.
2502:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * A particularly useful feature in motor control applications where the PWM output of multiple sli
2503:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * be gated and ungated by multi-channel gating inputs connected to the slices. A peripheral like P
2504:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * motor knows exactly which of the power drive switches are to be turned on and off at any instant
2505:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * a gating bus (known as multi-channel inputs) control which of the slices output stays gated/unga
2506:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2507:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2508:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_DisableMultiChannelMode()<BR>  XMC_CCU8_SetMultiChannelShadowTransferMode().
2509:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2510:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_EnableMultiChannelMode(XMC_CCU8_SLICE_t *const slice,
2511:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                            const XMC_CCU8_SLICE_COMPARE_CHANNEL_t c
2512:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2513:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableMultiChannelMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(s
2514:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableMultiChannelMode:Invalid Channel", XMC_CCU8_SLICE_CHECK_COMP_CHA
2515:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2516:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TC |= (uint32_t)CCU8_CC8_TC_MCME1_Msk << ch_num;
2517:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2518:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2519:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2520:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2521:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param ch_num Compare channel for which the multi-channel mode needs to be disabled.
2522:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2523:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2524:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2525:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2526:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Disables the multichannel mode, by clearing CC8yTC.MCME1 or CC8yTC.MCME1 bits based on the \a ch
2527:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Returns the slices to the normal operation mode. This takes the slice number as input and
2528:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * configures the multi channel mode for it.
2529:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2530:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2531:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableMultiChannelMode().
2532:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2533:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_DisableMultiChannelMode(XMC_CCU8_SLICE_t *const slice,
2534:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                             const XMC_CCU8_SLICE_COMPARE_CHANNEL_t 
2535:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2536:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableMultiChannelMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(
2537:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableMultiChannelMode:Invalid Channel", XMC_CCU8_SLICE_CHECK_COMP_CH
2538:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2539:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TC &= ~((uint32_t)CCU8_CC8_TC_MCME1_Msk << ch_num);
2540:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2541:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2542:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2543:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
2544:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice_mode_msk Slices for which the configuration has to be applied.
2545:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                       Use ::XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_t enum items to create a mask
2546:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                             using a bit wise OR operation.
2547:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2548:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2549:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2550:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2551:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables the Multi-channel shadow transfer request trigger signal either by software or hardware 
2552:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * GCTRL.MSE0, GCTRL.MSE1, GCTRL.MSE2, and GCTRL.MSE3 based on the mask.\n\n
2553:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The shadow transfer would take place either if it was requested by software or by the CCU8x.MCSS
2554:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2555:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2556:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  None.
2557:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** */
2558:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SetMultiChannelShadowTransferMode(XMC_CCU8_MODULE_t *const module, const uint32_t sli
2559:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2560:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2561:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2562:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param reg_num The capture register from which the captured value is to be retrieved
2563:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                Range: [0,3]
2564:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2565:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    uint32_t  Returns the Capture register value.
2566:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *              Range: [0 to 0x1FFFFF]
2567:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2568:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2569:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Retrieves timer value which has been captured in the Capture registers, by reading CC8yCV[\b reg
2570:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The signal whose timing characteristics are to be measured must be mapped to an event which in t
2571:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * to the capture function. Based on the capture criteria, the timer values are captured into captu
2572:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * characteristics of the input signal may then be derived/inferred from the captured values. The f
2573:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * to find out if there is a new captured value present.
2574:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2575:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2576:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetLastCapturedTimerValue().
2577:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2578:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** uint32_t XMC_CCU8_SLICE_GetCaptureRegisterValue(const XMC_CCU8_SLICE_t *const slice, const uint8_t 
2579:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2580:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2581:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2582:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param set  The capture register set, which must be evaluated
2583:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param val_ptr Out Parameter of the API.Stores the captured timer value into this out parameter.
2584:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2585:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  ::XMC_CCU8_STATUS_t Returns XMC_CCU8_STATUS_OK if there was new value present in the capture re
2586:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   returns XMC_CCU8_STATUS_ERROR if there was no new value present in the capture
2587:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2588:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2589:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Retrieves the latest captured timer value, by reading CC8yCV registers.\n\n
2590:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Retrieve the timer value last stored by the slice. When separate capture events are used,
2591:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * users must specify the capture set to evaluate. If single capture event mode is used, all 8 capt
2592:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * evaluated.\n
2593:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The lowest register is evaluated first followed by the next higher ordered register and this con
2594:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * capture registers have been evaluated.
2595:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2596:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2597:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetCaptureregisterValue().
2598:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2599:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** XMC_CCU8_STATUS_t XMC_CCU8_SLICE_GetLastCapturedTimerValue(const XMC_CCU8_SLICE_t *const slice,
2600:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                            const XMC_CCU8_SLICE_CAP_REG_SET_t set,
2601:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                            uint32_t *val_ptr);
2602:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2603:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2604:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2605:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Event whose assertion can potentially lead to an interrupt
2606:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2607:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2608:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2609:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2610:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables the generation of an interrupt pulse for the event, by configuring CC8yINTE register.\n\
2611:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * For an event to lead to an interrupt, it must first be enabled and bound to a service request li
2612:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * NVIC node must be enabled as well. This API merely enables the event. Binding with SR is perform
2613:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2614:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2615:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableMultipleEvents()<BR>  XMC_CCU8_SLIC
2616:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_DisableMultipleEvents().
2617:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2618:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_EnableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE
2619:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2620:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2621:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));
2622:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2623:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
2624:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2625:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2626:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2627:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2628:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param mask Event mask such that multiple events can be enabled.
2629:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                  Use ::XMC_CCU8_SLICE_MULTI_IRQ_ID_t enum items to create a mask of choice,
2630:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                  using a bit wise OR operation.
2631:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2632:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2633:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2634:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2635:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables the generation of an interrupt pulse for the required events, by configuring CC8yINTE re
2636:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * For an event to lead to an interrupt, it must first be enabled and bound to a service request li
2637:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * NVIC node must be enabled as well. This API merely enables the events. Binding with SR is perfor
2638:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2639:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2640:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_Disable
2641:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_DisableMultipleEvents().
2642:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2643:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_EnableMultipleEvents(XMC_CCU8_SLICE_t *const slice, const uint1
2644:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2645:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableMultipleEvents:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(sli
2646:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->INTE = (uint32_t) mask;
2647:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2648:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2649:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2650:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2651:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Event whose assertion can potentially lead to an interrupt
2652:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2653:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2654:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2655:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2656:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Disables the generation of an interrupt pulse for the event, by clearing CC8yINTE register.\n\n
2657:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Prevents the event from being asserted.
2658:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2659:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2660:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_EnableM
2661:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_DisableMultipleEvents().
2662:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2663:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_DisableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLIC
2664:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2665:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2666:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event))
2667:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2668:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->INTE &= ~(((uint32_t) 1) << ((uint32_t) event));
2669:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2670:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2671:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2672:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2673:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param mask Event mask such that multiple events can be enabled.
2674:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *             Use ::XMC_CCU8_SLICE_MULTI_IRQ_ID_t enum items to create a mask of choice,
2675:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *             using a bit wise OR operation.
2676:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2677:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2678:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2679:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2680:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Disables the generation of an interrupt pulse for the required events, by clearing CC8yINTE reg
2681:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Prevents selected events of the slice from being asserted.
2682:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2683:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2684:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_EnableM
2685:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_DisableEvent().
2686:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2687:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_DisableMultipleEvents(XMC_CCU8_SLICE_t *const slice, const uint
2688:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2689:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableMultipleEvents:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(sl
2690:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->INTE &= ~((uint32_t) mask);
2691:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2692:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2693:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2694:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2695:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Event whose assertion can potentially lead to an interrupt
2696:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2697:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2698:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2699:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2700:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Manually asserts the requested event, by setting CC8ySWS register.\n\n
2701:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * For an event to lead to an interrupt, it must first be enabled and bound to a service request li
2702:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * NVIC node must be enabled as well. This API manually asserts the requested event.
2703:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2704:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2705:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_EnableM
2706:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2707:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IR
2708:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2709:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2710:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));
2711:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2712:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->SWS |= ((uint32_t) 1) << ((uint32_t) event);
2713:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2714:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2715:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2716:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2717:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Asserted event which must be acknowledged.
2718:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2719:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2720:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2721:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2722:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Acknowledges an asserted event, by setting CC8ySWR with respective event flag.\n\n
2723:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2724:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2725:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_SetEvent()<BR>  XMC_CCU8_SLICE_GetEvent().
2726:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2727:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2728:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_ClearEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_
2729:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 343              	 .loc 1 2729 0
 344              	 .cfi_startproc
 345              	 
 346              	 
 347              	 
 348 0000 80B4     	 push {r7}
 349              	.LCFI42:
 350              	 .cfi_def_cfa_offset 4
 351              	 .cfi_offset 7,-4
 352 0002 83B0     	 sub sp,sp,#12
 353              	.LCFI43:
 354              	 .cfi_def_cfa_offset 16
 355 0004 00AF     	 add r7,sp,#0
 356              	.LCFI44:
 357              	 .cfi_def_cfa_register 7
 358 0006 7860     	 str r0,[r7,#4]
 359 0008 0B46     	 mov r3,r1
 360 000a FB70     	 strb r3,[r7,#3]
2730:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2731:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));
2732:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->SWR |= ((uint32_t) 1) << ((uint32_t) event);
 361              	 .loc 1 2732 0
 362 000c 7B68     	 ldr r3,[r7,#4]
 363 000e D3F8B020 	 ldr r2,[r3,#176]
 364 0012 FB78     	 ldrb r3,[r7,#3]
 365 0014 0121     	 movs r1,#1
 366 0016 01FA03F3 	 lsl r3,r1,r3
 367 001a 1A43     	 orrs r2,r2,r3
 368 001c 7B68     	 ldr r3,[r7,#4]
 369 001e C3F8B020 	 str r2,[r3,#176]
2733:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** }
 370              	 .loc 1 2733 0
 371 0022 0C37     	 adds r7,r7,#12
 372              	.LCFI45:
 373              	 .cfi_def_cfa_offset 4
 374 0024 BD46     	 mov sp,r7
 375              	.LCFI46:
 376              	 .cfi_def_cfa_register 13
 377              	 
 378 0026 5DF8047B 	 ldr r7,[sp],#4
 379              	.LCFI47:
 380              	 .cfi_restore 7
 381              	 .cfi_def_cfa_offset 0
 382 002a 7047     	 bx lr
 383              	 .cfi_endproc
 384              	.LFE184:
 386              	 .section .text.XMC_CCU8_SLICE_GetEvent,"ax",%progbits
 387              	 .align 2
 388              	 .thumb
 389              	 .thumb_func
 391              	XMC_CCU8_SLICE_GetEvent:
 392              	.LFB185:
2734:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2735:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2736:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2737:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Event to be evaluated for assertion
2738:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <br>
2739:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *         bool  Returns true if event is set else false is returned.
2740:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2741:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2742:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Evaluates if a given event is asserted or not, by reading CC8yINTS register.\n\n
2743:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Return true if the event is asserted. For a event to be asserted it has to be
2744:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * first enabled. Only if that event is enabled the call to this API is valid.
2745:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * If the Event is enabled and has not yet occurred then a false is returned.
2746:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2747:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2748:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_SetEvent().
2749:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2750:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_SLICE_GetEvent(const XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SL
2751:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 393              	 .loc 1 2751 0
 394              	 .cfi_startproc
 395              	 
 396              	 
 397              	 
 398 0000 80B4     	 push {r7}
 399              	.LCFI48:
 400              	 .cfi_def_cfa_offset 4
 401              	 .cfi_offset 7,-4
 402 0002 83B0     	 sub sp,sp,#12
 403              	.LCFI49:
 404              	 .cfi_def_cfa_offset 16
 405 0004 00AF     	 add r7,sp,#0
 406              	.LCFI50:
 407              	 .cfi_def_cfa_register 7
 408 0006 7860     	 str r0,[r7,#4]
 409 0008 0B46     	 mov r3,r1
 410 000a FB70     	 strb r3,[r7,#3]
2752:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2753:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));
2754:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   return(((uint32_t)(slice->INTS & ((uint32_t)1 << event))) != 0U);
 411              	 .loc 1 2754 0
 412 000c 7B68     	 ldr r3,[r7,#4]
 413 000e D3F8A020 	 ldr r2,[r3,#160]
 414 0012 FB78     	 ldrb r3,[r7,#3]
 415 0014 22FA03F3 	 lsr r3,r2,r3
 416 0018 03F00103 	 and r3,r3,#1
 417 001c 002B     	 cmp r3,#0
 418 001e 14BF     	 ite ne
 419 0020 0123     	 movne r3,#1
 420 0022 0023     	 moveq r3,#0
 421 0024 DBB2     	 uxtb r3,r3
2755:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ccu8.h ****   }
 422              	 .loc 1 2755 0
 423 0026 1846     	 mov r0,r3
 424 0028 0C37     	 adds r7,r7,#12
 425              	.LCFI51:
 426              	 .cfi_def_cfa_offset 4
 427 002a BD46     	 mov sp,r7
 428              	.LCFI52:
 429              	 .cfi_def_cfa_register 13
 430              	 
 431 002c 5DF8047B 	 ldr r7,[sp],#4
 432              	.LCFI53:
 433              	 .cfi_restore 7
 434              	 .cfi_def_cfa_offset 0
 435 0030 7047     	 bx lr
 436              	 .cfi_endproc
 437              	.LFE185:
 439 0032 00BF     	 .section .text.TIMER_GetAppVersion,"ax",%progbits
 440              	 .align 2
 441              	 .global TIMER_GetAppVersion
 442              	 .thumb
 443              	 .thumb_func
 445              	TIMER_GetAppVersion:
 446              	.LFB227:
 447              	 .file 2 "../Dave/Generated/TIMER/timer.c"
   1:../Dave/Generated/TIMER/timer.c **** /**
   2:../Dave/Generated/TIMER/timer.c ****  * @file timer.h
   3:../Dave/Generated/TIMER/timer.c ****  * @date 2015-12-18
   4:../Dave/Generated/TIMER/timer.c ****  *
   5:../Dave/Generated/TIMER/timer.c ****  * NOTE:
   6:../Dave/Generated/TIMER/timer.c ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:../Dave/Generated/TIMER/timer.c ****  *
   8:../Dave/Generated/TIMER/timer.c ****  * @cond
   9:../Dave/Generated/TIMER/timer.c ****  **************************************************************************************************
  10:../Dave/Generated/TIMER/timer.c ****  * TIMER v4.1.10 - Configures the properties of CCU4 or CCU8 peripheral as a timer.
  11:../Dave/Generated/TIMER/timer.c ****  *
  12:../Dave/Generated/TIMER/timer.c ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  13:../Dave/Generated/TIMER/timer.c ****  * All rights reserved.
  14:../Dave/Generated/TIMER/timer.c ****  *
  15:../Dave/Generated/TIMER/timer.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  16:../Dave/Generated/TIMER/timer.c ****  * following conditions are met:
  17:../Dave/Generated/TIMER/timer.c ****  *
  18:../Dave/Generated/TIMER/timer.c ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  19:../Dave/Generated/TIMER/timer.c ****  *   disclaimer.
  20:../Dave/Generated/TIMER/timer.c ****  *
  21:../Dave/Generated/TIMER/timer.c ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  22:../Dave/Generated/TIMER/timer.c ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  23:../Dave/Generated/TIMER/timer.c ****  *
  24:../Dave/Generated/TIMER/timer.c ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  25:../Dave/Generated/TIMER/timer.c ****  *   products derived from this software without specific prior written permission.
  26:../Dave/Generated/TIMER/timer.c ****  *
  27:../Dave/Generated/TIMER/timer.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  28:../Dave/Generated/TIMER/timer.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  29:../Dave/Generated/TIMER/timer.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  30:../Dave/Generated/TIMER/timer.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  31:../Dave/Generated/TIMER/timer.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  32:../Dave/Generated/TIMER/timer.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  33:../Dave/Generated/TIMER/timer.c ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../Dave/Generated/TIMER/timer.c ****  *
  35:../Dave/Generated/TIMER/timer.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  36:../Dave/Generated/TIMER/timer.c ****  * with Infineon Technologies AG (dave@infineon.com).
  37:../Dave/Generated/TIMER/timer.c ****  **************************************************************************************************
  38:../Dave/Generated/TIMER/timer.c ****  *
  39:../Dave/Generated/TIMER/timer.c ****  * Change History
  40:../Dave/Generated/TIMER/timer.c ****  * --------------
  41:../Dave/Generated/TIMER/timer.c ****  *
  42:../Dave/Generated/TIMER/timer.c ****  * 2015-02-16:
  43:../Dave/Generated/TIMER/timer.c ****  *     - Initial version<br>
  44:../Dave/Generated/TIMER/timer.c ****  *
  45:../Dave/Generated/TIMER/timer.c ****  * 2015-05-08:
  46:../Dave/Generated/TIMER/timer.c ****  *     - "initialized" flag is updated in local init before starting the timer<br>
  47:../Dave/Generated/TIMER/timer.c ****  *     - TIMER_GetTime() and TIMER_Clear() are added.<br>
  48:../Dave/Generated/TIMER/timer.c ****  *     - Timer clear is removed from TIMER_Stop() API<br>
  49:../Dave/Generated/TIMER/timer.c ****  *     - Additional condition check for timer state is added in TIMER_SetTimeInterval() API<br>
  50:../Dave/Generated/TIMER/timer.c ****  *     - TIMER_CCU4_lShadowTransfer(), TIMER_CCU8_lShadowTransfer() are updated to use the mask fro
  51:../Dave/Generated/TIMER/timer.c ****  *
  52:../Dave/Generated/TIMER/timer.c ****  * 2015-05-22:
  53:../Dave/Generated/TIMER/timer.c ****  *     -  API name changed
  54:../Dave/Generated/TIMER/timer.c ****  *          a. TIMER_AcknowledgeInterrupt() --> TIMER_ClearEvent()<br>
  55:../Dave/Generated/TIMER/timer.c ****  *
  56:../Dave/Generated/TIMER/timer.c ****  * @endcond
  57:../Dave/Generated/TIMER/timer.c ****  *
  58:../Dave/Generated/TIMER/timer.c ****  */
  59:../Dave/Generated/TIMER/timer.c **** 
  60:../Dave/Generated/TIMER/timer.c **** /**************************************************************************************************
  61:../Dave/Generated/TIMER/timer.c ****  * HEADER FILES
  62:../Dave/Generated/TIMER/timer.c ****  **************************************************************************************************
  63:../Dave/Generated/TIMER/timer.c **** #include "timer.h"
  64:../Dave/Generated/TIMER/timer.c **** 
  65:../Dave/Generated/TIMER/timer.c **** /**************************************************************************************************
  66:../Dave/Generated/TIMER/timer.c ****  * MACROS
  67:../Dave/Generated/TIMER/timer.c ****  **************************************************************************************************
  68:../Dave/Generated/TIMER/timer.c **** #define TIMER_CMP_100_DUTY             ((uint16_t)0) /* Compare value for 100% duty cycle */
  69:../Dave/Generated/TIMER/timer.c **** #define TIMER_RESOLUTION_SEC_TO_MICRO  (100000000U)  /* Convert the resolution from sec to usec, by
  70:../Dave/Generated/TIMER/timer.c ****                                                       scale factor */
  71:../Dave/Generated/TIMER/timer.c **** #define TIMER_PRESCALER_MAX            (15U)      /* Maximum prescaler values allowed */
  72:../Dave/Generated/TIMER/timer.c **** #define TIMER_PERIOD_16BIT_MAX         (0xFFFFU)  /* Maximum period value */
  73:../Dave/Generated/TIMER/timer.c **** #define TIMER_PERIOD_MIN               (0x1U)     /* Minimum period value */
  74:../Dave/Generated/TIMER/timer.c **** #define TIMER_CLK_SCALE_FACTOR         (32U)      /* Scale factor used during calculation of the "T
  75:../Dave/Generated/TIMER/timer.c **** 
  76:../Dave/Generated/TIMER/timer.c **** /**************************************************************************************************
  77:../Dave/Generated/TIMER/timer.c ****  * LOCAL DATA
  78:../Dave/Generated/TIMER/timer.c ****  **************************************************************************************************
  79:../Dave/Generated/TIMER/timer.c **** 
  80:../Dave/Generated/TIMER/timer.c **** /**************************************************************************************************
  81:../Dave/Generated/TIMER/timer.c ****  * LOCAL ROUTINES
  82:../Dave/Generated/TIMER/timer.c ****  **************************************************************************************************
  83:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU4_USED
  84:../Dave/Generated/TIMER/timer.c **** TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr);
  85:../Dave/Generated/TIMER/timer.c **** void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr);
  86:../Dave/Generated/TIMER/timer.c **** #endif
  87:../Dave/Generated/TIMER/timer.c **** 
  88:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU8_USED
  89:../Dave/Generated/TIMER/timer.c **** TIMER_STATUS_t TIMER_CCU8_lInit(TIMER_t* const handle_ptr);
  90:../Dave/Generated/TIMER/timer.c **** void TIMER_CCU8_lShadowTransfer(TIMER_t* const handle_ptr);
  91:../Dave/Generated/TIMER/timer.c **** #endif
  92:../Dave/Generated/TIMER/timer.c **** 
  93:../Dave/Generated/TIMER/timer.c ****  /*************************************************************************************************
  94:../Dave/Generated/TIMER/timer.c ****  * API IMPLEMENTATION
  95:../Dave/Generated/TIMER/timer.c ****  **************************************************************************************************
  96:../Dave/Generated/TIMER/timer.c ****  /* Returns the version of the TIMER APP.
  97:../Dave/Generated/TIMER/timer.c ****  */
  98:../Dave/Generated/TIMER/timer.c **** DAVE_APP_VERSION_t TIMER_GetAppVersion(void)
  99:../Dave/Generated/TIMER/timer.c **** {
 448              	 .loc 2 99 0
 449              	 .cfi_startproc
 450              	 
 451              	 
 452              	 
 453 0000 80B4     	 push {r7}
 454              	.LCFI54:
 455              	 .cfi_def_cfa_offset 4
 456              	 .cfi_offset 7,-4
 457 0002 83B0     	 sub sp,sp,#12
 458              	.LCFI55:
 459              	 .cfi_def_cfa_offset 16
 460 0004 00AF     	 add r7,sp,#0
 461              	.LCFI56:
 462              	 .cfi_def_cfa_register 7
 100:../Dave/Generated/TIMER/timer.c ****   DAVE_APP_VERSION_t version;
 101:../Dave/Generated/TIMER/timer.c **** 
 102:../Dave/Generated/TIMER/timer.c ****   version.major = TIMER_MAJOR_VERSION;
 463              	 .loc 2 102 0
 464 0006 0423     	 movs r3,#4
 465 0008 3B70     	 strb r3,[r7]
 103:../Dave/Generated/TIMER/timer.c ****   version.minor = TIMER_MINOR_VERSION;
 466              	 .loc 2 103 0
 467 000a 0123     	 movs r3,#1
 468 000c 7B70     	 strb r3,[r7,#1]
 104:../Dave/Generated/TIMER/timer.c ****   version.patch = TIMER_PATCH_VERSION;
 469              	 .loc 2 104 0
 470 000e 0A23     	 movs r3,#10
 471 0010 BB70     	 strb r3,[r7,#2]
 105:../Dave/Generated/TIMER/timer.c **** 
 106:../Dave/Generated/TIMER/timer.c ****   return version;
 472              	 .loc 2 106 0
 473 0012 3B1D     	 adds r3,r7,#4
 474 0014 3A46     	 mov r2,r7
 475 0016 1268     	 ldr r2,[r2]
 476 0018 1146     	 mov r1,r2
 477 001a 1980     	 strh r1,[r3]
 478 001c 0233     	 adds r3,r3,#2
 479 001e 120C     	 lsrs r2,r2,#16
 480 0020 1A70     	 strb r2,[r3]
 481 0022 0023     	 movs r3,#0
 482 0024 3A79     	 ldrb r2,[r7,#4]
 483 0026 62F30703 	 bfi r3,r2,#0,#8
 484 002a 7A79     	 ldrb r2,[r7,#5]
 485 002c 62F30F23 	 bfi r3,r2,#8,#8
 486 0030 BA79     	 ldrb r2,[r7,#6]
 487 0032 62F31743 	 bfi r3,r2,#16,#8
 107:../Dave/Generated/TIMER/timer.c **** }
 488              	 .loc 2 107 0
 489 0036 1846     	 mov r0,r3
 490 0038 0C37     	 adds r7,r7,#12
 491              	.LCFI57:
 492              	 .cfi_def_cfa_offset 4
 493 003a BD46     	 mov sp,r7
 494              	.LCFI58:
 495              	 .cfi_def_cfa_register 13
 496              	 
 497 003c 5DF8047B 	 ldr r7,[sp],#4
 498              	.LCFI59:
 499              	 .cfi_restore 7
 500              	 .cfi_def_cfa_offset 0
 501 0040 7047     	 bx lr
 502              	 .cfi_endproc
 503              	.LFE227:
 505 0042 00BF     	 .section .text.TIMER_Init,"ax",%progbits
 506              	 .align 2
 507              	 .global TIMER_Init
 508              	 .thumb
 509              	 .thumb_func
 511              	TIMER_Init:
 512              	.LFB228:
 108:../Dave/Generated/TIMER/timer.c **** 
 109:../Dave/Generated/TIMER/timer.c **** /*
 110:../Dave/Generated/TIMER/timer.c ****  * This function initializes a TIMER APP based on user configuration.
 111:../Dave/Generated/TIMER/timer.c ****  *
 112:../Dave/Generated/TIMER/timer.c ****  */
 113:../Dave/Generated/TIMER/timer.c **** TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
 114:../Dave/Generated/TIMER/timer.c **** {
 513              	 .loc 2 114 0
 514              	 .cfi_startproc
 515              	 
 516              	 
 517 0000 80B5     	 push {r7,lr}
 518              	.LCFI60:
 519              	 .cfi_def_cfa_offset 8
 520              	 .cfi_offset 7,-8
 521              	 .cfi_offset 14,-4
 522 0002 84B0     	 sub sp,sp,#16
 523              	.LCFI61:
 524              	 .cfi_def_cfa_offset 24
 525 0004 00AF     	 add r7,sp,#0
 526              	.LCFI62:
 527              	 .cfi_def_cfa_register 7
 528 0006 7860     	 str r0,[r7,#4]
 115:../Dave/Generated/TIMER/timer.c ****   TIMER_STATUS_t status;
 116:../Dave/Generated/TIMER/timer.c **** 
 117:../Dave/Generated/TIMER/timer.c ****   XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));
 118:../Dave/Generated/TIMER/timer.c **** 
 119:../Dave/Generated/TIMER/timer.c ****   status = TIMER_STATUS_SUCCESS;
 529              	 .loc 2 119 0
 530 0008 0023     	 movs r3,#0
 531 000a FB73     	 strb r3,[r7,#15]
 120:../Dave/Generated/TIMER/timer.c ****   /* Check for APP instance is initialized or not */
 121:../Dave/Generated/TIMER/timer.c ****   if (false == handle_ptr->initialized)
 532              	 .loc 2 121 0
 533 000c 7B68     	 ldr r3,[r7,#4]
 534 000e 93F82630 	 ldrb r3,[r3,#38]
 535 0012 83F00103 	 eor r3,r3,#1
 536 0016 DBB2     	 uxtb r3,r3
 537 0018 002B     	 cmp r3,#0
 538 001a 09D0     	 beq .L16
 122:../Dave/Generated/TIMER/timer.c ****   {
 123:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU4_USED
 124:../Dave/Generated/TIMER/timer.c ****     if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 125:../Dave/Generated/TIMER/timer.c ****     {
 126:../Dave/Generated/TIMER/timer.c ****       /* Configure CCU4 timer for the required time tick settings */
 127:../Dave/Generated/TIMER/timer.c ****       status = TIMER_CCU4_lInit(handle_ptr);
 128:../Dave/Generated/TIMER/timer.c ****     }
 129:../Dave/Generated/TIMER/timer.c **** #endif
 130:../Dave/Generated/TIMER/timer.c **** 
 131:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU8_USED
 132:../Dave/Generated/TIMER/timer.c ****     if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 539              	 .loc 2 132 0
 540 001c 7B68     	 ldr r3,[r7,#4]
 541 001e 93F82130 	 ldrb r3,[r3,#33]
 542 0022 012B     	 cmp r3,#1
 543 0024 04D1     	 bne .L16
 133:../Dave/Generated/TIMER/timer.c ****     {
 134:../Dave/Generated/TIMER/timer.c ****       /* Configure CCU8 timer for the required time tick settings */
 135:../Dave/Generated/TIMER/timer.c ****       status = TIMER_CCU8_lInit(handle_ptr);
 544              	 .loc 2 135 0
 545 0026 7868     	 ldr r0,[r7,#4]
 546 0028 FFF7FEFF 	 bl TIMER_CCU8_lInit
 547 002c 0346     	 mov r3,r0
 548 002e FB73     	 strb r3,[r7,#15]
 549              	.L16:
 136:../Dave/Generated/TIMER/timer.c ****     }
 137:../Dave/Generated/TIMER/timer.c **** #endif
 138:../Dave/Generated/TIMER/timer.c ****   }
 139:../Dave/Generated/TIMER/timer.c **** 
 140:../Dave/Generated/TIMER/timer.c ****   return (status);
 550              	 .loc 2 140 0
 551 0030 FB7B     	 ldrb r3,[r7,#15]
 141:../Dave/Generated/TIMER/timer.c **** }
 552              	 .loc 2 141 0
 553 0032 1846     	 mov r0,r3
 554 0034 1037     	 adds r7,r7,#16
 555              	.LCFI63:
 556              	 .cfi_def_cfa_offset 8
 557 0036 BD46     	 mov sp,r7
 558              	.LCFI64:
 559              	 .cfi_def_cfa_register 13
 560              	 
 561 0038 80BD     	 pop {r7,pc}
 562              	 .cfi_endproc
 563              	.LFE228:
 565 003a 00BF     	 .section .text.TIMER_Start,"ax",%progbits
 566              	 .align 2
 567              	 .global TIMER_Start
 568              	 .thumb
 569              	 .thumb_func
 571              	TIMER_Start:
 572              	.LFB229:
 142:../Dave/Generated/TIMER/timer.c **** 
 143:../Dave/Generated/TIMER/timer.c **** /*
 144:../Dave/Generated/TIMER/timer.c ****  * This function starts the timer to generate the events for the specified time_interval value
 145:../Dave/Generated/TIMER/timer.c ****  */
 146:../Dave/Generated/TIMER/timer.c **** TIMER_STATUS_t TIMER_Start(TIMER_t  *const handle_ptr)
 147:../Dave/Generated/TIMER/timer.c **** {
 573              	 .loc 2 147 0
 574              	 .cfi_startproc
 575              	 
 576              	 
 577 0000 80B5     	 push {r7,lr}
 578              	.LCFI65:
 579              	 .cfi_def_cfa_offset 8
 580              	 .cfi_offset 7,-8
 581              	 .cfi_offset 14,-4
 582 0002 84B0     	 sub sp,sp,#16
 583              	.LCFI66:
 584              	 .cfi_def_cfa_offset 24
 585 0004 00AF     	 add r7,sp,#0
 586              	.LCFI67:
 587              	 .cfi_def_cfa_register 7
 588 0006 7860     	 str r0,[r7,#4]
 148:../Dave/Generated/TIMER/timer.c ****   TIMER_STATUS_t status;
 149:../Dave/Generated/TIMER/timer.c **** 
 150:../Dave/Generated/TIMER/timer.c ****   XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));
 151:../Dave/Generated/TIMER/timer.c **** 
 152:../Dave/Generated/TIMER/timer.c ****   /* Check for APP instance is initialized or not */
 153:../Dave/Generated/TIMER/timer.c ****   if (true == handle_ptr->initialized)
 589              	 .loc 2 153 0
 590 0008 7B68     	 ldr r3,[r7,#4]
 591 000a 93F82630 	 ldrb r3,[r3,#38]
 592 000e 002B     	 cmp r3,#0
 593 0010 0CD0     	 beq .L19
 154:../Dave/Generated/TIMER/timer.c ****   {
 155:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU4_USED
 156:../Dave/Generated/TIMER/timer.c ****     if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 157:../Dave/Generated/TIMER/timer.c ****     {
 158:../Dave/Generated/TIMER/timer.c ****       /* Start the timer manually */
 159:../Dave/Generated/TIMER/timer.c ****       XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 160:../Dave/Generated/TIMER/timer.c ****     }
 161:../Dave/Generated/TIMER/timer.c **** #endif
 162:../Dave/Generated/TIMER/timer.c **** 
 163:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU8_USED
 164:../Dave/Generated/TIMER/timer.c ****     if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 594              	 .loc 2 164 0
 595 0012 7B68     	 ldr r3,[r7,#4]
 596 0014 93F82130 	 ldrb r3,[r3,#33]
 597 0018 012B     	 cmp r3,#1
 598 001a 04D1     	 bne .L20
 165:../Dave/Generated/TIMER/timer.c ****        {
 166:../Dave/Generated/TIMER/timer.c ****       /* Start the timer manually */
 167:../Dave/Generated/TIMER/timer.c ****       XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
 599              	 .loc 2 167 0
 600 001c 7B68     	 ldr r3,[r7,#4]
 601 001e 5B69     	 ldr r3,[r3,#20]
 602 0020 1846     	 mov r0,r3
 603 0022 FFF7FEFF 	 bl XMC_CCU8_SLICE_StartTimer
 604              	.L20:
 168:../Dave/Generated/TIMER/timer.c ****        }
 169:../Dave/Generated/TIMER/timer.c **** #endif
 170:../Dave/Generated/TIMER/timer.c ****     status = TIMER_STATUS_SUCCESS;
 605              	 .loc 2 170 0
 606 0026 0023     	 movs r3,#0
 607 0028 FB73     	 strb r3,[r7,#15]
 608 002a 01E0     	 b .L21
 609              	.L19:
 171:../Dave/Generated/TIMER/timer.c ****   }
 172:../Dave/Generated/TIMER/timer.c ****   else
 173:../Dave/Generated/TIMER/timer.c ****   {
 174:../Dave/Generated/TIMER/timer.c ****     status = TIMER_STATUS_FAILURE;
 610              	 .loc 2 174 0
 611 002c 0123     	 movs r3,#1
 612 002e FB73     	 strb r3,[r7,#15]
 613              	.L21:
 175:../Dave/Generated/TIMER/timer.c ****   }
 176:../Dave/Generated/TIMER/timer.c **** 
 177:../Dave/Generated/TIMER/timer.c ****   return (status);
 614              	 .loc 2 177 0
 615 0030 FB7B     	 ldrb r3,[r7,#15]
 178:../Dave/Generated/TIMER/timer.c **** }
 616              	 .loc 2 178 0
 617 0032 1846     	 mov r0,r3
 618 0034 1037     	 adds r7,r7,#16
 619              	.LCFI68:
 620              	 .cfi_def_cfa_offset 8
 621 0036 BD46     	 mov sp,r7
 622              	.LCFI69:
 623              	 .cfi_def_cfa_register 13
 624              	 
 625 0038 80BD     	 pop {r7,pc}
 626              	 .cfi_endproc
 627              	.LFE229:
 629 003a 00BF     	 .section .text.TIMER_Stop,"ax",%progbits
 630              	 .align 2
 631              	 .global TIMER_Stop
 632              	 .thumb
 633              	 .thumb_func
 635              	TIMER_Stop:
 636              	.LFB230:
 179:../Dave/Generated/TIMER/timer.c **** 
 180:../Dave/Generated/TIMER/timer.c **** /*
 181:../Dave/Generated/TIMER/timer.c ****  * This function stops and clears the timer
 182:../Dave/Generated/TIMER/timer.c ****  */
 183:../Dave/Generated/TIMER/timer.c **** TIMER_STATUS_t TIMER_Stop(TIMER_t  *const handle_ptr)
 184:../Dave/Generated/TIMER/timer.c **** {
 637              	 .loc 2 184 0
 638              	 .cfi_startproc
 639              	 
 640              	 
 641 0000 80B5     	 push {r7,lr}
 642              	.LCFI70:
 643              	 .cfi_def_cfa_offset 8
 644              	 .cfi_offset 7,-8
 645              	 .cfi_offset 14,-4
 646 0002 84B0     	 sub sp,sp,#16
 647              	.LCFI71:
 648              	 .cfi_def_cfa_offset 24
 649 0004 00AF     	 add r7,sp,#0
 650              	.LCFI72:
 651              	 .cfi_def_cfa_register 7
 652 0006 7860     	 str r0,[r7,#4]
 185:../Dave/Generated/TIMER/timer.c ****   TIMER_STATUS_t status;
 186:../Dave/Generated/TIMER/timer.c **** 
 187:../Dave/Generated/TIMER/timer.c ****   XMC_ASSERT("TIMER_Stop:handle_ptr NULL" , (handle_ptr != NULL));
 188:../Dave/Generated/TIMER/timer.c **** 
 189:../Dave/Generated/TIMER/timer.c ****   /* Check whether timer is initialized and in running state */
 190:../Dave/Generated/TIMER/timer.c ****   if ((TIMER_GetTimerStatus(handle_ptr)) && (true == handle_ptr->initialized))
 653              	 .loc 2 190 0
 654 0008 7868     	 ldr r0,[r7,#4]
 655 000a FFF7FEFF 	 bl TIMER_GetTimerStatus
 656 000e 0346     	 mov r3,r0
 657 0010 002B     	 cmp r3,#0
 658 0012 11D0     	 beq .L24
 659              	 .loc 2 190 0 is_stmt 0 discriminator 1
 660 0014 7B68     	 ldr r3,[r7,#4]
 661 0016 93F82630 	 ldrb r3,[r3,#38]
 662 001a 002B     	 cmp r3,#0
 663 001c 0CD0     	 beq .L24
 191:../Dave/Generated/TIMER/timer.c ****   {
 192:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU4_USED
 193:../Dave/Generated/TIMER/timer.c ****     if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 194:../Dave/Generated/TIMER/timer.c ****     {
 195:../Dave/Generated/TIMER/timer.c ****       /* Stops the timer */
 196:../Dave/Generated/TIMER/timer.c ****       XMC_CCU4_SLICE_StopTimer(handle_ptr->ccu4_slice_ptr);
 197:../Dave/Generated/TIMER/timer.c ****     }
 198:../Dave/Generated/TIMER/timer.c **** #endif
 199:../Dave/Generated/TIMER/timer.c **** 
 200:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU8_USED
 201:../Dave/Generated/TIMER/timer.c ****     if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 664              	 .loc 2 201 0 is_stmt 1
 665 001e 7B68     	 ldr r3,[r7,#4]
 666 0020 93F82130 	 ldrb r3,[r3,#33]
 667 0024 012B     	 cmp r3,#1
 668 0026 04D1     	 bne .L25
 202:../Dave/Generated/TIMER/timer.c ****        {
 203:../Dave/Generated/TIMER/timer.c ****       /* Stops the timer */
 204:../Dave/Generated/TIMER/timer.c ****       XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
 669              	 .loc 2 204 0
 670 0028 7B68     	 ldr r3,[r7,#4]
 671 002a 5B69     	 ldr r3,[r3,#20]
 672 002c 1846     	 mov r0,r3
 673 002e FFF7FEFF 	 bl XMC_CCU8_SLICE_StopTimer
 674              	.L25:
 205:../Dave/Generated/TIMER/timer.c ****        }
 206:../Dave/Generated/TIMER/timer.c **** #endif
 207:../Dave/Generated/TIMER/timer.c ****     status = TIMER_STATUS_SUCCESS;
 675              	 .loc 2 207 0
 676 0032 0023     	 movs r3,#0
 677 0034 FB73     	 strb r3,[r7,#15]
 678 0036 01E0     	 b .L26
 679              	.L24:
 208:../Dave/Generated/TIMER/timer.c ****   }
 209:../Dave/Generated/TIMER/timer.c ****   else
 210:../Dave/Generated/TIMER/timer.c ****   {
 211:../Dave/Generated/TIMER/timer.c ****     status = TIMER_STATUS_FAILURE;
 680              	 .loc 2 211 0
 681 0038 0123     	 movs r3,#1
 682 003a FB73     	 strb r3,[r7,#15]
 683              	.L26:
 212:../Dave/Generated/TIMER/timer.c ****   }
 213:../Dave/Generated/TIMER/timer.c **** 
 214:../Dave/Generated/TIMER/timer.c ****   return (status);
 684              	 .loc 2 214 0
 685 003c FB7B     	 ldrb r3,[r7,#15]
 215:../Dave/Generated/TIMER/timer.c **** }
 686              	 .loc 2 215 0
 687 003e 1846     	 mov r0,r3
 688 0040 1037     	 adds r7,r7,#16
 689              	.LCFI73:
 690              	 .cfi_def_cfa_offset 8
 691 0042 BD46     	 mov sp,r7
 692              	.LCFI74:
 693              	 .cfi_def_cfa_register 13
 694              	 
 695 0044 80BD     	 pop {r7,pc}
 696              	 .cfi_endproc
 697              	.LFE230:
 699 0046 00BF     	 .section .text.TIMER_GetTimerStatus,"ax",%progbits
 700              	 .align 2
 701              	 .global TIMER_GetTimerStatus
 702              	 .thumb
 703              	 .thumb_func
 705              	TIMER_GetTimerStatus:
 706              	.LFB231:
 216:../Dave/Generated/TIMER/timer.c **** 
 217:../Dave/Generated/TIMER/timer.c **** /*
 218:../Dave/Generated/TIMER/timer.c ****  * This function returns the status of the timer
 219:../Dave/Generated/TIMER/timer.c ****  */
 220:../Dave/Generated/TIMER/timer.c **** bool TIMER_GetTimerStatus(TIMER_t  *const handle_ptr)
 221:../Dave/Generated/TIMER/timer.c **** {
 707              	 .loc 2 221 0
 708              	 .cfi_startproc
 709              	 
 710              	 
 711 0000 80B5     	 push {r7,lr}
 712              	.LCFI75:
 713              	 .cfi_def_cfa_offset 8
 714              	 .cfi_offset 7,-8
 715              	 .cfi_offset 14,-4
 716 0002 84B0     	 sub sp,sp,#16
 717              	.LCFI76:
 718              	 .cfi_def_cfa_offset 24
 719 0004 00AF     	 add r7,sp,#0
 720              	.LCFI77:
 721              	 .cfi_def_cfa_register 7
 722 0006 7860     	 str r0,[r7,#4]
 222:../Dave/Generated/TIMER/timer.c ****   bool status;
 223:../Dave/Generated/TIMER/timer.c **** 
 224:../Dave/Generated/TIMER/timer.c ****   XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));
 225:../Dave/Generated/TIMER/timer.c **** 
 226:../Dave/Generated/TIMER/timer.c ****   status = false;
 723              	 .loc 2 226 0
 724 0008 0023     	 movs r3,#0
 725 000a FB73     	 strb r3,[r7,#15]
 227:../Dave/Generated/TIMER/timer.c **** 
 228:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU4_USED
 229:../Dave/Generated/TIMER/timer.c ****   if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 230:../Dave/Generated/TIMER/timer.c ****   {
 231:../Dave/Generated/TIMER/timer.c ****     /* Returns the current status of the timer */
 232:../Dave/Generated/TIMER/timer.c ****     status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
 233:../Dave/Generated/TIMER/timer.c ****   }
 234:../Dave/Generated/TIMER/timer.c **** #endif
 235:../Dave/Generated/TIMER/timer.c **** 
 236:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU8_USED
 237:../Dave/Generated/TIMER/timer.c ****   if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 726              	 .loc 2 237 0
 727 000c 7B68     	 ldr r3,[r7,#4]
 728 000e 93F82130 	 ldrb r3,[r3,#33]
 729 0012 012B     	 cmp r3,#1
 730 0014 06D1     	 bne .L29
 238:../Dave/Generated/TIMER/timer.c ****   {
 239:../Dave/Generated/TIMER/timer.c ****     /* Returns the current status of the timer */
 240:../Dave/Generated/TIMER/timer.c ****     status = XMC_CCU8_SLICE_IsTimerRunning(handle_ptr->ccu8_slice_ptr);
 731              	 .loc 2 240 0
 732 0016 7B68     	 ldr r3,[r7,#4]
 733 0018 5B69     	 ldr r3,[r3,#20]
 734 001a 1846     	 mov r0,r3
 735 001c FFF7FEFF 	 bl XMC_CCU8_SLICE_IsTimerRunning
 736 0020 0346     	 mov r3,r0
 737 0022 FB73     	 strb r3,[r7,#15]
 738              	.L29:
 241:../Dave/Generated/TIMER/timer.c ****   }
 242:../Dave/Generated/TIMER/timer.c **** #endif
 243:../Dave/Generated/TIMER/timer.c **** 
 244:../Dave/Generated/TIMER/timer.c ****   return (status);
 739              	 .loc 2 244 0
 740 0024 FB7B     	 ldrb r3,[r7,#15]
 245:../Dave/Generated/TIMER/timer.c **** }
 741              	 .loc 2 245 0
 742 0026 1846     	 mov r0,r3
 743 0028 1037     	 adds r7,r7,#16
 744              	.LCFI78:
 745              	 .cfi_def_cfa_offset 8
 746 002a BD46     	 mov sp,r7
 747              	.LCFI79:
 748              	 .cfi_def_cfa_register 13
 749              	 
 750 002c 80BD     	 pop {r7,pc}
 751              	 .cfi_endproc
 752              	.LFE231:
 754              	 .global __aeabi_uldivmod
 755 002e 00BF     	 .section .text.TIMER_SetTimeInterval,"ax",%progbits
 756              	 .align 2
 757              	 .global TIMER_SetTimeInterval
 758              	 .thumb
 759              	 .thumb_func
 761              	TIMER_SetTimeInterval:
 762              	.LFB232:
 246:../Dave/Generated/TIMER/timer.c **** 
 247:../Dave/Generated/TIMER/timer.c **** /*
 248:../Dave/Generated/TIMER/timer.c ****  * This function changes the PWM period which in turn changes the time tick interval value by check
 249:../Dave/Generated/TIMER/timer.c ****  * the given time tick value is within supported range.
 250:../Dave/Generated/TIMER/timer.c ****  */
 251:../Dave/Generated/TIMER/timer.c **** TIMER_STATUS_t TIMER_SetTimeInterval(TIMER_t  *const handle_ptr, uint32_t time_interval)
 252:../Dave/Generated/TIMER/timer.c **** {
 763              	 .loc 2 252 0
 764              	 .cfi_startproc
 765              	 
 766              	 
 767 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 768              	.LCFI80:
 769              	 .cfi_def_cfa_offset 20
 770              	 .cfi_offset 4,-20
 771              	 .cfi_offset 5,-16
 772              	 .cfi_offset 6,-12
 773              	 .cfi_offset 7,-8
 774              	 .cfi_offset 14,-4
 775 0002 87B0     	 sub sp,sp,#28
 776              	.LCFI81:
 777              	 .cfi_def_cfa_offset 48
 778 0004 00AF     	 add r7,sp,#0
 779              	.LCFI82:
 780              	 .cfi_def_cfa_register 7
 781 0006 7860     	 str r0,[r7,#4]
 782 0008 3960     	 str r1,[r7]
 253:../Dave/Generated/TIMER/timer.c ****   TIMER_STATUS_t status;
 254:../Dave/Generated/TIMER/timer.c ****   uint32_t lfrequency;
 255:../Dave/Generated/TIMER/timer.c ****   uint32_t lprescaler;
 256:../Dave/Generated/TIMER/timer.c **** 
 257:../Dave/Generated/TIMER/timer.c ****   XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));
 258:../Dave/Generated/TIMER/timer.c **** 
 259:../Dave/Generated/TIMER/timer.c ****   status = TIMER_STATUS_FAILURE;
 783              	 .loc 2 259 0
 784 000a 0123     	 movs r3,#1
 785 000c FB75     	 strb r3,[r7,#23]
 260:../Dave/Generated/TIMER/timer.c **** 
 261:../Dave/Generated/TIMER/timer.c ****   if (false == TIMER_GetTimerStatus(handle_ptr))
 786              	 .loc 2 261 0
 787 000e 7868     	 ldr r0,[r7,#4]
 788 0010 FFF7FEFF 	 bl TIMER_GetTimerStatus
 789 0014 0346     	 mov r3,r0
 790 0016 83F00103 	 eor r3,r3,#1
 791 001a DBB2     	 uxtb r3,r3
 792 001c 002B     	 cmp r3,#0
 793 001e 79D0     	 beq .L32
 262:../Dave/Generated/TIMER/timer.c ****   {
 263:../Dave/Generated/TIMER/timer.c ****     /* check for time_interval range */
 264:../Dave/Generated/TIMER/timer.c ****     if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_ma
 794              	 .loc 2 264 0
 795 0020 7B68     	 ldr r3,[r7,#4]
 796 0022 9A68     	 ldr r2,[r3,#8]
 797 0024 3B68     	 ldr r3,[r7]
 798 0026 9A42     	 cmp r2,r3
 799 0028 74D8     	 bhi .L32
 800              	 .loc 2 264 0 is_stmt 0 discriminator 1
 801 002a 7B68     	 ldr r3,[r7,#4]
 802 002c 5A68     	 ldr r2,[r3,#4]
 803 002e 3B68     	 ldr r3,[r7]
 804 0030 9A42     	 cmp r2,r3
 805 0032 6FD3     	 bcc .L32
 265:../Dave/Generated/TIMER/timer.c ****     {
 266:../Dave/Generated/TIMER/timer.c ****       /* Initialize the prescaler */
 267:../Dave/Generated/TIMER/timer.c ****       lprescaler = 0U;
 806              	 .loc 2 267 0 is_stmt 1
 807 0034 0023     	 movs r3,#0
 808 0036 3B61     	 str r3,[r7,#16]
 268:../Dave/Generated/TIMER/timer.c ****       while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler))
 809              	 .loc 2 268 0
 810 0038 02E0     	 b .L33
 811              	.L34:
 269:../Dave/Generated/TIMER/timer.c ****       {
 270:../Dave/Generated/TIMER/timer.c ****         lprescaler++;
 812              	 .loc 2 270 0
 813 003a 3B69     	 ldr r3,[r7,#16]
 814 003c 0133     	 adds r3,r3,#1
 815 003e 3B61     	 str r3,[r7,#16]
 816              	.L33:
 268:../Dave/Generated/TIMER/timer.c ****       while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler))
 817              	 .loc 2 268 0
 818 0040 7B68     	 ldr r3,[r7,#4]
 819 0042 5B68     	 ldr r3,[r3,#4]
 820 0044 3A69     	 ldr r2,[r7,#16]
 821 0046 C2F10F02 	 rsb r2,r2,#15
 822 004a 23FA02F2 	 lsr r2,r3,r2
 823 004e 3B68     	 ldr r3,[r7]
 824 0050 9A42     	 cmp r2,r3
 825 0052 F2D3     	 bcc .L34
 271:../Dave/Generated/TIMER/timer.c ****       }
 272:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU4_USED
 273:../Dave/Generated/TIMER/timer.c ****       if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 274:../Dave/Generated/TIMER/timer.c ****       {
 275:../Dave/Generated/TIMER/timer.c ****         lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
 276:../Dave/Generated/TIMER/timer.c ****         handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
 277:../Dave/Generated/TIMER/timer.c ****         /* Calculate the period register for the required time_interval value */
 278:../Dave/Generated/TIMER/timer.c ****         handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 279:../Dave/Generated/TIMER/timer.c ****                                                handle_ptr->ccu4_slice_config_ptr->prescaler_initval
 280:../Dave/Generated/TIMER/timer.c ****                                               TIMER_RESOLUTION_SEC_TO_MICRO);
 281:../Dave/Generated/TIMER/timer.c ****         /* Actual timer period values is Period_reg_val+1U */
 282:../Dave/Generated/TIMER/timer.c ****         if (handle_ptr->period_value > TIMER_PERIOD_MIN)
 283:../Dave/Generated/TIMER/timer.c ****         {
 284:../Dave/Generated/TIMER/timer.c ****           (handle_ptr->period_value)--;
 285:../Dave/Generated/TIMER/timer.c ****         }
 286:../Dave/Generated/TIMER/timer.c ****         /* Update the prescaler */
 287:../Dave/Generated/TIMER/timer.c ****         XMC_CCU4_SLICE_SetPrescaler(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr->
 288:../Dave/Generated/TIMER/timer.c ****         /* update period, compare and prescaler values */
 289:../Dave/Generated/TIMER/timer.c ****         TIMER_CCU4_lShadowTransfer(handle_ptr);
 290:../Dave/Generated/TIMER/timer.c ****         /* Update the status */
 291:../Dave/Generated/TIMER/timer.c ****         status = TIMER_STATUS_SUCCESS;
 292:../Dave/Generated/TIMER/timer.c ****       }
 293:../Dave/Generated/TIMER/timer.c **** #endif
 294:../Dave/Generated/TIMER/timer.c **** 
 295:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU8_USED
 296:../Dave/Generated/TIMER/timer.c ****       if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 826              	 .loc 2 296 0
 827 0054 7B68     	 ldr r3,[r7,#4]
 828 0056 93F82130 	 ldrb r3,[r3,#33]
 829 005a 012B     	 cmp r3,#1
 830 005c 5AD1     	 bne .L32
 297:../Dave/Generated/TIMER/timer.c ****       {
 298:../Dave/Generated/TIMER/timer.c ****         handle_ptr->ccu8_slice_config_ptr->prescaler_initval = lprescaler;
 831              	 .loc 2 298 0
 832 005e 7B68     	 ldr r3,[r7,#4]
 833 0060 DA69     	 ldr r2,[r3,#28]
 834 0062 3B69     	 ldr r3,[r7,#16]
 835 0064 DBB2     	 uxtb r3,r3
 836 0066 03F00F03 	 and r3,r3,#15
 837 006a D9B2     	 uxtb r1,r3
 838 006c 137B     	 ldrb r3,[r2,#12]
 839 006e 61F30303 	 bfi r3,r1,#0,#4
 840 0072 1373     	 strb r3,[r2,#12]
 299:../Dave/Generated/TIMER/timer.c ****         lfrequency = handle_ptr->global_ccu8_handler->module_frequency;
 841              	 .loc 2 299 0
 842 0074 7B68     	 ldr r3,[r7,#4]
 843 0076 1B69     	 ldr r3,[r3,#16]
 844 0078 1B68     	 ldr r3,[r3]
 845 007a FB60     	 str r3,[r7,#12]
 300:../Dave/Generated/TIMER/timer.c ****         /* Calculate the period register for the required time_interval value */
 301:../Dave/Generated/TIMER/timer.c ****         handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 846              	 .loc 2 301 0
 847 007c 3B68     	 ldr r3,[r7]
 848 007e 1846     	 mov r0,r3
 849 0080 4FF00001 	 mov r1,#0
 850 0084 FB68     	 ldr r3,[r7,#12]
 851 0086 1A46     	 mov r2,r3
 852 0088 4FF00003 	 mov r3,#0
 853 008c 02FB01FE 	 mul lr,r2,r1
 854 0090 00FB03F6 	 mul r6,r0,r3
 855 0094 7644     	 add r6,r6,lr
 856 0096 A0FB0223 	 umull r2,r3,r0,r2
 857 009a F118     	 adds r1,r6,r3
 858 009c 0B46     	 mov r3,r1
 302:../Dave/Generated/TIMER/timer.c ****                                                handle_ptr->ccu8_slice_config_ptr->prescaler_initval
 859              	 .loc 2 302 0
 860 009e 7968     	 ldr r1,[r7,#4]
 861 00a0 C969     	 ldr r1,[r1,#28]
 862 00a2 097B     	 ldrb r1,[r1,#12]
 863 00a4 C1F30301 	 ubfx r1,r1,#0,#4
 864 00a8 C9B2     	 uxtb r1,r1
 301:../Dave/Generated/TIMER/timer.c ****                                                handle_ptr->ccu8_slice_config_ptr->prescaler_initval
 865              	 .loc 2 301 0
 866 00aa C1F12006 	 rsb r6,r1,#32
 867 00ae A1F12000 	 sub r0,r1,#32
 868 00b2 22FA01F4 	 lsr r4,r2,r1
 869 00b6 03FA06F6 	 lsl r6,r3,r6
 870 00ba 3443     	 orrs r4,r4,r6
 871 00bc 23FA00F0 	 lsr r0,r3,r0
 872 00c0 0443     	 orrs r4,r4,r0
 873 00c2 23FA01F5 	 lsr r5,r3,r1
 874              	 .loc 2 302 0
 875 00c6 2046     	 mov r0,r4
 876 00c8 2946     	 mov r1,r5
 877 00ca 15A3     	 adr r3,.L37
 878 00cc D3E90023 	 ldrd r2,[r3]
 879 00d0 FFF7FEFF 	 bl __aeabi_uldivmod
 880 00d4 0246     	 mov r2,r0
 881 00d6 0B46     	 mov r3,r1
 301:../Dave/Generated/TIMER/timer.c ****                                                handle_ptr->ccu8_slice_config_ptr->prescaler_initval
 882              	 .loc 2 301 0
 883 00d8 92B2     	 uxth r2,r2
 884 00da 7B68     	 ldr r3,[r7,#4]
 885 00dc 5A84     	 strh r2,[r3,#34]
 303:../Dave/Generated/TIMER/timer.c ****                                               TIMER_RESOLUTION_SEC_TO_MICRO);
 304:../Dave/Generated/TIMER/timer.c ****         /* Actual timer period values is Period_reg_val+1U */
 305:../Dave/Generated/TIMER/timer.c ****         if (handle_ptr->period_value > TIMER_PERIOD_MIN)
 886              	 .loc 2 305 0
 887 00de 7B68     	 ldr r3,[r7,#4]
 888 00e0 5B8C     	 ldrh r3,[r3,#34]
 889 00e2 012B     	 cmp r3,#1
 890 00e4 05D9     	 bls .L35
 306:../Dave/Generated/TIMER/timer.c ****         {
 307:../Dave/Generated/TIMER/timer.c ****           (handle_ptr->period_value)--;
 891              	 .loc 2 307 0
 892 00e6 7B68     	 ldr r3,[r7,#4]
 893 00e8 5B8C     	 ldrh r3,[r3,#34]
 894 00ea 013B     	 subs r3,r3,#1
 895 00ec 9AB2     	 uxth r2,r3
 896 00ee 7B68     	 ldr r3,[r7,#4]
 897 00f0 5A84     	 strh r2,[r3,#34]
 898              	.L35:
 308:../Dave/Generated/TIMER/timer.c ****         }
 309:../Dave/Generated/TIMER/timer.c ****         /* Update the prescaler */
 310:../Dave/Generated/TIMER/timer.c ****         XMC_CCU8_SLICE_SetPrescaler(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr->
 899              	 .loc 2 310 0
 900 00f2 7B68     	 ldr r3,[r7,#4]
 901 00f4 5A69     	 ldr r2,[r3,#20]
 902 00f6 7B68     	 ldr r3,[r7,#4]
 903 00f8 DB69     	 ldr r3,[r3,#28]
 904 00fa 1B7B     	 ldrb r3,[r3,#12]
 905 00fc C3F30303 	 ubfx r3,r3,#0,#4
 906 0100 DBB2     	 uxtb r3,r3
 907 0102 1046     	 mov r0,r2
 908 0104 1946     	 mov r1,r3
 909 0106 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetPrescaler
 311:../Dave/Generated/TIMER/timer.c ****         /* update period, compare and prescaler values */
 312:../Dave/Generated/TIMER/timer.c ****         TIMER_CCU8_lShadowTransfer(handle_ptr);
 910              	 .loc 2 312 0
 911 010a 7868     	 ldr r0,[r7,#4]
 912 010c FFF7FEFF 	 bl TIMER_CCU8_lShadowTransfer
 313:../Dave/Generated/TIMER/timer.c ****         /* Update the status */
 314:../Dave/Generated/TIMER/timer.c ****         status = TIMER_STATUS_SUCCESS;
 913              	 .loc 2 314 0
 914 0110 0023     	 movs r3,#0
 915 0112 FB75     	 strb r3,[r7,#23]
 916              	.L32:
 315:../Dave/Generated/TIMER/timer.c ****       }
 316:../Dave/Generated/TIMER/timer.c **** #endif
 317:../Dave/Generated/TIMER/timer.c ****     }
 318:../Dave/Generated/TIMER/timer.c ****   }
 319:../Dave/Generated/TIMER/timer.c ****   return (status);
 917              	 .loc 2 319 0
 918 0114 FB7D     	 ldrb r3,[r7,#23]
 320:../Dave/Generated/TIMER/timer.c **** }
 919              	 .loc 2 320 0
 920 0116 1846     	 mov r0,r3
 921 0118 1C37     	 adds r7,r7,#28
 922              	.LCFI83:
 923              	 .cfi_def_cfa_offset 20
 924 011a BD46     	 mov sp,r7
 925              	.LCFI84:
 926              	 .cfi_def_cfa_register 13
 927              	 
 928 011c F0BD     	 pop {r4,r5,r6,r7,pc}
 929              	.L38:
 930 011e 00BF     	 .align 3
 931              	.L37:
 932 0120 00E1F505 	 .word 100000000
 933 0124 00000000 	 .word 0
 934              	 .cfi_endproc
 935              	.LFE232:
 937              	 .section .text.TIMER_GetInterruptStatus,"ax",%progbits
 938              	 .align 2
 939              	 .global TIMER_GetInterruptStatus
 940              	 .thumb
 941              	 .thumb_func
 943              	TIMER_GetInterruptStatus:
 944              	.LFB233:
 321:../Dave/Generated/TIMER/timer.c **** 
 322:../Dave/Generated/TIMER/timer.c **** /*
 323:../Dave/Generated/TIMER/timer.c ****  * This function reads the timer event(period match interrupt) status of the given timer
 324:../Dave/Generated/TIMER/timer.c ****  */
 325:../Dave/Generated/TIMER/timer.c **** bool TIMER_GetInterruptStatus(TIMER_t * const handle_ptr)
 326:../Dave/Generated/TIMER/timer.c **** {
 945              	 .loc 2 326 0
 946              	 .cfi_startproc
 947              	 
 948              	 
 949 0000 80B5     	 push {r7,lr}
 950              	.LCFI85:
 951              	 .cfi_def_cfa_offset 8
 952              	 .cfi_offset 7,-8
 953              	 .cfi_offset 14,-4
 954 0002 84B0     	 sub sp,sp,#16
 955              	.LCFI86:
 956              	 .cfi_def_cfa_offset 24
 957 0004 00AF     	 add r7,sp,#0
 958              	.LCFI87:
 959              	 .cfi_def_cfa_register 7
 960 0006 7860     	 str r0,[r7,#4]
 327:../Dave/Generated/TIMER/timer.c ****   bool status;
 328:../Dave/Generated/TIMER/timer.c ****   XMC_ASSERT("TIMER_GetInterruptStatus:handle_ptr NULL" , (handle_ptr != NULL));
 329:../Dave/Generated/TIMER/timer.c ****   status = false;
 961              	 .loc 2 329 0
 962 0008 0023     	 movs r3,#0
 963 000a FB73     	 strb r3,[r7,#15]
 330:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU4_USED
 331:../Dave/Generated/TIMER/timer.c ****   if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 332:../Dave/Generated/TIMER/timer.c ****   {
 333:../Dave/Generated/TIMER/timer.c ****     /* Reads the interrupt status */
 334:../Dave/Generated/TIMER/timer.c ****     status = XMC_CCU4_SLICE_GetEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH
 335:../Dave/Generated/TIMER/timer.c ****   }
 336:../Dave/Generated/TIMER/timer.c **** #endif
 337:../Dave/Generated/TIMER/timer.c **** 
 338:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU8_USED
 339:../Dave/Generated/TIMER/timer.c ****   if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 964              	 .loc 2 339 0
 965 000c 7B68     	 ldr r3,[r7,#4]
 966 000e 93F82130 	 ldrb r3,[r3,#33]
 967 0012 012B     	 cmp r3,#1
 968 0014 07D1     	 bne .L40
 340:../Dave/Generated/TIMER/timer.c ****   {
 341:../Dave/Generated/TIMER/timer.c ****     /* Reads the interrupt status */
 342:../Dave/Generated/TIMER/timer.c ****     status = XMC_CCU8_SLICE_GetEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH
 969              	 .loc 2 342 0
 970 0016 7B68     	 ldr r3,[r7,#4]
 971 0018 5B69     	 ldr r3,[r3,#20]
 972 001a 1846     	 mov r0,r3
 973 001c 0021     	 movs r1,#0
 974 001e FFF7FEFF 	 bl XMC_CCU8_SLICE_GetEvent
 975 0022 0346     	 mov r3,r0
 976 0024 FB73     	 strb r3,[r7,#15]
 977              	.L40:
 343:../Dave/Generated/TIMER/timer.c ****   }
 344:../Dave/Generated/TIMER/timer.c **** #endif
 345:../Dave/Generated/TIMER/timer.c ****   return (status);
 978              	 .loc 2 345 0
 979 0026 FB7B     	 ldrb r3,[r7,#15]
 346:../Dave/Generated/TIMER/timer.c **** }
 980              	 .loc 2 346 0
 981 0028 1846     	 mov r0,r3
 982 002a 1037     	 adds r7,r7,#16
 983              	.LCFI88:
 984              	 .cfi_def_cfa_offset 8
 985 002c BD46     	 mov sp,r7
 986              	.LCFI89:
 987              	 .cfi_def_cfa_register 13
 988              	 
 989 002e 80BD     	 pop {r7,pc}
 990              	 .cfi_endproc
 991              	.LFE233:
 993              	 .section .text.TIMER_ClearEvent,"ax",%progbits
 994              	 .align 2
 995              	 .global TIMER_ClearEvent
 996              	 .thumb
 997              	 .thumb_func
 999              	TIMER_ClearEvent:
 1000              	.LFB234:
 347:../Dave/Generated/TIMER/timer.c **** 
 348:../Dave/Generated/TIMER/timer.c **** /*
 349:../Dave/Generated/TIMER/timer.c ****  * This function clears the period match interrupt status of the given timer.
 350:../Dave/Generated/TIMER/timer.c ****  */
 351:../Dave/Generated/TIMER/timer.c **** void TIMER_ClearEvent(TIMER_t *const handle_ptr)
 352:../Dave/Generated/TIMER/timer.c **** {
 1001              	 .loc 2 352 0
 1002              	 .cfi_startproc
 1003              	 
 1004              	 
 1005 0000 80B5     	 push {r7,lr}
 1006              	.LCFI90:
 1007              	 .cfi_def_cfa_offset 8
 1008              	 .cfi_offset 7,-8
 1009              	 .cfi_offset 14,-4
 1010 0002 82B0     	 sub sp,sp,#8
 1011              	.LCFI91:
 1012              	 .cfi_def_cfa_offset 16
 1013 0004 00AF     	 add r7,sp,#0
 1014              	.LCFI92:
 1015              	 .cfi_def_cfa_register 7
 1016 0006 7860     	 str r0,[r7,#4]
 353:../Dave/Generated/TIMER/timer.c ****   XMC_ASSERT("TIME_CCU_AcknowledgeInterrupt:handle_ptr NULL" , (handle_ptr != NULL));
 354:../Dave/Generated/TIMER/timer.c **** 
 355:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU4_USED
 356:../Dave/Generated/TIMER/timer.c ****   if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 357:../Dave/Generated/TIMER/timer.c ****   {
 358:../Dave/Generated/TIMER/timer.c ****     /* clears the timer event(period match interrupt) */
 359:../Dave/Generated/TIMER/timer.c ****     XMC_CCU4_SLICE_ClearEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 360:../Dave/Generated/TIMER/timer.c ****   }
 361:../Dave/Generated/TIMER/timer.c **** #endif
 362:../Dave/Generated/TIMER/timer.c **** 
 363:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU8_USED
 364:../Dave/Generated/TIMER/timer.c ****   if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 1017              	 .loc 2 364 0
 1018 0008 7B68     	 ldr r3,[r7,#4]
 1019 000a 93F82130 	 ldrb r3,[r3,#33]
 1020 000e 012B     	 cmp r3,#1
 1021 0010 05D1     	 bne .L42
 365:../Dave/Generated/TIMER/timer.c ****   {
 366:../Dave/Generated/TIMER/timer.c ****     /* clears the timer event(period match interrupt) */
 367:../Dave/Generated/TIMER/timer.c ****     XMC_CCU8_SLICE_ClearEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
 1022              	 .loc 2 367 0
 1023 0012 7B68     	 ldr r3,[r7,#4]
 1024 0014 5B69     	 ldr r3,[r3,#20]
 1025 0016 1846     	 mov r0,r3
 1026 0018 0021     	 movs r1,#0
 1027 001a FFF7FEFF 	 bl XMC_CCU8_SLICE_ClearEvent
 1028              	.L42:
 368:../Dave/Generated/TIMER/timer.c ****   }
 369:../Dave/Generated/TIMER/timer.c **** #endif
 370:../Dave/Generated/TIMER/timer.c **** }
 1029              	 .loc 2 370 0
 1030 001e 0837     	 adds r7,r7,#8
 1031              	.LCFI93:
 1032              	 .cfi_def_cfa_offset 8
 1033 0020 BD46     	 mov sp,r7
 1034              	.LCFI94:
 1035              	 .cfi_def_cfa_register 13
 1036              	 
 1037 0022 80BD     	 pop {r7,pc}
 1038              	 .cfi_endproc
 1039              	.LFE234:
 1041              	 .section .text.TIMER_GetTime,"ax",%progbits
 1042              	 .align 2
 1043              	 .global TIMER_GetTime
 1044              	 .thumb
 1045              	 .thumb_func
 1047              	TIMER_GetTime:
 1048              	.LFB235:
 371:../Dave/Generated/TIMER/timer.c **** 
 372:../Dave/Generated/TIMER/timer.c **** /*
 373:../Dave/Generated/TIMER/timer.c ****  * This function returns the current time value
 374:../Dave/Generated/TIMER/timer.c ****  */
 375:../Dave/Generated/TIMER/timer.c **** uint32_t TIMER_GetTime(TIMER_t *const handle_ptr)
 376:../Dave/Generated/TIMER/timer.c **** {
 1049              	 .loc 2 376 0
 1050              	 .cfi_startproc
 1051              	 
 1052              	 
 1053 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 1054              	.LCFI95:
 1055              	 .cfi_def_cfa_offset 20
 1056              	 .cfi_offset 4,-20
 1057              	 .cfi_offset 5,-16
 1058              	 .cfi_offset 6,-12
 1059              	 .cfi_offset 7,-8
 1060              	 .cfi_offset 14,-4
 1061 0002 87B0     	 sub sp,sp,#28
 1062              	.LCFI96:
 1063              	 .cfi_def_cfa_offset 48
 1064 0004 00AF     	 add r7,sp,#0
 1065              	.LCFI97:
 1066              	 .cfi_def_cfa_register 7
 1067 0006 7860     	 str r0,[r7,#4]
 377:../Dave/Generated/TIMER/timer.c ****   uint32_t ltimer_val;
 378:../Dave/Generated/TIMER/timer.c ****   uint32_t lprescaler;
 379:../Dave/Generated/TIMER/timer.c ****   uint32_t ltime_val;
 380:../Dave/Generated/TIMER/timer.c **** 
 381:../Dave/Generated/TIMER/timer.c ****   XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));
 382:../Dave/Generated/TIMER/timer.c ****   ltime_val = 0U;
 1068              	 .loc 2 382 0
 1069 0008 0023     	 movs r3,#0
 1070 000a 7B61     	 str r3,[r7,#20]
 383:../Dave/Generated/TIMER/timer.c **** 
 384:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU4_USED
 385:../Dave/Generated/TIMER/timer.c ****   if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 386:../Dave/Generated/TIMER/timer.c ****   {
 387:../Dave/Generated/TIMER/timer.c ****     /* Added one to according to the edge aligned mode */
 388:../Dave/Generated/TIMER/timer.c ****     ltimer_val = (uint32_t)XMC_CCU4_SLICE_GetTimerValue(handle_ptr->ccu4_slice_ptr) + 1U;
 389:../Dave/Generated/TIMER/timer.c ****     lprescaler = handle_ptr->ccu4_slice_config_ptr->prescaler_initval;
 390:../Dave/Generated/TIMER/timer.c **** 
 391:../Dave/Generated/TIMER/timer.c ****     /* calculate the time value in micro seconds and scaled with 100 */
 392:../Dave/Generated/TIMER/timer.c ****     ltime_val = (uint32_t)((uint64_t)((uint64_t)ltimer_val * (uint64_t)TIMER_CLK_CONST_SCALED) >> \
 393:../Dave/Generated/TIMER/timer.c ****                            (TIMER_CLK_SCALE_FACTOR - lprescaler));
 394:../Dave/Generated/TIMER/timer.c ****   }
 395:../Dave/Generated/TIMER/timer.c **** #endif
 396:../Dave/Generated/TIMER/timer.c **** 
 397:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU8_USED
 398:../Dave/Generated/TIMER/timer.c ****   if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 1071              	 .loc 2 398 0
 1072 000c 7B68     	 ldr r3,[r7,#4]
 1073 000e 93F82130 	 ldrb r3,[r3,#33]
 1074 0012 012B     	 cmp r3,#1
 1075 0014 31D1     	 bne .L45
 399:../Dave/Generated/TIMER/timer.c ****   {
 400:../Dave/Generated/TIMER/timer.c ****     /* Added one to according to the edge aligned mode */
 401:../Dave/Generated/TIMER/timer.c ****     ltimer_val = (uint32_t)XMC_CCU8_SLICE_GetTimerValue(handle_ptr->ccu8_slice_ptr) + 1U;
 1076              	 .loc 2 401 0
 1077 0016 7B68     	 ldr r3,[r7,#4]
 1078 0018 5B69     	 ldr r3,[r3,#20]
 1079 001a 1846     	 mov r0,r3
 1080 001c FFF7FEFF 	 bl XMC_CCU8_SLICE_GetTimerValue
 1081 0020 0346     	 mov r3,r0
 1082 0022 0133     	 adds r3,r3,#1
 1083 0024 3B61     	 str r3,[r7,#16]
 402:../Dave/Generated/TIMER/timer.c ****     lprescaler = handle_ptr->ccu8_slice_config_ptr->prescaler_initval;
 1084              	 .loc 2 402 0
 1085 0026 7B68     	 ldr r3,[r7,#4]
 1086 0028 DB69     	 ldr r3,[r3,#28]
 1087 002a 1B7B     	 ldrb r3,[r3,#12]
 1088 002c C3F30303 	 ubfx r3,r3,#0,#4
 1089 0030 DBB2     	 uxtb r3,r3
 1090 0032 FB60     	 str r3,[r7,#12]
 403:../Dave/Generated/TIMER/timer.c **** 
 404:../Dave/Generated/TIMER/timer.c ****     /* calculate the time value in micro seconds and scaled with 100 */
 405:../Dave/Generated/TIMER/timer.c ****     ltime_val = (uint32_t)((uint64_t)((uint64_t)ltimer_val * (uint64_t)TIMER_CLK_CONST_SCALED) >> \
 1091              	 .loc 2 405 0
 1092 0034 3B69     	 ldr r3,[r7,#16]
 1093 0036 1A46     	 mov r2,r3
 1094 0038 4FF00003 	 mov r3,#0
 1095 003c 1149     	 ldr r1,.L47
 1096 003e 01FB03F0 	 mul r0,r1,r3
 1097 0042 0021     	 movs r1,#0
 1098 0044 01FB02F1 	 mul r1,r1,r2
 1099 0048 0144     	 add r1,r1,r0
 1100 004a 0E48     	 ldr r0,.L47
 1101 004c A2FB0023 	 umull r2,r3,r2,r0
 1102 0050 1944     	 add r1,r1,r3
 1103 0052 0B46     	 mov r3,r1
 406:../Dave/Generated/TIMER/timer.c ****                            (TIMER_CLK_SCALE_FACTOR - lprescaler));
 1104              	 .loc 2 406 0
 1105 0054 F968     	 ldr r1,[r7,#12]
 1106 0056 C1F12001 	 rsb r1,r1,#32
 405:../Dave/Generated/TIMER/timer.c ****                            (TIMER_CLK_SCALE_FACTOR - lprescaler));
 1107              	 .loc 2 405 0
 1108 005a C1F12006 	 rsb r6,r1,#32
 1109 005e A1F12000 	 sub r0,r1,#32
 1110 0062 22FA01F4 	 lsr r4,r2,r1
 1111 0066 03FA06F6 	 lsl r6,r3,r6
 1112 006a 3443     	 orrs r4,r4,r6
 1113 006c 23FA00F0 	 lsr r0,r3,r0
 1114 0070 0443     	 orrs r4,r4,r0
 1115 0072 23FA01F5 	 lsr r5,r3,r1
 1116 0076 2346     	 mov r3,r4
 1117 0078 7B61     	 str r3,[r7,#20]
 1118              	.L45:
 407:../Dave/Generated/TIMER/timer.c ****   }
 408:../Dave/Generated/TIMER/timer.c **** #endif
 409:../Dave/Generated/TIMER/timer.c **** 
 410:../Dave/Generated/TIMER/timer.c ****   return ltime_val;
 1119              	 .loc 2 410 0
 1120 007a 7B69     	 ldr r3,[r7,#20]
 411:../Dave/Generated/TIMER/timer.c **** }
 1121              	 .loc 2 411 0
 1122 007c 1846     	 mov r0,r3
 1123 007e 1C37     	 adds r7,r7,#28
 1124              	.LCFI98:
 1125              	 .cfi_def_cfa_offset 20
 1126 0080 BD46     	 mov sp,r7
 1127              	.LCFI99:
 1128              	 .cfi_def_cfa_register 13
 1129              	 
 1130 0082 F0BD     	 pop {r4,r5,r6,r7,pc}
 1131              	.L48:
 1132              	 .align 2
 1133              	.L47:
 1134 0084 711CC7B1 	 .word -1312351119
 1135              	 .cfi_endproc
 1136              	.LFE235:
 1138              	 .section .text.TIMER_Clear,"ax",%progbits
 1139              	 .align 2
 1140              	 .global TIMER_Clear
 1141              	 .thumb
 1142              	 .thumb_func
 1144              	TIMER_Clear:
 1145              	.LFB236:
 412:../Dave/Generated/TIMER/timer.c **** 
 413:../Dave/Generated/TIMER/timer.c **** /*
 414:../Dave/Generated/TIMER/timer.c ****  * Clear the timer
 415:../Dave/Generated/TIMER/timer.c ****  */
 416:../Dave/Generated/TIMER/timer.c **** TIMER_STATUS_t TIMER_Clear(TIMER_t *const handle_ptr)
 417:../Dave/Generated/TIMER/timer.c **** {
 1146              	 .loc 2 417 0
 1147              	 .cfi_startproc
 1148              	 
 1149              	 
 1150 0000 80B5     	 push {r7,lr}
 1151              	.LCFI100:
 1152              	 .cfi_def_cfa_offset 8
 1153              	 .cfi_offset 7,-8
 1154              	 .cfi_offset 14,-4
 1155 0002 84B0     	 sub sp,sp,#16
 1156              	.LCFI101:
 1157              	 .cfi_def_cfa_offset 24
 1158 0004 00AF     	 add r7,sp,#0
 1159              	.LCFI102:
 1160              	 .cfi_def_cfa_register 7
 1161 0006 7860     	 str r0,[r7,#4]
 418:../Dave/Generated/TIMER/timer.c ****   TIMER_STATUS_t status;
 419:../Dave/Generated/TIMER/timer.c **** 
 420:../Dave/Generated/TIMER/timer.c ****   XMC_ASSERT("TIMER_Clear:handle_ptr NULL" , (handle_ptr != NULL));
 421:../Dave/Generated/TIMER/timer.c **** 
 422:../Dave/Generated/TIMER/timer.c ****   /* Check for APP instance is initialized or not */
 423:../Dave/Generated/TIMER/timer.c ****   if (true == handle_ptr->initialized)
 1162              	 .loc 2 423 0
 1163 0008 7B68     	 ldr r3,[r7,#4]
 1164 000a 93F82630 	 ldrb r3,[r3,#38]
 1165 000e 002B     	 cmp r3,#0
 1166 0010 0CD0     	 beq .L50
 424:../Dave/Generated/TIMER/timer.c ****   {
 425:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU4_USED
 426:../Dave/Generated/TIMER/timer.c ****     if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 427:../Dave/Generated/TIMER/timer.c ****     {
 428:../Dave/Generated/TIMER/timer.c ****       /* Clear the timer register */
 429:../Dave/Generated/TIMER/timer.c ****       XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 430:../Dave/Generated/TIMER/timer.c ****     }
 431:../Dave/Generated/TIMER/timer.c **** #endif
 432:../Dave/Generated/TIMER/timer.c **** 
 433:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU8_USED
 434:../Dave/Generated/TIMER/timer.c ****     if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 1167              	 .loc 2 434 0
 1168 0012 7B68     	 ldr r3,[r7,#4]
 1169 0014 93F82130 	 ldrb r3,[r3,#33]
 1170 0018 012B     	 cmp r3,#1
 1171 001a 04D1     	 bne .L51
 435:../Dave/Generated/TIMER/timer.c ****     {
 436:../Dave/Generated/TIMER/timer.c ****       /* Clear the timer register */
 437:../Dave/Generated/TIMER/timer.c ****       XMC_CCU8_SLICE_ClearTimer(handle_ptr->ccu8_slice_ptr);
 1172              	 .loc 2 437 0
 1173 001c 7B68     	 ldr r3,[r7,#4]
 1174 001e 5B69     	 ldr r3,[r3,#20]
 1175 0020 1846     	 mov r0,r3
 1176 0022 FFF7FEFF 	 bl XMC_CCU8_SLICE_ClearTimer
 1177              	.L51:
 438:../Dave/Generated/TIMER/timer.c ****     }
 439:../Dave/Generated/TIMER/timer.c **** #endif
 440:../Dave/Generated/TIMER/timer.c ****     status = TIMER_STATUS_SUCCESS;
 1178              	 .loc 2 440 0
 1179 0026 0023     	 movs r3,#0
 1180 0028 FB73     	 strb r3,[r7,#15]
 1181 002a 01E0     	 b .L52
 1182              	.L50:
 441:../Dave/Generated/TIMER/timer.c ****   }
 442:../Dave/Generated/TIMER/timer.c ****   else
 443:../Dave/Generated/TIMER/timer.c ****   {
 444:../Dave/Generated/TIMER/timer.c ****     status = TIMER_STATUS_FAILURE;
 1183              	 .loc 2 444 0
 1184 002c 0123     	 movs r3,#1
 1185 002e FB73     	 strb r3,[r7,#15]
 1186              	.L52:
 445:../Dave/Generated/TIMER/timer.c ****   }
 446:../Dave/Generated/TIMER/timer.c **** 
 447:../Dave/Generated/TIMER/timer.c ****   return (status);
 1187              	 .loc 2 447 0
 1188 0030 FB7B     	 ldrb r3,[r7,#15]
 448:../Dave/Generated/TIMER/timer.c **** }
 1189              	 .loc 2 448 0
 1190 0032 1846     	 mov r0,r3
 1191 0034 1037     	 adds r7,r7,#16
 1192              	.LCFI103:
 1193              	 .cfi_def_cfa_offset 8
 1194 0036 BD46     	 mov sp,r7
 1195              	.LCFI104:
 1196              	 .cfi_def_cfa_register 13
 1197              	 
 1198 0038 80BD     	 pop {r7,pc}
 1199              	 .cfi_endproc
 1200              	.LFE236:
 1202 003a 00BF     	 .section .text.TIMER_CCU8_lInit,"ax",%progbits
 1203              	 .align 2
 1204              	 .global TIMER_CCU8_lInit
 1205              	 .thumb
 1206              	 .thumb_func
 1208              	TIMER_CCU8_lInit:
 1209              	.LFB237:
 449:../Dave/Generated/TIMER/timer.c **** 
 450:../Dave/Generated/TIMER/timer.c **** /******************************************** PRIVATE FUNCTION DEFINITIONS ************************
 451:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU4_USED
 452:../Dave/Generated/TIMER/timer.c **** /*
 453:../Dave/Generated/TIMER/timer.c ****  * This function configures timer ccu4 timer with required time tick value
 454:../Dave/Generated/TIMER/timer.c ****  */
 455:../Dave/Generated/TIMER/timer.c **** TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
 456:../Dave/Generated/TIMER/timer.c **** {
 457:../Dave/Generated/TIMER/timer.c ****   TIMER_STATUS_t status;
 458:../Dave/Generated/TIMER/timer.c ****   /* Initialize the global registers */
 459:../Dave/Generated/TIMER/timer.c ****   status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 460:../Dave/Generated/TIMER/timer.c **** 
 461:../Dave/Generated/TIMER/timer.c ****   /* Enable the clock for selected timer */
 462:../Dave/Generated/TIMER/timer.c ****   XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 463:../Dave/Generated/TIMER/timer.c ****   /* Configure the timer with required settings */
 464:../Dave/Generated/TIMER/timer.c ****   XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 465:../Dave/Generated/TIMER/timer.c ****   /* programs the timer period and compare register according to time interval value and do the sha
 466:../Dave/Generated/TIMER/timer.c ****   TIMER_CCU4_lShadowTransfer(handle_ptr);
 467:../Dave/Generated/TIMER/timer.c **** 
 468:../Dave/Generated/TIMER/timer.c **** #ifdef  TIMER_INTERRUPT
 469:../Dave/Generated/TIMER/timer.c ****   if (true == handle_ptr->period_match_enable)
 470:../Dave/Generated/TIMER/timer.c ****   {
 471:../Dave/Generated/TIMER/timer.c ****     /* Binds a period match event to an NVIC node  */
 472:../Dave/Generated/TIMER/timer.c ****     XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 473:../Dave/Generated/TIMER/timer.c ****                                     handle_ptr->ccu4_period_match_node);
 474:../Dave/Generated/TIMER/timer.c ****     /* Enables a timer(period match) event  */
 475:../Dave/Generated/TIMER/timer.c ****     XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 476:../Dave/Generated/TIMER/timer.c ****   }
 477:../Dave/Generated/TIMER/timer.c **** #endif
 478:../Dave/Generated/TIMER/timer.c ****   /* Clears the timer register */
 479:../Dave/Generated/TIMER/timer.c ****   XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 480:../Dave/Generated/TIMER/timer.c **** 
 481:../Dave/Generated/TIMER/timer.c ****   /* update the initialization flag as true for particular instance*/
 482:../Dave/Generated/TIMER/timer.c ****   handle_ptr->initialized = true;
 483:../Dave/Generated/TIMER/timer.c **** 
 484:../Dave/Generated/TIMER/timer.c ****   /* Check whether the start of the timer is enabled during initialization or not */
 485:../Dave/Generated/TIMER/timer.c ****   if (handle_ptr->start_control == true)
 486:../Dave/Generated/TIMER/timer.c ****   {
 487:../Dave/Generated/TIMER/timer.c ****     /* Start the timer */
 488:../Dave/Generated/TIMER/timer.c ****     XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 489:../Dave/Generated/TIMER/timer.c ****   }
 490:../Dave/Generated/TIMER/timer.c **** 
 491:../Dave/Generated/TIMER/timer.c ****   return (status);
 492:../Dave/Generated/TIMER/timer.c **** }
 493:../Dave/Generated/TIMER/timer.c **** 
 494:../Dave/Generated/TIMER/timer.c **** /*
 495:../Dave/Generated/TIMER/timer.c ****  * This function configures timer period and compare values and triggers the shadow transfer operat
 496:../Dave/Generated/TIMER/timer.c ****  */
 497:../Dave/Generated/TIMER/timer.c **** void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
 498:../Dave/Generated/TIMER/timer.c **** {
 499:../Dave/Generated/TIMER/timer.c ****   /* programs the timer period register according to time interval value */
 500:../Dave/Generated/TIMER/timer.c ****   XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 501:../Dave/Generated/TIMER/timer.c ****   /* programs the timer compare register for 50% duty cycle */
 502:../Dave/Generated/TIMER/timer.c ****   XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 503:../Dave/Generated/TIMER/timer.c ****   /* Transfers value from shadow timer registers to actual timer registers */
 504:../Dave/Generated/TIMER/timer.c ****   XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mas
 505:../Dave/Generated/TIMER/timer.c **** }
 506:../Dave/Generated/TIMER/timer.c **** #endif
 507:../Dave/Generated/TIMER/timer.c **** 
 508:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU8_USED
 509:../Dave/Generated/TIMER/timer.c **** /*
 510:../Dave/Generated/TIMER/timer.c ****  * This function configures timer ccu8 timer with required time tick value
 511:../Dave/Generated/TIMER/timer.c ****  */
 512:../Dave/Generated/TIMER/timer.c **** TIMER_STATUS_t TIMER_CCU8_lInit(TIMER_t* const handle_ptr)
 513:../Dave/Generated/TIMER/timer.c **** {
 1210              	 .loc 2 513 0
 1211              	 .cfi_startproc
 1212              	 
 1213              	 
 1214 0000 80B5     	 push {r7,lr}
 1215              	.LCFI105:
 1216              	 .cfi_def_cfa_offset 8
 1217              	 .cfi_offset 7,-8
 1218              	 .cfi_offset 14,-4
 1219 0002 84B0     	 sub sp,sp,#16
 1220              	.LCFI106:
 1221              	 .cfi_def_cfa_offset 24
 1222 0004 00AF     	 add r7,sp,#0
 1223              	.LCFI107:
 1224              	 .cfi_def_cfa_register 7
 1225 0006 7860     	 str r0,[r7,#4]
 514:../Dave/Generated/TIMER/timer.c ****   TIMER_STATUS_t status;
 515:../Dave/Generated/TIMER/timer.c ****   /* Initialize the global registers */
 516:../Dave/Generated/TIMER/timer.c ****   status = (TIMER_STATUS_t)GLOBAL_CCU8_Init(handle_ptr->global_ccu8_handler);
 1226              	 .loc 2 516 0
 1227 0008 7B68     	 ldr r3,[r7,#4]
 1228 000a 1B69     	 ldr r3,[r3,#16]
 1229 000c 1846     	 mov r0,r3
 1230 000e FFF7FEFF 	 bl GLOBAL_CCU8_Init
 1231 0012 0346     	 mov r3,r0
 1232 0014 FB73     	 strb r3,[r7,#15]
 517:../Dave/Generated/TIMER/timer.c **** 
 518:../Dave/Generated/TIMER/timer.c ****   /* Enable the clock for selected timer */
 519:../Dave/Generated/TIMER/timer.c ****   XMC_CCU8_EnableClock(handle_ptr->global_ccu8_handler->module_ptr, handle_ptr->ccu8_slice_number);
 1233              	 .loc 2 519 0
 1234 0016 7B68     	 ldr r3,[r7,#4]
 1235 0018 1B69     	 ldr r3,[r3,#16]
 1236 001a 9A68     	 ldr r2,[r3,#8]
 1237 001c 7B68     	 ldr r3,[r7,#4]
 1238 001e 1B7E     	 ldrb r3,[r3,#24]
 1239 0020 1046     	 mov r0,r2
 1240 0022 1946     	 mov r1,r3
 1241 0024 FFF7FEFF 	 bl XMC_CCU8_EnableClock
 520:../Dave/Generated/TIMER/timer.c ****   /* Configure the timer with required settings */
 521:../Dave/Generated/TIMER/timer.c ****   XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr);
 1242              	 .loc 2 521 0
 1243 0028 7B68     	 ldr r3,[r7,#4]
 1244 002a 5A69     	 ldr r2,[r3,#20]
 1245 002c 7B68     	 ldr r3,[r7,#4]
 1246 002e DB69     	 ldr r3,[r3,#28]
 1247 0030 1046     	 mov r0,r2
 1248 0032 1946     	 mov r1,r3
 1249 0034 FFF7FEFF 	 bl XMC_CCU8_SLICE_CompareInit
 522:../Dave/Generated/TIMER/timer.c ****   /* programs the timer period and compare register according to time interval value and do the sha
 523:../Dave/Generated/TIMER/timer.c ****   TIMER_CCU8_lShadowTransfer(handle_ptr);
 1250              	 .loc 2 523 0
 1251 0038 7868     	 ldr r0,[r7,#4]
 1252 003a FFF7FEFF 	 bl TIMER_CCU8_lShadowTransfer
 524:../Dave/Generated/TIMER/timer.c **** 
 525:../Dave/Generated/TIMER/timer.c **** #ifdef  TIMER_INTERRUPT
 526:../Dave/Generated/TIMER/timer.c ****   if (true == handle_ptr->period_match_enable)
 527:../Dave/Generated/TIMER/timer.c ****   {
 528:../Dave/Generated/TIMER/timer.c ****     /* Binds a period match event to an NVIC node  */
 529:../Dave/Generated/TIMER/timer.c ****     XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
 530:../Dave/Generated/TIMER/timer.c ****                                     handle_ptr->ccu8_period_match_node);
 531:../Dave/Generated/TIMER/timer.c ****     /* Enables a timer(period match) event  */
 532:../Dave/Generated/TIMER/timer.c ****     XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
 533:../Dave/Generated/TIMER/timer.c ****   }
 534:../Dave/Generated/TIMER/timer.c **** #endif
 535:../Dave/Generated/TIMER/timer.c ****   /* Clears the timer register */
 536:../Dave/Generated/TIMER/timer.c ****   XMC_CCU8_SLICE_ClearTimer(handle_ptr->ccu8_slice_ptr);
 1253              	 .loc 2 536 0
 1254 003e 7B68     	 ldr r3,[r7,#4]
 1255 0040 5B69     	 ldr r3,[r3,#20]
 1256 0042 1846     	 mov r0,r3
 1257 0044 FFF7FEFF 	 bl XMC_CCU8_SLICE_ClearTimer
 537:../Dave/Generated/TIMER/timer.c **** 
 538:../Dave/Generated/TIMER/timer.c ****   /* update the initialization flag as true for particular instance*/
 539:../Dave/Generated/TIMER/timer.c ****   handle_ptr->initialized = true;
 1258              	 .loc 2 539 0
 1259 0048 7B68     	 ldr r3,[r7,#4]
 1260 004a 0122     	 movs r2,#1
 1261 004c 83F82620 	 strb r2,[r3,#38]
 540:../Dave/Generated/TIMER/timer.c **** 
 541:../Dave/Generated/TIMER/timer.c ****   /* Check whether the start of the timer is enabled during initialization or not */
 542:../Dave/Generated/TIMER/timer.c ****   if (handle_ptr->start_control == true)
 1262              	 .loc 2 542 0
 1263 0050 7B68     	 ldr r3,[r7,#4]
 1264 0052 93F82430 	 ldrb r3,[r3,#36]
 1265 0056 002B     	 cmp r3,#0
 1266 0058 04D0     	 beq .L55
 543:../Dave/Generated/TIMER/timer.c ****   {
 544:../Dave/Generated/TIMER/timer.c ****     /* Start the timer */
 545:../Dave/Generated/TIMER/timer.c ****     XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
 1267              	 .loc 2 545 0
 1268 005a 7B68     	 ldr r3,[r7,#4]
 1269 005c 5B69     	 ldr r3,[r3,#20]
 1270 005e 1846     	 mov r0,r3
 1271 0060 FFF7FEFF 	 bl XMC_CCU8_SLICE_StartTimer
 1272              	.L55:
 546:../Dave/Generated/TIMER/timer.c ****   }
 547:../Dave/Generated/TIMER/timer.c **** 
 548:../Dave/Generated/TIMER/timer.c ****   return (status);
 1273              	 .loc 2 548 0
 1274 0064 FB7B     	 ldrb r3,[r7,#15]
 549:../Dave/Generated/TIMER/timer.c **** }
 1275              	 .loc 2 549 0
 1276 0066 1846     	 mov r0,r3
 1277 0068 1037     	 adds r7,r7,#16
 1278              	.LCFI108:
 1279              	 .cfi_def_cfa_offset 8
 1280 006a BD46     	 mov sp,r7
 1281              	.LCFI109:
 1282              	 .cfi_def_cfa_register 13
 1283              	 
 1284 006c 80BD     	 pop {r7,pc}
 1285              	 .cfi_endproc
 1286              	.LFE237:
 1288 006e 00BF     	 .section .text.TIMER_CCU8_lShadowTransfer,"ax",%progbits
 1289              	 .align 2
 1290              	 .global TIMER_CCU8_lShadowTransfer
 1291              	 .thumb
 1292              	 .thumb_func
 1294              	TIMER_CCU8_lShadowTransfer:
 1295              	.LFB238:
 550:../Dave/Generated/TIMER/timer.c **** 
 551:../Dave/Generated/TIMER/timer.c **** /*
 552:../Dave/Generated/TIMER/timer.c ****  * This function configures timer period and compare values and triggers the shadow transfer operat
 553:../Dave/Generated/TIMER/timer.c ****  */
 554:../Dave/Generated/TIMER/timer.c **** void TIMER_CCU8_lShadowTransfer(TIMER_t* const handle_ptr)
 555:../Dave/Generated/TIMER/timer.c **** {
 1296              	 .loc 2 555 0
 1297              	 .cfi_startproc
 1298              	 
 1299              	 
 1300 0000 80B5     	 push {r7,lr}
 1301              	.LCFI110:
 1302              	 .cfi_def_cfa_offset 8
 1303              	 .cfi_offset 7,-8
 1304              	 .cfi_offset 14,-4
 1305 0002 82B0     	 sub sp,sp,#8
 1306              	.LCFI111:
 1307              	 .cfi_def_cfa_offset 16
 1308 0004 00AF     	 add r7,sp,#0
 1309              	.LCFI112:
 1310              	 .cfi_def_cfa_register 7
 1311 0006 7860     	 str r0,[r7,#4]
 556:../Dave/Generated/TIMER/timer.c ****   /* programs the timer period register according to time interval value */
 557:../Dave/Generated/TIMER/timer.c ****   XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, handle_ptr->period_value);
 1312              	 .loc 2 557 0
 1313 0008 7B68     	 ldr r3,[r7,#4]
 1314 000a 5A69     	 ldr r2,[r3,#20]
 1315 000c 7B68     	 ldr r3,[r7,#4]
 1316 000e 5B8C     	 ldrh r3,[r3,#34]
 1317 0010 1046     	 mov r0,r2
 1318 0012 1946     	 mov r1,r3
 1319 0014 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerPeriodMatch
 558:../Dave/Generated/TIMER/timer.c ****   /* programs the timer compare register for 50% duty cycle in compare channel 1*/
 559:../Dave/Generated/TIMER/timer.c ****   XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr,
 1320              	 .loc 2 559 0
 1321 0018 7B68     	 ldr r3,[r7,#4]
 1322 001a 5B69     	 ldr r3,[r3,#20]
 1323 001c 1846     	 mov r0,r3
 1324 001e 0021     	 movs r1,#0
 1325 0020 0022     	 movs r2,#0
 1326 0022 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerCompareMatch
 560:../Dave/Generated/TIMER/timer.c ****                                       XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
 561:../Dave/Generated/TIMER/timer.c ****                                       TIMER_CMP_100_DUTY);
 562:../Dave/Generated/TIMER/timer.c ****   /* Transfers value from shadow timer registers to actual timer registers */
 563:../Dave/Generated/TIMER/timer.c ****   XMC_CCU8_EnableShadowTransfer(handle_ptr->global_ccu8_handler->module_ptr, handle_ptr->shadow_mas
 1327              	 .loc 2 563 0
 1328 0026 7B68     	 ldr r3,[r7,#4]
 1329 0028 1B69     	 ldr r3,[r3,#16]
 1330 002a 9A68     	 ldr r2,[r3,#8]
 1331 002c 7B68     	 ldr r3,[r7,#4]
 1332 002e DB68     	 ldr r3,[r3,#12]
 1333 0030 1046     	 mov r0,r2
 1334 0032 1946     	 mov r1,r3
 1335 0034 FFF7FEFF 	 bl XMC_CCU8_EnableShadowTransfer
 564:../Dave/Generated/TIMER/timer.c **** }
 1336              	 .loc 2 564 0
 1337 0038 0837     	 adds r7,r7,#8
 1338              	.LCFI113:
 1339              	 .cfi_def_cfa_offset 8
 1340 003a BD46     	 mov sp,r7
 1341              	.LCFI114:
 1342              	 .cfi_def_cfa_register 13
 1343              	 
 1344 003c 80BD     	 pop {r7,pc}
 1345              	 .cfi_endproc
 1346              	.LFE238:
 1348 003e 00BF     	 .text
 1349              	.Letext0:
 1350              	 .file 3 "d:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1351              	 .file 4 "d:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1352              	 .file 5 "F:/Fuckultate/ProectSI/Libraries/CMSIS/Infineon/XMC4700_series/Include/XMC4700.h"
 1353              	 .file 6 "F:/Fuckultate/ProectSI/Libraries/XMCLib/inc/xmc4_scu.h"
 1354              	 .file 7 "F:/Fuckultate/ProectSI/Dave/Generated/DAVE_Common.h"
 1355              	 .file 8 "F:/Fuckultate/ProectSI/Dave/Generated/GLOBAL_CCU8/global_ccu8.h"
 1356              	 .file 9 "../Dave/Generated/TIMER/timer.h"
 1357              	 .file 10 "F:/Fuckultate/ProectSI/Libraries/CMSIS/Include/core_cm4.h"
 1358              	 .file 11 "F:/Fuckultate/ProectSI/Libraries/CMSIS/Infineon/XMC4700_series/Include/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 timer.c
    {standard input}:20     .text.XMC_CCU8_EnableClock:00000000 $t
    {standard input}:24     .text.XMC_CCU8_EnableClock:00000000 XMC_CCU8_EnableClock
    {standard input}:71     .text.XMC_CCU8_SLICE_IsTimerRunning:00000000 $t
    {standard input}:75     .text.XMC_CCU8_SLICE_IsTimerRunning:00000000 XMC_CCU8_SLICE_IsTimerRunning
    {standard input}:120    .text.XMC_CCU8_SLICE_StartTimer:00000000 $t
    {standard input}:124    .text.XMC_CCU8_SLICE_StartTimer:00000000 XMC_CCU8_SLICE_StartTimer
    {standard input}:163    .text.XMC_CCU8_SLICE_StopTimer:00000000 $t
    {standard input}:167    .text.XMC_CCU8_SLICE_StopTimer:00000000 XMC_CCU8_SLICE_StopTimer
    {standard input}:206    .text.XMC_CCU8_SLICE_ClearTimer:00000000 $t
    {standard input}:210    .text.XMC_CCU8_SLICE_ClearTimer:00000000 XMC_CCU8_SLICE_ClearTimer
    {standard input}:249    .text.XMC_CCU8_EnableShadowTransfer:00000000 $t
    {standard input}:253    .text.XMC_CCU8_EnableShadowTransfer:00000000 XMC_CCU8_EnableShadowTransfer
    {standard input}:293    .text.XMC_CCU8_SLICE_GetTimerValue:00000000 $t
    {standard input}:297    .text.XMC_CCU8_SLICE_GetTimerValue:00000000 XMC_CCU8_SLICE_GetTimerValue
    {standard input}:337    .text.XMC_CCU8_SLICE_ClearEvent:00000000 $t
    {standard input}:341    .text.XMC_CCU8_SLICE_ClearEvent:00000000 XMC_CCU8_SLICE_ClearEvent
    {standard input}:387    .text.XMC_CCU8_SLICE_GetEvent:00000000 $t
    {standard input}:391    .text.XMC_CCU8_SLICE_GetEvent:00000000 XMC_CCU8_SLICE_GetEvent
    {standard input}:440    .text.TIMER_GetAppVersion:00000000 $t
    {standard input}:445    .text.TIMER_GetAppVersion:00000000 TIMER_GetAppVersion
    {standard input}:506    .text.TIMER_Init:00000000 $t
    {standard input}:511    .text.TIMER_Init:00000000 TIMER_Init
    {standard input}:1208   .text.TIMER_CCU8_lInit:00000000 TIMER_CCU8_lInit
    {standard input}:566    .text.TIMER_Start:00000000 $t
    {standard input}:571    .text.TIMER_Start:00000000 TIMER_Start
    {standard input}:630    .text.TIMER_Stop:00000000 $t
    {standard input}:635    .text.TIMER_Stop:00000000 TIMER_Stop
    {standard input}:705    .text.TIMER_GetTimerStatus:00000000 TIMER_GetTimerStatus
    {standard input}:700    .text.TIMER_GetTimerStatus:00000000 $t
    {standard input}:756    .text.TIMER_SetTimeInterval:00000000 $t
    {standard input}:761    .text.TIMER_SetTimeInterval:00000000 TIMER_SetTimeInterval
    {standard input}:1294   .text.TIMER_CCU8_lShadowTransfer:00000000 TIMER_CCU8_lShadowTransfer
    {standard input}:932    .text.TIMER_SetTimeInterval:00000120 $d
    {standard input}:938    .text.TIMER_GetInterruptStatus:00000000 $t
    {standard input}:943    .text.TIMER_GetInterruptStatus:00000000 TIMER_GetInterruptStatus
    {standard input}:994    .text.TIMER_ClearEvent:00000000 $t
    {standard input}:999    .text.TIMER_ClearEvent:00000000 TIMER_ClearEvent
    {standard input}:1042   .text.TIMER_GetTime:00000000 $t
    {standard input}:1047   .text.TIMER_GetTime:00000000 TIMER_GetTime
    {standard input}:1134   .text.TIMER_GetTime:00000084 $d
    {standard input}:1139   .text.TIMER_Clear:00000000 $t
    {standard input}:1144   .text.TIMER_Clear:00000000 TIMER_Clear
    {standard input}:1203   .text.TIMER_CCU8_lInit:00000000 $t
    {standard input}:1289   .text.TIMER_CCU8_lShadowTransfer:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_uldivmod
XMC_CCU8_SLICE_SetPrescaler
GLOBAL_CCU8_Init
XMC_CCU8_SLICE_CompareInit
XMC_CCU8_SLICE_SetTimerPeriodMatch
XMC_CCU8_SLICE_SetTimerCompareMatch
