   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_ebu.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_EBU_Enable,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_EBU_Enable:
  25              	.LFB169:
  26              	 .file 1 "F:/Fuckultate/ProectSI/Libraries/XMCLib/inc/xmc_ebu.h"
   1:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
   2:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * @file xmc_ebu.h
   3:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * @date 2017-06-24
   4:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *
   5:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * @cond
   6:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  **************************************************************************************************
   7:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *
   9:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * All rights reserved.                        
  11:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *                                             
  12:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * following conditions are met:   
  14:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *                                                                              
  15:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * disclaimer.                        
  17:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * 
  18:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * 
  21:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * products derived from this software without specific prior written permission.                  
  23:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *                                                                              
  24:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *                                                                              
  32:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  **************************************************************************************************
  35:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *
  36:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * Change History
  37:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * --------------
  38:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *
  39:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * 2015-06-20:
  40:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *     - Initial
  41:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *
  42:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * 2016-03-30:
  43:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *     - Added ebu_data_hold_cycles_for_read_accesses to XMC_EBU_BUS_READ_CONFIG_t
  44:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *     - Added ebu_device_addressing_mode and ebu_data_hold_cycles_for_write_accesses to XMC_EBU_BU
  45:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *      
  46:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * 2017-06-24:
  47:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *     - Changed XMC_EBU_AddressSelectEnable() to make sure arbitartion mode is active
  48:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *
  49:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * @endcond 
  50:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *
  51:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
  52:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  
  53:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** #ifndef XMC_EBU_H
  54:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** #define XMC_EBU_H
  55:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
  56:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**************************************************************************************************
  57:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * HEADER FILES
  58:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  **************************************************************************************************
  59:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  
  60:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** #include <xmc_common.h>
  61:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** #if defined (EBU)
  62:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** #include <xmc_scu.h>
  63:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
  64:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
  65:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * @addtogroup XMClib XMC Peripheral Library
  66:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * @{
  67:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
  68:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
  69:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
  70:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * @addtogroup EBU
  71:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * @brief External Bus Unit (EBU) driver for the XMC45/XMC47/XMC48 microcontroller
  72:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *
  73:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * The External Bus Unit (EBU) controls the transactions between external memories or 
  74:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * peripheral units, and the internal memories and peripheral units. Several external 
  75:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * device configurations are supported; e.g. Asynchronous static memories, SDRAM 
  76:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * and various flash memory types. It supports multiple programmable address regions. 
  77:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *
  78:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * The EBU low level driver provides functions to configure and initialize the EBU
  79:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * hardware peripheral. 
  80:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * @{
  81:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
  82:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  
  83:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**************************************************************************************************
  84:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * MACROS
  85:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** ***************************************************************************************************
  86:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
  87:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
  88:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * A convenient symbol for the EBU peripheral base address
  89:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
  90:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** #if defined (EBU)
  91:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** # define XMC_EBU ((XMC_EBU_t *)EBU_BASE)
  92:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** #else
  93:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** # error 'EBU' base peripheral pointer not defined
  94:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** #endif
  95:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
  96:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
  97:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /*
  98:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
  99:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 100:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** #define XMC_EBU_CHECK_MODULE_PTR(p) ((p) == XMC_EBU)
 101:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 102:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**************************************************************************************************
 103:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * ENUMS
 104:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** ***************************************************************************************************
 105:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  
 106:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 107:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * Status return values for EBU low level driver
 108:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */ 
 109:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum XMC_EBU_STATUS
 110:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 111:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_STATUS_OK    = 0U, /**< Operation successful */
 112:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_STATUS_BUSY  = 1U, /**< Busy with a previous request */
 113:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_STATUS_ERROR = 3U  /**< Operation unsuccessful */
 114:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_STATUS_t;
 115:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 116:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 117:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU clock divide ratio
 118:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 119:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum  XMC_EBU_CLOCK_DIVIDE_RATIO
 120:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 121:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_CLOCK_DIVIDED_BY_1 = 0U, /**< Clock divided by 1 */
 122:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_CLOCK_DIVIDED_BY_2 = 1U, /**< Clock divided by 2 */
 123:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_CLOCK_DIVIDED_BY_3 = 2U, /**< Clock divided by 3 */
 124:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_CLOCK_DIVIDED_BY_4 = 3U  /**< Clock divided by 4 */
 125:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_CLOCK_DIVIDE_RATIO_t;
 126:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 127:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 128:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU DIV2 clocking mode
 129:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 130:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum  XMC_EBU_DIV2_CLK_MODE
 131:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 132:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_DIV2_CLK_MODE_OFF = 0U, /**< Divider 2 clock mode OFF */
 133:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_DIV2_CLK_MODE_ON = 1U   /**< Divider 2 clock mode ON */
 134:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_DIV2_CLK_MODE_t;
 135:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 136:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 137:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU clocking mode
 138:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 139:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum  XMC_EBU_CLK_MODE
 140:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 141:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_CLK_MODE_ASYNCHRONOUS_TO_AHB = 0U, /**< EBU is using standard clocking mode */
 142:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_CLK_MODE_SYNCHRONOUS_TO_CPU = 1U   /**< EBU is running at AHB bus clock divided by 2 */
 143:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_CLK_MODE_t;
 144:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 145:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 146:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU arbitration mode
 147:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 148:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum  XMC_EBU_ARB_MODE
 149:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 150:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_ARB_MODE_NOT_SELECTED     = 0U, /**< No Bus arbitration mode selected */
 151:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_ARB_MODE_ARBITER_MODE     = 1U, /**< Arbiter Mode arbitration mode selected */
 152:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_ARB_MODE_PARTICIPANT_MODE = 2U, /**< Participant arbitration mode selected */
 153:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_ARB_MODE_SOLE_MASTER_MODE = 3U  /**< Sole Master arbitration mode selected */
 154:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_ARB_MODE_t;
 155:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 156:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 157:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU ALE mode
 158:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 159:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum  XMC_EBU_ALE_MODE
 160:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 161:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_ALE_OUTPUT_IS_INV_ADV = 0U, /**< Output is ADV */
 162:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_ALE_OUTPUT_IS_ALE     = 1U  /**< Output is ALE */
 163:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_ALE_MODE_t;
 164:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 165:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 166:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU clock status
 167:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 168:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum XMC_EBU_CLK_STATUS
 169:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 170:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_CLK_STATUS_DISABLE_BIT = EBU_CLC_DISS_Msk,     /**< EBU Disable Status Bit */
 171:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_CLK_STATUS_MODE        = EBU_CLC_SYNCACK_Msk,  /**< EBU Clocking Mode Status */
 172:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_CLK_STATUS_DIV2_MODE   = EBU_CLC_DIV2ACK_Msk,  /**< DIV2 Clocking Mode Status */
 173:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_CLK_STATUS_DIV_RATIO   = EBU_CLC_EBUDIVACK_Msk /**< EBU Clock Divide Ratio Status */
 174:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_CLK_STATUS_t;
 175:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 176:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 177:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU address selection
 178:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 179:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum XMC_EBU_ADDRESS_SELECT
 180:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 181:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_ADDRESS_SELECT_MEMORY_REGION_ENABLE        = EBU_ADDRSEL0_REGENAB_Msk, /**< Memory Region
 182:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_ADDRESS_SELECT_ALTERNATE_REGION_ENABLE     = EBU_ADDRSEL0_ALTENAB_Msk, /**< Alternate Reg
 183:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_ADDRESS_SELECT_MEMORY_REGION_WRITE_PROTECT = EBU_ADDRSEL0_WPROT_Msk    /**< Memory Region
 184:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_ADDRESS_SELECT_t;
 185:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 186:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 187:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU bus write configuration status
 188:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 189:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum XMC_EBU_BUSWCON_SELECT
 190:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 191:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_BUSWCON_SELECT_NAN_WORKAROUND = EBU_BUSWCON0_NAA_Msk, /**< Enable flash non-array access 
 192:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_BUSWCON_SELECT_DEVICE_ADDRESSING_MODE = EBU_BUSWCON0_PORTW_Msk, /**< Device Addressing Mo
 193:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_BUSWCON_SELECT_t;
 194:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 195:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 196:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU burst length for synchronous burst
 197:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 198:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum XMC_EBU_BURST_LENGTH_SYNC
 199:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 200:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_BURST_LENGTH_SYNC_1_DATA_ACCESS   = 0U, /**< 1 data access (default after reset) */
 201:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_BURST_LENGTH_SYNC_2_DATA_ACCESSES = 1U, /**< 2 data access */
 202:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_BURST_LENGTH_SYNC_4_DATA_ACCESSES = 2U, /**< 3 data access */
 203:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_BURST_LENGTH_SYNC_8_DATA_ACCESSES = 3U, /**< 4 data access */
 204:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_BURST_LENGTH_SYNC_t;
 205:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 206:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 207:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU burst buffer mode
 208:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 209:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum XMC_EBU_BURST_BUFFER_SYNC_MODE
 210:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 211:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_BURST_BUFFER_SYNC_LENGTH_SYNC_ENABLE = 0U, /**< Burst buffer length defined by value in F
 212:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_BURST_BUFFER_SYNC_SINGLE_MODE        = 1U  /**< All data required for transaction (single
 213:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_BURST_BUFFER_SYNC_MODE_t;
 214:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 215:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 216:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * Read single stage synchronization
 217:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 218:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum XMC_EBU_READ_STAGES_SYNC
 219:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 220:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_READ_STAGES_SYNC_TWO = 0U, /**< Two stages of synchronization used (maximum margin) */
 221:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_READ_STAGES_SYNC_ONE = 1U  /**< One stage of synchronization used (minimum latency) */
 222:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_READ_STAGES_SYNC_t;
 223:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 224:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 225:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU burst flash clock feedback enable/disable
 226:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 227:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum XMC_EBU_BURST_FLASH_CLOCK_FEEDBACK
 228:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 229:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_BURST_FLASH_CLOCK_FEEDBACK_DISABLE = 0U, /**< BFCLK feedback not used */
 230:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_BURST_FLASH_CLOCK_FEEDBACK_ENABLE  = 1U  /**< BFCLK feedback used */
 231:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_BURST_FLASH_CLOCK_FEEDBACK_t;
 232:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 233:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 234:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU burst flash clock mode select
 235:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 236:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum XMC_EBU_BURST_FLASH_CLOCK_MODE
 237:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 238:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_BURST_FLASH_CLOCK_MODE_RUN_CONTINUOSLY = 0U, /**< Burst flash clock runs continuously */
 239:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_BURST_FLASH_CLOCK_MODE_DISABLED_BETWEEN_ACCESSES = 1U /**< Burst flash clock disabled */
 240:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_BURST_FLASH_CLOCK_MODE_t;
 241:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 242:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 243:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU flash non-array access
 244:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 245:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum XMC_EBU_FLASH_NON_ARRAY_ACCESS
 246:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 247:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_FLASH_NON_ARRAY_ACCESS_DISNABLE = 0U, /**< Disable non-array access */
 248:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_FLASH_NON_ARRAY_ACCESS_ENABLE   = 1U  /**< Enable non-array access */
 249:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_FLASH_NON_ARRAY_ACCESS_t;
 250:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 251:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 252:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU early chip select for synchronous burst
 253:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 254:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum XMC_EBU_EARLY_CHIP_SELECT_SYNC_BURST
 255:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 256:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_EARLY_CHIP_SELECT_DELAYED     = 0U, /**< Chip select delayed */
 257:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_EARLY_CHIP_SELECT_NOT_DELAYED = 1U  /**< Chip select not delayed */
 258:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_EARLY_CHIP_SELECT_SYNC_BURST_t;
 259:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 260:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 261:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU early burst signal enable for synchronous burst
 262:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 263:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum XMC_EBU_BURST_SIGNAL_SYNC_BURST
 264:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 265:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_BURST_SIGNAL_SYNC_BURST_ADV_DELAYED     = 0U, /**< Chip select delayed */
 266:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_BURST_SIGNAL_SYNC_BURST_ADV_NOT_DELAYED = 1U  /**< Chip select not delayed */
 267:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_BURST_SIGNAL_SYNC_BURST_t;
 268:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 269:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 270:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU burst address wrapping
 271:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 272:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum XMC_EBU_BURST_ADDRESS_WRAPPING
 273:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 274:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_BURST_ADDRESS_WRAPPING_DISABLED = 0U, /**< Automatically re-aligns any non-aligned synchr
 275:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_BURST_ADDRESS_WRAPPING_ENABLED  = 1U  /**< Starts any burst access at address specified b
 276:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_BURST_ADDRESS_WRAPPING_t;
 277:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 278:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 279:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU reversed polarity at WAIT
 280:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 281:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum XMC_EBU_WAIT_SIGNAL_POLARITY
 282:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 283:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_WAIT_SIGNAL_POLARITY_PIN_ACTIVE_LOW  = 0U, /**< OFF, input at WAIT pin is active low */
 284:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_WAIT_SIGNAL_POLARITY_PIN_ACTIVE_HIGH = 1U  /**< Polarity reversed, input at WAIT pin is a
 285:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_WAIT_SIGNAL_POLARITY_t;
 286:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 287:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 288:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU byte control signal control
 289:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 290:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum XMC_EBU_BYTE_CONTROL
 291:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 292:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_BYTE_CONTROL_FOLLOWS_CHIP_SELECT_TIMMING         = 0U, /**< Control signals follow chip s
 293:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_BYTE_CONTROL_FOLLOWS_CONTROL_SIGNAL_TIMMING      = 1U, /**< Control signals follow contro
 294:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_BYTE_CONTROL_FOLLOWS_WRITE_ENABLE_SIGNAL_TIMMING = 2U  /**< Control signals follow write 
 295:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_BYTE_CONTROL_t;
 296:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 297:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 298:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU device addressing mode
 299:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 300:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum XMC_EBU_DEVICE_ADDRESSING_MODE
 301:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 302:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_DEVICE_ADDRESSING_MODE_16_BITS                  = 1U, /**< Address will only be driven on
 303:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_DEVICE_ADDRESSING_MODE_TWIN_16_BITS_MULTIPLEXED = 2U, /**< Lower 16b will be driven onto 
 304:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_DEVICE_ADDRESSING_MODE_32_BITS_MULTIPLEXED      = 3U  /**< Full address driven onto A[15:
 305:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_DEVICE_ADDRESSING_MODE_t;
 306:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 307:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 308:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU external wait control
 309:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 310:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum XMC_EBU_WAIT_CONTROL
 311:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 312:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_WAIT_CONTROL_OFF = 0U, /**< Default after reset; Wait control off */  
 313:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_WAIT_CONTROL_SYNC_EARLY_WAIT_ASYNC_ASYNC_INPUT_AT_WAIT = 1U,    /**< SYNC: Wait for page 
 314:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****                                                                                ASYNC: Asynchronous 
 315:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_WAIT_CONTROL_SYNC_WAIT_WITH_DATA_ASYNC_SYNC_INPUT_AT_WAIT = 2U, /**< SYNC: Wait for page 
 316:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****                                                                                ASYNC: Synchronous i
 317:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_WAIT_CONTROL_SYNC_ABORT_AND_RETRY_ACCESS = 3U                   /**< SYNC: Abort and retr
 318:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_WAIT_CONTROL_t;
 319:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 320:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 321:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU asynchronous address phase
 322:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 323:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum XMC_EBU_ASYNCHRONOUS_ADDRESS_PHASE
 324:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 325:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_ASYNCHRONOUS_ADDRESS_PHASE_CLOCK_ENABLED_AT_BEGINNING_OF_ACCESS = 0U, /**< Enabled at beg
 326:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_ASYNCHRONOUS_ADDRESS_PHASE_CLOCK_ENABLED_AFTER_ADDRESS_PHASE    = 1U  /**< Enabled after 
 327:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_ASYNCHRONOUS_ADDRESS_PHASE_t;
 328:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 329:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 330:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU device type for region
 331:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 332:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum XMC_EBU_DEVICE_TYPE
 333:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 334:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_DEVICE_TYPE_MUXED_ASYNCHRONOUS_TYPE   = 0U, /**< Device type muxed asynchronous */
 335:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_DEVICE_TYPE_MUXED_BURST_TYPE          = 1U, /**< Device type muxed burst */
 336:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_DEVICE_TYPE_NAND_FLASH                = 2U, /**< Device type NAND flash */
 337:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_DEVICE_TYPE_MUXED_CELLULAR_RAM        = 3U, /**< Device type muxed cellular RAM  */
 338:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_DEVICE_TYPE_DEMUXED_ASYNCHRONOUS_TYPE = 4U, /**< Device type de-muxed asynchronous */
 339:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_DEVICE_TYPE_DEMUXED_BURST_TYPE        = 5U, /**< Device type de-muxed burst */
 340:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_DEVICE_TYPE_DEMUXED_PAGE_MODE         = 6U, /**< Device type de-muxed page mode */
 341:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_DEVICE_TYPE_DEMUXED_CELLULAR_RAM      = 7U, /**< Device type de-muxed cellular RAM  */
 342:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_DEVICE_TYPE_SDRAM                     = 8U  /**< Device type SDRAM  */
 343:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_DEVICE_TYPE_t;
 344:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 345:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 346:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU lock chip select
 347:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 348:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum XMC_EBU_LOCK_CHIP_SELECT
 349:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 350:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_LOCK_CHIP_SELECT_DISABLED = 0U, /**< Chip select cannot be locked */
 351:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_LOCK_CHIP_SELECT_ENABLED  = 1U  /**< Chip select automatically locked after a write opera
 352:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_LOCK_CHIP_SELECT_t;
 353:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 354:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 355:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU Frequency of external clock at pin BFCLKO
 356:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 357:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum XMC_EBU_FREQUENCY_EXT_CLK_PIN
 358:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 359:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_FREQ_EXT_CLK_PIN_EQUAL_TO_INT_CLK   = 0U, /**< Equal to INT_CLK frequency */
 360:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_FREQ_EXT_CLK_PIN_HALF_OF_INT_CLK    = 1U, /**< 1/2 of INT_CLK frequency */
 361:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_FREQ_EXT_CLK_PIN_THIRD_OF_INT_CLK   = 2U, /**< 1/3 of INT_CLK frequency */
 362:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_FREQ_EXT_CLK_PIN_QUARTER_OF_INT_CLK = 3U  /**< 1/4 of INT_CLK frequency */
 363:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_FREQ_EXT_CLK_PIN_t;
 364:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 365:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 366:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU extended data
 367:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 368:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum XMC_EBU_EXT_DATA
 369:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 370:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_EXT_DATA_OUTPUT_EVERY_1_BFCLK_CYCLES = 0U, /**< External memory outputs data every BFCLK 
 371:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_EXT_DATA_OUTPUT_EVERY_2_BFCLK_CYCLES = 1U, /**< External memory outputs data every two BF
 372:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_EXT_DATA_OUTPUT_EVERY_4_BFCLK_CYCLES = 2U, /**< External memory outputs data every four B
 373:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_EXT_DATA_OUTPUT_EVERY_8_BFCLK_CYCLES = 3U  /**< External memory outputs data every eight 
 374:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_EXT_DATA_t;
 375:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 376:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 377:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU SDRAM clock mode select
 378:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 379:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum XMC_EBU_SDRAM_CLK_MODE
 380:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 381:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_CLK_MODE_CONTINUOUSLY_RUNS         = 0U, /**< Clock continuously running */
 382:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_CLK_MODE_DISABLED_BETWEEN_ACCESSES = 1U  /**< Clock disabled between accesses */
 383:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_SDRAM_CLK_MODE_t;
 384:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 385:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 386:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU power save mode used for gated clock mode
 387:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 388:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum XMC_EBU_SDRAM_PWR_MODE
 389:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 390:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_PWR_MODE_PRECHARGE_BEFORE_CLK_STOP      = 0U, /**< Precharge before clock stop */
 391:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_PWR_MODE_AUTO_PRECHARGE_BEFORE_CLK_STOP = 1U, /**< Auto-precharge before clock stop
 392:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_PWR_MODE_ACTIVE_PWR_DOWN                = 2U, /**< Active power down (stop clock wi
 393:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_PWR_MODE_CLK_STOP_PWR_DOWN              = 3U  /**< Clock stop power down */
 394:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_SDRAM_PWR_MODE_t;
 395:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 396:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 397:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU disable SDRAM clock output
 398:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 399:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum XMC_EBU_SDRAM_CLK_OUTPUT
 400:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 401:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_CLK_OUTPUT_ENABLED  = 0U, /**< Clock output enabled */
 402:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_CLK_OUTPUT_DISABLED = 1U  /**< Clock output disabled */
 403:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_SDRAM_CLK_OUTPUT_t;
 404:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 405:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 406:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *  EBU mask for bank tag
 407:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 408:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum XMC_EBU_SDRAM_MASK_FOR_BANKM_TAG
 409:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 410:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_MASK_FOR_BANK_TAG_ADDRESS_21_to_20 = 1U, /**< Mask for bank tag addresses 21 to 20 
 411:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_MASK_FOR_BANK_TAG_ADDRESS_22_to_21 = 2U, /**< Mask for bank tag addresses 22 to 21 
 412:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_MASK_FOR_BANK_TAG_ADDRESS_23_to_22 = 3U, /**< Mask for bank tag addresses 23 to 22 
 413:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_MASK_FOR_BANK_TAG_ADDRESS_24_to_23 = 4U, /**< Mask for bank tag addresses 24 to 23 
 414:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_MASK_FOR_BANK_TAG_ADDRESS_25_to_24 = 5U, /**< Mask for bank tag addresses 25 to 24 
 415:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_MASK_FOR_BANK_TAG_ADDRESS_26_to_25 = 6U, /**< Mask for bank tag addresses 26 to 25 
 416:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_MASK_FOR_BANK_TAG_ADDRESS_26       = 7U  /**< Mask for bank tag addresses 26 */
 417:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_SDRAM_MASK_FOR_BANK_TAG_t;
 418:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 419:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 420:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU Mask for row tag
 421:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 422:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum XMC_EBU_SDRAM_MASK_FOR_ROW_TAG
 423:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 424:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_MASK_FOR_ROW_TAG_ADDRESS_26_to_9  = 1U, /**< Mask for row tag addresses 26 to 9 */
 425:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_MASK_FOR_ROW_TAG_ADDRESS_26_to_10 = 2U, /**< Mask for row tag addresses 26 to 10 */
 426:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_MASK_FOR_ROW_TAG_ADDRESS_26_to_11 = 3U, /**< Mask for row tag addresses 26 to 11 */
 427:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_MASK_FOR_ROW_TAG_ADDRESS_26_to_12 = 4U, /**< Mask for row tag addresses 26 to 12 */
 428:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_MASK_FOR_ROW_TAG_ADDRESS_26_to_13 = 5U  /**< Mask for row tag addresses 26 to 13 */
 429:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_SDRAM_MASK_FOR_ROW_TAG_t;
 430:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 431:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 432:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * Number of address bits from bit 0 to be used for column address
 433:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 434:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum XMC_EBU_SDRAM_WIDTH_OF_COLUMN_ADDRESS
 435:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 436:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_WIDTH_OF_COLUMN_ADDRESS_8_to_0  = 1U, /**< Address [8:0] */
 437:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_WIDTH_OF_COLUMN_ADDRESS_9_to_0  = 2U, /**< Address [9:0] */
 438:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_WIDTH_OF_COLUMN_ADDRESS_10_to_0 = 3U  /**< Address [10:0] */
 439:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_SDRAM_WIDTH_OF_COLUMN_ADDRESS_t;
 440:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 441:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 442:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * Number of clocks between a READ command and the availability of data
 443:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 444:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum XMC_EBU_SDRAM_CAS_LATENCY
 445:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 446:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_CAS_LATENCY_2_CLKS = 2U, /**< 2 clocks between a READ command and the availability 
 447:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_CAS_LATENCY_3_CLKS = 3U  /**< 3 clocks between a READ command and the availability 
 448:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_SDRAM_CAS_LATENCY_t;
 449:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 450:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 451:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * Number of locations can be accessed with a single command
 452:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 453:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum XMC_EBU_SDRAM_BURST_LENGTH
 454:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 455:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_BURST_LENGTH_1_LOCATION  = 0U, /**< One location accessed with a single command */
 456:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_BURST_LENGTH_2_LOCATION  = 1U, /**< Two location accessed with a single command */
 457:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_BURST_LENGTH_4_LOCATION  = 2U, /**< Four location accessed with a single command */
 458:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_BURST_LENGTH_8_LOCATION  = 3U, /**< Eight location accessed with a single command *
 459:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_BURST_LENGTH_16_LOCATION = 4U  /**< Sixteen location accessed with a single command
 460:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_SDRAM_BURST_LENGTH_t;
 461:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 462:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 463:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU SDRAM status
 464:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 465:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum XMC_EBU_SDRAM_STATUS
 466:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 467:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_STATUS_RX_ERROR = EBU_SDRSTAT_SDERR_Msk, /**< Detected an error when returning read
 468:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_STATUS_BUSY = EBU_SDRSTAT_SDRMBUSY_Msk, /**< The status of power-up initialization 
 469:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_STATUS_REFRESH_ERROR = EBU_SDRSTAT_REFERR_Msk /**< Failed previous refresh req coll
 470:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_SDRAM_STATUS_t;
 471:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 472:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 473:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * SDRAM refresh status
 474:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 475:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef enum XMC_EBU_SDRAM_RFRSH_STATUS
 476:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 477:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_RFRSH_STATUS_SELF_REFRESH_ENTRY_STATUS = EBU_SDRMREF_SELFRENST_Msk, /**< Self refre
 478:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_SDRAM_RFRSH_STATUS_SELF_REFRESH_EXIT_STATUS = EBU_SDRMREF_SELFREXST_Msk   /**< Self refre
 479:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_SDRAM_RFRSH_STATUS_t;
 480:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 481:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 482:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**************************************************************************************************
 483:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * DATA STRUCTURES
 484:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  **************************************************************************************************
 485:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  
 486:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /* Anonymous structure/union guard start */
 487:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** #if defined(__CC_ARM)
 488:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   #pragma push
 489:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   #pragma anon_unions
 490:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** #elif defined (__TASKING__)
 491:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   #pragma warning 586
 492:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** #endif
 493:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 494:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 495:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * Clock configuration values of EBU  <br>
 496:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *
 497:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * The structure presents a convenient way to set/obtain the clock configuration
 498:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * values for clock mode, div2 clock mode and clock divide ratio of EBU.
 499:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * The XMC_EBU_Init() can be used to populate the structure with the clock
 500:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * configuration values of the EBU module.
 501:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */ 
 502:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef struct XMC_EBU_CLK_CONFIG
 503:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 504:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   union
 505:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   { 
 506:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     uint32_t raw0;
 507:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     struct
 508:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     {
 509:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t                        : 16;
 510:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_clk_mode           : 1; /**< Clocking mode (::XMC_EBU_CLK_MODE_t) */
 511:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_div2_clk_mode      : 1; /**< DIV2 clocking mode (::XMC_EBU_DIV2_CLK_MODE_t) */
 512:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_clock_divide_ratio : 2; /**< Clock divide ratio (::XMC_EBU_CLOCK_DIVIDE_RATIO_t)
 513:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t                        : 12;
 514:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     };
 515:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   };
 516:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_CLK_CONFIG_t;
 517:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 518:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 519:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * Mode configuration values for EBU <br>
 520:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *
 521:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * The structure presents a convenient way to set/obtain the mode configuration,
 522:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * SDRAM tristate, external clock, arbitration, timeout control and ALE mode for
 523:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU. The XMC_EBU_Init() can be used to populate the structure with the
 524:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * clock configuration values of the EBU module.
 525:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */ 
 526:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef struct XMC_EBU_MODE_CONFIG
 527:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** { 
 528:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   union
 529:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   {
 530:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     uint32_t raw0;
 531:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     struct
 532:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     {
 533:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t                      : 2;
 534:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_sdram_tristate   : 1; /**< 0 - SDRAM cannot be shared; 1 - SDRAM can be shared *
 535:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t                      : 1;
 536:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_extlock          : 1; /**< 0 - ext bus is not locked after the EBU gains ownersh
 537:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_arbsync          : 1; /**< 0 - arbitration inputs are sync; 1 - arbitration inpu
 538:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_arbitration_mode : 2; /**< Arbitration mode selection (::XMC_EBU_ARB_MODE_t) */
 539:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t bus_timeout_control  : 8; /**< Determines num of inactive cycles leading to a bus ti
 540:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****                                               00H: Timeout is disabled <br>
 541:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****                                               01H: Timeout is generated after 1 x 8 clock cycles <b
 542:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****                                               FFH: Timeout is generated after 255 x 8 clock cycles 
 543:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t                      : 15;
 544:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_ale_mode         : 1; /**< ALE mode. Switch the ADV output to be an active high 
 545:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     };
 546:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   };
 547:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_MODE_CONFIG_t;
 548:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 549:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 550:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * GPIO mode configuration for the allocated EBU ports <br>
 551:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * Configuring this structure frees the allocated EBU ports for GPIO
 552:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * functionality. The XMC_EBU_Init() is used to populate the structure
 553:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * with the GPIO mode for the allocated EBU ports.
 554:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */ 
 555:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef struct XMC_EBU_FREE_PINS_TO_GPIO
 556:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 557:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   union
 558:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   {
 559:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     uint32_t raw0;
 560:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     struct
 561:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     {
 562:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t                   : 16;
 563:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t address_pins_gpio : 9; /**< 0 - Address bit required for addressing memory; 1 - Addr
 564:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t adv_pin_gpio      : 1; /**< Adv pin to GPIO mode */
 565:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t                   : 6;
 566:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     };
 567:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   };
 568:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_FREE_PINS_TO_GPIO_t;
 569:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 570:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 571:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * Read configuration for a region of EBU <br>
 572:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *
 573:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * The structure presents a convenient way to set/obtain the read and read timing
 574:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * configuration for a region for EBU. The XMC_EBU_ConfigureRegion() can be
 575:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * used to populate the structure with the read configuration values for EBU.
 576:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */ 
 577:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef struct XMC_EBU_BUS_READ_CONFIG
 578:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 579:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   /* EBU read configuration parameters */
 580:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   union
 581:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   {
 582:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     uint32_t raw0;
 583:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     struct
 584:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     {
 585:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_burst_length_sync                         : 3; /**< Burst length for synchronous
 586:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_burst_buffer_sync_mode                    : 1; /**< Burst buffer mode (::XMC_EBU
 587:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_read_stages_synch                         : 1; /**< Read single stage synchroniz
 588:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_burst_flash_clock_feedback                : 1; /**< Burst flash clock feedback e
 589:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_burst_flash_clock_mode                    : 1; /**< Burst flash clock mode selec
 590:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_flash_non_array_access                    : 1; /**< flash non-array access (::XM
 591:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t                                               : 8;
 592:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_early_chip_select_sync_burst              : 1; /**< Early chip select for sync b
 593:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_burst_signal_sync                         : 1; /**< Early burst signal enable fo
 594:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_burst_address_wrapping                    : 1; /**< Burst address wrapping (::XM
 595:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_wait_signal_polarity                      : 1; /**< Reversed polarity at WAIT (:
 596:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_byte_control                              : 2; /**< Byte control signal control 
 597:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_device_addressing_mode                    : 2; /**< Device addressing mode (::XM
 598:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_wait_control                              : 2; /**< External wait control (::XMC
 599:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_asynchronous_address_phase                : 1; /**< Asynchronous address phase (
 600:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t                                               : 1;
 601:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_device_type                               : 4; /**< Device type for region (::XM
 602:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     };
 603:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   };  
 604:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   /* EBU read access parameters */
 605:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   union
 606:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   {
 607:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     uint32_t raw1;
 608:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     struct
 609:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     {
 610:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 611:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Recovery Cycles between Different Regions:     <br>
 612:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * This bit field determines the number of clock cycles of the Recovery Phase between consecu
 613:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 0000B: No recovery phase clock cycles available <br>
 614:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 0001B: 1 clock cycle selected                   <br>
 615:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * ...                                            <br>
 616:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 1110B: 14 clock cycles selected                <br>
 617:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 1111B: 15 clock cycles selected                <br>
 618:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 619:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_recovery_cycles_between_different_regions : 4;
 620:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 621:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Recovery cycles after read accesses:           <br>
 622:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * This bit field determines the basic number of clock cycles of the Recovery Phase at the en
 623:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 000B: No recovery phase clock cycles available <br>
 624:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 001B: 1 clock cycle selected                   <br>
 625:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * ...                                            <br>
 626:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 110B: 6 clock cycles selected                  <br>
 627:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 111B: 7 clock cycles selected                  <br>
 628:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 629:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_recovery_cycles_after_read_accesses       : 3;
 630:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 631:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Programmed wait states for read accesses: <br>
 632:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Number of programmed wait states for read accesses. For synchronous accesses, this will al
 633:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 00000B:  1 wait state                     <br>
 634:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 00001B:  1 wait state                     <br>
 635:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 00010B:  2 wait state                     <br>
 636:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * ...                                       <br>
 637:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 11110B:  30 wait states                   <br>
 638:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 11111B:  31 wait states                   <br>
 639:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 640:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_programmed_wait_states_for_read_accesses  : 5;
 641:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 642:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Data Hold Cycles for Read Accesses <br>
 643:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * This bit field determines the basic number of Data Hold phase clock cycles during read acc
 644:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 645:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_data_hold_cycles_for_read_accesses: 4;
 646:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 647:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Frequency of external clock at pin BFCLKO (::XMC_EBU_FREQ_EXT_CLK_PIN_t)
 648:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 649:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_freq_ext_clk_pin                          : 2;
 650:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 651:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * EBU Extended data (::XMC_EBU_EXT_DATA_t)
 652:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 653:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_ext_data                                  : 2;
 654:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 655:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Command delay cycles:            <br>
 656:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * This bit field determines the basic number of Command Delay phase clock cycles.<br>
 657:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 0000B: 0 clock cycle selected    <br>
 658:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 0001B: 1 clock cycle selected    <br>
 659:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * ...                              <br>
 660:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 1110B: 14 clock cycles selected  <br>
 661:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 1111B: 15 clock cycles selected  <br>
 662:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 663:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        uint32_t command_delay_lines                          : 4;
 664:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        /**
 665:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****         * Address hold cycles:            <br>
 666:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****         * This bit field determines the number of clock cycles of the address hold phase.<br>
 667:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****         * 0000B: 0 clock cycle selected   <br>
 668:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****         * 0001B: 1 clock cycle selected   <br>
 669:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****         * ...                             <br>
 670:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****         * 1110B: 14 clock cycles selected <br>
 671:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****         * 1111B: 15 clock cycles selected <br>
 672:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****         */
 673:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        uint32_t address_hold_cycles                          : 4;
 674:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****         /**
 675:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****          * Address Cycles:
 676:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****          * This bit field determines the number of clock cycles of the address phase.<br>
 677:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****          * 0000B: 1 clock cycle selected   <br>
 678:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****          * 0001B: 1 clock cycle selected   <br>
 679:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****          * ...                             <br>
 680:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****          * 1110B: 14 clock cycles selected <br>
 681:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****          * 1111B: 15 clock cycles selected <br>
 682:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****          */
 683:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        uint32_t address_cycles                               : 4;
 684:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     };
 685:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   };
 686:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_BUS_READ_CONFIG_t;
 687:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 688:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 689:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * Write configuration for a region of EBU <br>
 690:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *
 691:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * The structure presents a convenient way to set/obtain the write and write timing
 692:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * configurations for a region of EBU. The XMC_EBU_ConfigureRegion() can be used
 693:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * to populate the structure with the write configuration values of EBU.
 694:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */ 
 695:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef struct XMC_EBU_BUS_WRITE_CONFIG
 696:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 697:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   /* EBU write configuration parameters */
 698:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   union
 699:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   {
 700:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     uint32_t raw0;
 701:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     struct
 702:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     {
 703:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_burst_length_sync                         : 3;  /**< Burst length for synchronou
 704:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_burst_buffer_sync_mode                    : 1;  /**< Burst buffer mode (::XMC_EB
 705:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t                                               : 12;
 706:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_early_chip_select_sync_burst              : 1;  /**< Early chip select for sync 
 707:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_burst_signal_sync                         : 1;  /**< Early burst signal enable f
 708:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t                                               : 1;
 709:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_wait_signal_polarity                      : 1;  /**< Reversed polarity at WAIT (
 710:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_byte_control                              : 2;  /**< Byte control signal control
 711:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_device_addressing_mode                    : 2;  /**< Device addressing mode (::X
 712:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_wait_control                              : 2;  /**< External wait control (::XM
 713:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_asynchronous_address_phase                : 1;  /**< Asynchronous address phase 
 714:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_lock_chip_select                          : 1;  /**< Lock chip select (::XMC_EBU
 715:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_device_type                               : 4;  /**< Device type for region (::X
 716:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     };
 717:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   };
 718:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   /* EBU write access parameters */
 719:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   union
 720:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   {
 721:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     uint32_t raw1;
 722:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     struct
 723:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     {
 724:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 725:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Recovery cycles between different regions:       <br>
 726:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * This bit field determines the number of clock cycles of the Recovery Phase between consecu
 727:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 0000B: No recovery phase clock cycles available  <br>
 728:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 0001B: 1 clock cycle selected                    <br>
 729:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * ...                                              <br>
 730:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 1110B: 14 clock cycles selected                  <br>
 731:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 1111B: 15 clock cycles selected                  <br>
 732:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 733:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_recovery_cycles_between_different_regions : 4;
 734:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 735:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 736:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Recovery cycles after write accesses:          <br>
 737:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * This bit field determines the basic number of clock cycles of the Recovery Phase at the en
 738:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 000B: No recovery phase clock cycles available <br>
 739:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 001B: 1 clock cycle selected                   <br> 
 740:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * ...                                            <br>
 741:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 110B: 6 clock cycles selected                  <br>
 742:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 111B: 7 clock cycles selected                  <br>
 743:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 744:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_recovery_cycles_after_write_accesses      : 3;
 745:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 746:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 747:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Programmed wait states for write accesses: <br>
 748:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Number of programmed wait states for write accesses. For synchronous accesses, this will a
 749:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 00000B:  1 wait state                      <br>
 750:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 00001B:  1 wait state                      <br>
 751:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 00010B:  2 wait state                      <br>
 752:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * ...                                        <br>
 753:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 11110B:  30 wait states                    <br>
 754:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 11111B:  31 wait states                    <br>
 755:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       */
 756:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_programmed_wait_states_for_write_accesses : 5;
 757:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 758:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 759:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Data Hold Cycles for Write Accesses
 760:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * This bit field determines the basic number of Data Hold phase clock cycles during write ac
 761:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 0000B: No recovery phase clock cycles available  <br>
 762:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 0001B: 1 clock cycle selected                    <br>
 763:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * ...                                              <br>
 764:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 1110B: 14 clock cycles selected                  <br>
 765:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 1111B: 15 clock cycles selected                  <br>
 766:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 767:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_data_hold_cycles_for_write_accesses : 4;
 768:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**<
 769:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Frequency of external clock at pin BFCLKO (::XMC_EBU_FREQ_EXT_CLK_PIN_t)
 770:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 771:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_freq_ext_clk_pin                          : 2;
 772:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 773:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * EBU extended data (::XMC_EBU_EXT_DATA_t)
 774:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 775:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_ext_data                                  : 2;
 776:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 777:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Command delay cycles:           <br>
 778:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * This bit field determines the basic number of Command Delay phase clock cycles.<br>
 779:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 0000B: 0 clock cycle selected   <br>
 780:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 0001B: 1 clock cycle selected   <br>
 781:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * ...                             <br>
 782:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 1110B: 14 clock cycles selected <br>
 783:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 1111B: 15 clock cycles selected <br>
 784:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 785:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t command_delay_lines                           : 4;
 786:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /** Address hold cycles:           <br>
 787:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * This bit field determines the number of clock cycles of the address hold phase.<br>
 788:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 0000B: 0 clock cycle selected   <br>
 789:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 0001B: 1 clock cycle selected   <br>
 790:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * ...                             <br>
 791:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 1110B: 14 clock cycles selected <br>
 792:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 1111B: 15 clock cycles selected <br>
 793:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 794:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t address_hold_cycles                           : 4;
 795:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 796:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Address cycles:                 <br>
 797:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * This bit field determines the number of clock cycles of the address phase.<br>
 798:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 0000B: 1 clock cycle selected   <br>
 799:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 0001B: 1 clock cycle selected   <br>
 800:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * ...                             <br>
 801:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 1110B: 14 clock cycles selected <br>
 802:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * 1111B: 15 clock cycles selected <br>
 803:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 804:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****      uint32_t address_cycles                                 : 4;
 805:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     };
 806:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   };
 807:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** }XMC_EBU_BUS_WRITE_CONFIG_t;
 808:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 809:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 810:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * SDRAM configuration structure <br>
 811:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *
 812:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * The structure is a placeholder for setting (and obtaining) the SDRAM configuration,
 813:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * operation mode configuration and the right refresh parameters. The XMC_EBU_ConfigureSdram()
 814:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * can be used to populate the structure with the SDRAM operation mode and
 815:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * refresh parameters configuration.
 816:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
 817:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef struct XMC_EBU_SDRAM_CONFIG
 818:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 819:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   /* EBU SDRAM control parameters */
 820:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   union
 821:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   {
 822:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     uint32_t raw0;
 823:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     struct
 824:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     {
 825:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 826:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Number of clock cycles between row activate command and a precharge
 827:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * command 
 828:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 829:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_row_precharge_delay_counter            : 4;
 830:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /** 
 831:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * (CRFSH) Number of refresh commands issued during powerup init sequence:
 832:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Perform CRFSH + 1 refresh cycles
 833:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 834:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_init_refresh_commands_counter          : 4;
 835:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 836:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * (CRSC) Number of NOP cycles after a mode register set command:
 837:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Insert CRSC + 1 NOP cycles 
 838:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 839:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_mode_register_set_up_time              : 2;
 840:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 841:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * (CRP) Number of NOP cycles inserted after a precharge command:
 842:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Insert CRP + 1 NOP cycles 
 843:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 844:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_row_precharge_time_counter             : 2;
 845:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 846:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Number of address bits from bit 0 to be used for column address
 847:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 848:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_sdram_width_of_column_address          : 2;
 849:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 850:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * (CRCD) Number of NOP cycles between a row address and a column
 851:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * address: Insert CRCD + 1 NOP cycles
 852:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 853:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_sdram_row_to_column_delay_counter      : 2;
 854:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 855:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Row cycle time counter: Insert (CRCE * 8) + CRC + 1 NOP cycles
 856:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 857:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_sdram_row_cycle_time_counter           : 3;
 858:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 859:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Mask for row tag
 860:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 861:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_sdram_mask_for_row_tag                 : 3;
 862:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 863:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Mask for bank tag
 864:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 865:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_sdram_mask_for_bank_tag                : 3;
 866:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 867:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Extension to the Row cycle time counter (CRCE)
 868:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 869:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_sdram_row_cycle_time_counter_extension : 3;
 870:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 871:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Disable SDRAM clock output
 872:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 873:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_sdram_clk_output                       : 1;
 874:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 875:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Power Save Mode used for gated clock mode
 876:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 877:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_sdram_pwr_mode                         : 2;
 878:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 879:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * SDRAM clock mode select
 880:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 881:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_sdram_clk_mode                         : 1;
 882:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     };
 883:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   };
 884:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   /* EBU SDRAM mode parameters */
 885:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   union
 886:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   {
 887:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     uint32_t raw1;
 888:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     struct
 889:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     {
 890:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 891:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Number of locations can be accessed with a single command
 892:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 893:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_sdram_burst_length                     : 3;
 894:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t                                            : 1;
 895:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 896:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Number of clocks between a READ command and the availability
 897:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * of data
 898:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 899:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_sdram_casclk_mode                      : 3;
 900:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t                                            : 8;
 901:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 902:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Cold start
 903:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 904:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_sdram_cold_start: 1;
 905:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 906:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Value to be written to the extended mode register of a mobile
 907:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * SDRAM device
 908:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 909:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_sdram_extended_operation_mode          : 12;
 910:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 911:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Value to be written to the bank select pins of a mobile SDRAM
 912:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * device during an extended mode register write operation
 913:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 914:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_sdram_extended_operation_bank_select   : 4;
 915:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     };
 916:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   };
 917:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   /* EBU SDRAM refresh parameters */
 918:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   union
 919:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     {
 920:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     uint32_t raw2;
 921:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     struct
 922:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     {
 923:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 924:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Number of refresh counter period:
 925:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Refresh period is 'num_refresh_counter_period' x 64 clock cycles
 926:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 927:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_sdram_num_refresh_counter_period       : 6;
 928:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 929:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Number of refresh commands
 930:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 931:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_sdram_num_refresh_cmnds                : 3;
 932:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t                                            : 1;
 933:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 934:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * If 1, the self refresh exit command is issued to all SDRAM devices
 935:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * regardless of their attachment to type 0 or type 1
 936:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 937:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_sdram_self_refresh_exit                : 1;
 938:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t                                            : 1;
 939:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 940:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * If "1", the self refresh entry command is issued to all SDRAM devices,
 941:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * regardless regardless of their attachment to type 0 or type 1
 942:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 943:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_sdram_self_refresh_entry               : 1;
 944:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 945:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * If 1, memory controller will automatically issue the "self refresh
 946:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * entry" command to all SDRAM devices when it gives up control of the
 947:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * external bus. It will also automatically issue "self refresh exit"
 948:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * when it regains control of the bus
 949:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 950:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_sdram_auto_self_refresh                : 1;
 951:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 952:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Extended number of refresh counter period
 953:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 954:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_sdram_extended_refresh_counter_period  : 2;
 955:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 956:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Number of NOP cycles inserted after a self refresh exit before a
 957:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * command is permitted to the SDRAM/DDRAM
 958:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 959:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_sdram_self_refresh_exit_delay          : 8;
 960:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 961:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * If 1, an auto refresh cycle will be performed; If 0, no refresh will
 962:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * be performed
 963:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 964:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_sdram_auto_refresh                     : 1;
 965:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       /**
 966:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * Number of NOPs after the SDRAM controller exits power down before an
 967:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        * active command is permitted
 968:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****        */
 969:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t ebu_sdram_delay_on_power_down_exit         : 3;
 970:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****       uint32_t : 4;
 971:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     };
 972:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   };
 973:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_SDRAM_CONFIG_t;
 974:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 975:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /* Anonymous structure/union guard end */
 976:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** #if defined (__CC_ARM)
 977:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   #pragma pop
 978:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** #elif defined (__TASKING__)
 979:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   #pragma warning restore
 980:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** #endif
 981:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 982:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 983:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU region initialization with read configurations <br>
 984:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *
 985:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * The structure presents a convenient way to set/obtain the read and read timing
 986:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * configurations for a region of EBU. The XMC_EBU_ConfigureRegion() can be
 987:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * used to populate the structure with the read configuration values of EBU  
 988:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */  
 989:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef struct XMC_EBU_REGION_READ_CONFIG
 990:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
 991:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   const uint32_t ebu_region_no;                  /**< Number of region*/
 992:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_BUS_READ_CONFIG_t ebu_bus_read_config; /**< Read configuration and access parameters stru
 993:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_REGION_READ_CONFIG_t;
 994:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
 995:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
 996:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU region initialization with write configurations <br>
 997:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *
 998:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * The structure presents a convenient way to set/obtain the write and write
 999:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * timing configurations for a region of EBU. The XMC_EBU_ConfigureRegion()
1000:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * can be used to populate the structure with the write configuration
1001:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * values of EBU.
1002:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */  
1003:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef struct XMC_EBU_REGION_WRITE_CONFIG
1004:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
1005:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   const uint32_t ebu_region_no;                    /**< Number of refresh counter period */
1006:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_BUS_WRITE_CONFIG_t ebu_bus_write_config; /**< Write configuration and access parameters s
1007:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_REGION_WRITE_CONFIG_t;
1008:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
1009:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
1010:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU region initialization with read and write configurations <br>
1011:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *
1012:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * The structure presents a convenient way to set/obtain the read, read timing,
1013:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * write and write timing configurations for a region of EBU. The
1014:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * XMC_EBU_ConfigureRegion() can be used to populate the structure with the
1015:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * region read and write configuration values of EBU.
1016:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */  
1017:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef struct XMC_EBU_REGION
1018:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
1019:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_REGION_READ_CONFIG_t read_config;
1020:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_REGION_WRITE_CONFIG_t write_config;
1021:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_REGION_t;
1022:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
1023:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
1024:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * EBU global configurations <br>
1025:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *
1026:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * The structure presents a convenient way to set/obtain the global configurations
1027:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * of the EBU like clock, mode and GPIO mode. The XMC_EBU_Init() can be
1028:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * used to populate the structure with the region read and write configuration
1029:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * values of EBU.
1030:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */  
1031:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef struct XMC_EBU_CONFIG
1032:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
1033:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_CLK_CONFIG_t ebu_clk_config;               /**< Clock configuration structure */
1034:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_MODE_CONFIG_t ebu_mode_config;             /**< Mode configuration structure */
1035:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_EBU_FREE_PINS_TO_GPIO_t ebu_free_pins_to_gpio; /**< Free allocated EBU ports for GPIO */
1036:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_CONFIG_t;
1037:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   
1038:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
1039:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * External Bus Unit (EBU) device structure <br>
1040:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *
1041:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * The structure represents a collection of all hardware registers
1042:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * used to configure the EBU peripheral on the XMC4500 microcontroller.
1043:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * The registers can be accessed with ::XMC_EBU.
1044:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
1045:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** typedef struct
1046:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
1047:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   __IO uint32_t  CLC;
1048:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   __IO uint32_t  MODCON;
1049:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   __I  uint32_t  ID;
1050:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   __IO uint32_t  USERCON;
1051:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   __I  uint32_t  RESERVED0[2];
1052:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   __IO uint32_t  ADDRSEL[4];
1053:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   struct
1054:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   {
1055:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     __IO uint32_t  RDCON;
1056:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     __IO uint32_t  RDAPR;
1057:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     __IO uint32_t  WRCON;
1058:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****     __IO uint32_t  WRAPR;
1059:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   } BUS[4];
1060:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   __IO uint32_t  SDRMCON;
1061:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   __IO uint32_t  SDRMOD;
1062:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   __IO uint32_t  SDRMREF;
1063:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   __I  uint32_t  SDRSTAT;
1064:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** } XMC_EBU_t;
1065:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
1066:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**************************************************************************************************
1067:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * API PROTOTYPES
1068:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** ***************************************************************************************************
1069:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  
1070:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** #ifdef __cplusplus
1071:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** extern "C" {
1072:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** #endif
1073:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
1074:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
1075:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * @param ebu Constant pointer to ::XMC_EBU_t, pointing to the EBU base address
1076:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * @param config Constant pointer to a constant ::XMC_EBU_CONFIG_t structure containing the
1077:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *               clock mode and clock configuration.
1078:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * @return XMC_EBU_STATUS_t Always returns XMC_EBU_STATUS_OK (Only register assignment statements)
1079:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *
1080:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * \par<b>Description: </b><br>
1081:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * Initialize the EBU peripheral <br>
1082:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *
1083:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * \par
1084:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * The function enables the EBU peripheral, configures time values for clock mode, div2
1085:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * clock mode, mode configuration, SDRAM tristate, external clock, arbitration, timeout
1086:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * control, ALE mode and configuration to free up the allocated EBU ports for GPIO
1087:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * functionality (if required).
1088:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
1089:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** XMC_EBU_STATUS_t XMC_EBU_Init(XMC_EBU_t *const ebu, const XMC_EBU_CONFIG_t *const config);
1090:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
1091:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
1092:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * @param ebu Constant pointer to ::XMC_EBU_t, pointing to the EBU base address
1093:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * @param config Constant pointer to a constant ::XMC_EBU_SDRAM_CONFIG_t structure containing
1094:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *               the SDRAM configuration, operation mode configuration and right refresh
1095:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *               parameters
1096:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * @return None
1097:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *
1098:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * \par<b>Description: </b><br>
1099:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * Configures the SDRAM <br>
1100:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *
1101:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * \par
1102:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * The function enables the SDRAM, sets SDRAM configuration parameters such as operation
1103:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * mode and refresh parameters. Please see  ::XMC_EBU_SDRAM_CONFIG_t for more information.
1104:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
1105:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** void XMC_EBU_ConfigureSdram(XMC_EBU_t *const ebu, const XMC_EBU_SDRAM_CONFIG_t *const config);
1106:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
1107:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
1108:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * @param ebu Constant pointer to ::XMC_EBU_t, pointing to the EBU base address
1109:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * @param region Constant pointer to a constant ::XMC_EBU_REGION_t structure containing the
1110:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *               read, read timing, write and write timing configurations for a region of
1111:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *               EBU
1112:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * @return None
1113:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *
1114:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * \par<b>Description: </b><br>
1115:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * Configures the SDRAM <br>
1116:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *
1117:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * \par
1118:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * The function configures the EBU region read, read timing, write and write timing parameter
1119:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * configuration. It also configures the region registers for read and write accesses. Please
1120:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * see ::XMC_EBU_REGION_t for more information.
1121:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *
1122:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
1123:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** void XMC_EBU_ConfigureRegion(XMC_EBU_t *const ebu, const XMC_EBU_REGION_t *const region);
1124:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** 
1125:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** /**
1126:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * @param ebu Constant pointer to ::XMC_EBU_t, pointing to the EBU base address
1127:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * @return None
1128:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *
1129:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * \par<b>Description: </b><br>
1130:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * Enable EBU peripheral <br>
1131:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *
1132:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * \par
1133:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * The function de-asserts the peripheral reset. The peripheral needs to be initialized.
1134:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * It also enables the control of the EBU.
1135:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  *
1136:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * \par<b>Related APIs:</b><br>
1137:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  * XMC_EBU_Disable(), XMC_SCU_RESET_AssertPeripheralReset()
1138:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****  */
1139:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** __STATIC_INLINE void XMC_EBU_Enable(XMC_EBU_t *const ebu)
1140:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** {
  27              	 .loc 1 1140 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31 0000 80B5     	 push {r7,lr}
  32              	.LCFI0:
  33              	 .cfi_def_cfa_offset 8
  34              	 .cfi_offset 7,-8
  35              	 .cfi_offset 14,-4
  36 0002 82B0     	 sub sp,sp,#8
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
1141:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_ASSERT("XMC_EBU_Enable: Invalid module pointer", XMC_EBU_CHECK_MODULE_PTR(ebu));
1142:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_EBU);
  43              	 .loc 1 1142 0
  44 0008 0548     	 ldr r0,.L2
  45 000a FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
1143:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h ****   ebu->CLC &= ~EBU_CLC_DISR_Msk;
  46              	 .loc 1 1143 0
  47 000e 7B68     	 ldr r3,[r7,#4]
  48 0010 1B68     	 ldr r3,[r3]
  49 0012 23F00102 	 bic r2,r3,#1
  50 0016 7B68     	 ldr r3,[r7,#4]
  51 0018 1A60     	 str r2,[r3]
1144:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_ebu.h **** }
  52              	 .loc 1 1144 0
  53 001a 0837     	 adds r7,r7,#8
  54              	.LCFI3:
  55              	 .cfi_def_cfa_offset 8
  56 001c BD46     	 mov sp,r7
  57              	.LCFI4:
  58              	 .cfi_def_cfa_register 13
  59              	 
  60 001e 80BD     	 pop {r7,pc}
  61              	.L3:
  62              	 .align 2
  63              	.L2:
  64 0020 04000030 	 .word 805306372
  65              	 .cfi_endproc
  66              	.LFE169:
  68              	 .section .text.XMC_EBU_Init,"ax",%progbits
  69              	 .align 2
  70              	 .global XMC_EBU_Init
  71              	 .thumb
  72              	 .thumb_func
  74              	XMC_EBU_Init:
  75              	.LFB187:
  76              	 .file 2 "../Libraries/XMCLib/src/xmc_ebu.c"
   1:../Libraries/XMCLib/src/xmc_ebu.c **** /**
   2:../Libraries/XMCLib/src/xmc_ebu.c ****  * @file xmc_ebu.c
   3:../Libraries/XMCLib/src/xmc_ebu.c ****  * @date 2017-06-24
   4:../Libraries/XMCLib/src/xmc_ebu.c ****  *
   5:../Libraries/XMCLib/src/xmc_ebu.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_ebu.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_ebu.c ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_ebu.c ****  *
   9:../Libraries/XMCLib/src/xmc_ebu.c ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_ebu.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_ebu.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_ebu.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_ebu.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_ebu.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_ebu.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_ebu.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_ebu.c ****  * 
  18:../Libraries/XMCLib/src/xmc_ebu.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_ebu.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_ebu.c ****  * 
  21:../Libraries/XMCLib/src/xmc_ebu.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_ebu.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_ebu.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_ebu.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_ebu.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_ebu.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_ebu.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_ebu.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_ebu.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_ebu.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_ebu.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_ebu.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_ebu.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_ebu.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_ebu.c ****  *
  36:../Libraries/XMCLib/src/xmc_ebu.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_ebu.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_ebu.c ****  *
  39:../Libraries/XMCLib/src/xmc_ebu.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_ebu.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_ebu.c ****  *      
  42:../Libraries/XMCLib/src/xmc_ebu.c ****  * 2015-06-20:
  43:../Libraries/XMCLib/src/xmc_ebu.c ****  *     - Removed GetDriverVersion API
  44:../Libraries/XMCLib/src/xmc_ebu.c ****  *
  45:../Libraries/XMCLib/src/xmc_ebu.c ****  * 2017-06-24:
  46:../Libraries/XMCLib/src/xmc_ebu.c ****  *     - Changed XMC_EBU_Init() adding checks for the clock acknoledgment. 
  47:../Libraries/XMCLib/src/xmc_ebu.c ****  *
  48:../Libraries/XMCLib/src/xmc_ebu.c ****  * @endcond 
  49:../Libraries/XMCLib/src/xmc_ebu.c ****  *
  50:../Libraries/XMCLib/src/xmc_ebu.c ****  */
  51:../Libraries/XMCLib/src/xmc_ebu.c ****  
  52:../Libraries/XMCLib/src/xmc_ebu.c **** /**************************************************************************************************
  53:../Libraries/XMCLib/src/xmc_ebu.c ****  * HEADER FILES
  54:../Libraries/XMCLib/src/xmc_ebu.c ****  **************************************************************************************************
  55:../Libraries/XMCLib/src/xmc_ebu.c ****  
  56:../Libraries/XMCLib/src/xmc_ebu.c **** #include <xmc_ebu.h>
  57:../Libraries/XMCLib/src/xmc_ebu.c **** 
  58:../Libraries/XMCLib/src/xmc_ebu.c **** #if defined(EBU)
  59:../Libraries/XMCLib/src/xmc_ebu.c **** 
  60:../Libraries/XMCLib/src/xmc_ebu.c **** /**************************************************************************************************
  61:../Libraries/XMCLib/src/xmc_ebu.c ****  * API IMPLEMENTATION
  62:../Libraries/XMCLib/src/xmc_ebu.c ****  **************************************************************************************************
  63:../Libraries/XMCLib/src/xmc_ebu.c **** 
  64:../Libraries/XMCLib/src/xmc_ebu.c **** /*
  65:../Libraries/XMCLib/src/xmc_ebu.c ****  * Initialize the EBU peripheral
  66:../Libraries/XMCLib/src/xmc_ebu.c ****  */
  67:../Libraries/XMCLib/src/xmc_ebu.c **** XMC_EBU_STATUS_t XMC_EBU_Init(XMC_EBU_t *const ebu,const XMC_EBU_CONFIG_t *const config)
  68:../Libraries/XMCLib/src/xmc_ebu.c **** {
  77              	 .loc 2 68 0
  78              	 .cfi_startproc
  79              	 
  80              	 
  81 0000 80B5     	 push {r7,lr}
  82              	.LCFI5:
  83              	 .cfi_def_cfa_offset 8
  84              	 .cfi_offset 7,-8
  85              	 .cfi_offset 14,-4
  86 0002 82B0     	 sub sp,sp,#8
  87              	.LCFI6:
  88              	 .cfi_def_cfa_offset 16
  89 0004 00AF     	 add r7,sp,#0
  90              	.LCFI7:
  91              	 .cfi_def_cfa_register 7
  92 0006 7860     	 str r0,[r7,#4]
  93 0008 3960     	 str r1,[r7]
  69:../Libraries/XMCLib/src/xmc_ebu.c ****   XMC_ASSERT("XMC_EBU_Init: Invalid module pointer", XMC_EBU_CHECK_MODULE_PTR(ebu));
  70:../Libraries/XMCLib/src/xmc_ebu.c ****   XMC_ASSERT("XMC_EBU_Init:Null Pointer", (config != (XMC_EBU_CONFIG_t *)NULL));
  71:../Libraries/XMCLib/src/xmc_ebu.c ****   
  72:../Libraries/XMCLib/src/xmc_ebu.c ****   /* Enable EBU */
  73:../Libraries/XMCLib/src/xmc_ebu.c ****   XMC_EBU_Enable(ebu);
  94              	 .loc 2 73 0
  95 000a 7868     	 ldr r0,[r7,#4]
  96 000c FFF7FEFF 	 bl XMC_EBU_Enable
  74:../Libraries/XMCLib/src/xmc_ebu.c **** 
  75:../Libraries/XMCLib/src/xmc_ebu.c ****   /* Clock configuration */
  76:../Libraries/XMCLib/src/xmc_ebu.c ****   ebu->CLC  =  config->ebu_clk_config.raw0;
  97              	 .loc 2 76 0
  98 0010 3B68     	 ldr r3,[r7]
  99 0012 1A68     	 ldr r2,[r3]
 100 0014 7B68     	 ldr r3,[r7,#4]
 101 0016 1A60     	 str r2,[r3]
  77:../Libraries/XMCLib/src/xmc_ebu.c ****   while (((ebu->CLC & (EBU_CLC_SYNCACK_Msk | EBU_CLC_DIV2ACK_Msk | EBU_CLC_EBUDIVACK_Msk)) >> 4) !=
 102              	 .loc 2 77 0
 103 0018 00BF     	 nop
 104              	.L5:
 105              	 .loc 2 77 0 is_stmt 0 discriminator 1
 106 001a 7B68     	 ldr r3,[r7,#4]
 107 001c 1B68     	 ldr r3,[r3]
 108 001e 03F47003 	 and r3,r3,#15728640
 109 0022 1A09     	 lsrs r2,r3,#4
  78:../Libraries/XMCLib/src/xmc_ebu.c ****          (config->ebu_clk_config.raw0 & (EBU_CLC_SYNC_Msk | EBU_CLC_DIV2_Msk | EBU_CLC_EBUDIV_Msk))
 110              	 .loc 2 78 0 is_stmt 1 discriminator 1
 111 0024 3B68     	 ldr r3,[r7]
 112 0026 1B68     	 ldr r3,[r3]
 113 0028 03F47023 	 and r3,r3,#983040
  77:../Libraries/XMCLib/src/xmc_ebu.c ****   while (((ebu->CLC & (EBU_CLC_SYNCACK_Msk | EBU_CLC_DIV2ACK_Msk | EBU_CLC_EBUDIVACK_Msk)) >> 4) !=
 114              	 .loc 2 77 0 discriminator 1
 115 002c 9A42     	 cmp r2,r3
 116 002e F4D1     	 bne .L5
  79:../Libraries/XMCLib/src/xmc_ebu.c **** 
  80:../Libraries/XMCLib/src/xmc_ebu.c ****   /*EBU Mode Configuration */
  81:../Libraries/XMCLib/src/xmc_ebu.c ****   ebu->MODCON = config->ebu_mode_config.raw0;
 117              	 .loc 2 81 0
 118 0030 3B68     	 ldr r3,[r7]
 119 0032 5A68     	 ldr r2,[r3,#4]
 120 0034 7B68     	 ldr r3,[r7,#4]
 121 0036 5A60     	 str r2,[r3,#4]
  82:../Libraries/XMCLib/src/xmc_ebu.c ****  
  83:../Libraries/XMCLib/src/xmc_ebu.c ****   /* Address Bits available for GPIO function */
  84:../Libraries/XMCLib/src/xmc_ebu.c ****   ebu->USERCON = config->ebu_free_pins_to_gpio.raw0;
 122              	 .loc 2 84 0
 123 0038 3B68     	 ldr r3,[r7]
 124 003a 9A68     	 ldr r2,[r3,#8]
 125 003c 7B68     	 ldr r3,[r7,#4]
 126 003e DA60     	 str r2,[r3,#12]
  85:../Libraries/XMCLib/src/xmc_ebu.c **** 
  86:../Libraries/XMCLib/src/xmc_ebu.c ****   return XMC_EBU_STATUS_OK;
 127              	 .loc 2 86 0
 128 0040 0023     	 movs r3,#0
  87:../Libraries/XMCLib/src/xmc_ebu.c **** }
 129              	 .loc 2 87 0
 130 0042 1846     	 mov r0,r3
 131 0044 0837     	 adds r7,r7,#8
 132              	.LCFI8:
 133              	 .cfi_def_cfa_offset 8
 134 0046 BD46     	 mov sp,r7
 135              	.LCFI9:
 136              	 .cfi_def_cfa_register 13
 137              	 
 138 0048 80BD     	 pop {r7,pc}
 139              	 .cfi_endproc
 140              	.LFE187:
 142 004a 00BF     	 .section .text.XMC_EBU_ConfigureSdram,"ax",%progbits
 143              	 .align 2
 144              	 .global XMC_EBU_ConfigureSdram
 145              	 .thumb
 146              	 .thumb_func
 148              	XMC_EBU_ConfigureSdram:
 149              	.LFB188:
  88:../Libraries/XMCLib/src/xmc_ebu.c **** 
  89:../Libraries/XMCLib/src/xmc_ebu.c **** /*
  90:../Libraries/XMCLib/src/xmc_ebu.c ****  * Configures the SDRAM with operating modes and refresh parameters
  91:../Libraries/XMCLib/src/xmc_ebu.c ****  */
  92:../Libraries/XMCLib/src/xmc_ebu.c **** void XMC_EBU_ConfigureSdram(XMC_EBU_t *const ebu,const XMC_EBU_SDRAM_CONFIG_t *const config)
  93:../Libraries/XMCLib/src/xmc_ebu.c **** {
 150              	 .loc 2 93 0
 151              	 .cfi_startproc
 152              	 
 153              	 
 154              	 
 155 0000 80B4     	 push {r7}
 156              	.LCFI10:
 157              	 .cfi_def_cfa_offset 4
 158              	 .cfi_offset 7,-4
 159 0002 83B0     	 sub sp,sp,#12
 160              	.LCFI11:
 161              	 .cfi_def_cfa_offset 16
 162 0004 00AF     	 add r7,sp,#0
 163              	.LCFI12:
 164              	 .cfi_def_cfa_register 7
 165 0006 7860     	 str r0,[r7,#4]
 166 0008 3960     	 str r1,[r7]
  94:../Libraries/XMCLib/src/xmc_ebu.c ****   XMC_ASSERT("XMC_EBU_Init: Invalid module pointer", XMC_EBU_CHECK_MODULE_PTR(ebu));
  95:../Libraries/XMCLib/src/xmc_ebu.c ****   XMC_ASSERT("XMC_EBU_Init:Null Pointer", (config != (XMC_EBU_SDRAM_CONFIG_t *)NULL));
  96:../Libraries/XMCLib/src/xmc_ebu.c ****   
  97:../Libraries/XMCLib/src/xmc_ebu.c ****   /* EBU SDRAM Refresh Configuration Parameters */
  98:../Libraries/XMCLib/src/xmc_ebu.c ****   ebu->SDRMREF = config->raw2;
 167              	 .loc 2 98 0
 168 000a 3B68     	 ldr r3,[r7]
 169 000c 9A68     	 ldr r2,[r3,#8]
 170 000e 7B68     	 ldr r3,[r7,#4]
 171 0010 1A67     	 str r2,[r3,#112]
  99:../Libraries/XMCLib/src/xmc_ebu.c ****   /* EBU SDRAM General Configuration Parameters */
 100:../Libraries/XMCLib/src/xmc_ebu.c ****   ebu->SDRMCON = config->raw0;
 172              	 .loc 2 100 0
 173 0012 3B68     	 ldr r3,[r7]
 174 0014 1A68     	 ldr r2,[r3]
 175 0016 7B68     	 ldr r3,[r7,#4]
 176 0018 9A66     	 str r2,[r3,#104]
 101:../Libraries/XMCLib/src/xmc_ebu.c ****   /* EBU SDRAM Operation Mode Configuration Parameters */
 102:../Libraries/XMCLib/src/xmc_ebu.c ****   ebu->SDRMOD = config->raw1;
 177              	 .loc 2 102 0
 178 001a 3B68     	 ldr r3,[r7]
 179 001c 5A68     	 ldr r2,[r3,#4]
 180 001e 7B68     	 ldr r3,[r7,#4]
 181 0020 DA66     	 str r2,[r3,#108]
 103:../Libraries/XMCLib/src/xmc_ebu.c **** }
 182              	 .loc 2 103 0
 183 0022 0C37     	 adds r7,r7,#12
 184              	.LCFI13:
 185              	 .cfi_def_cfa_offset 4
 186 0024 BD46     	 mov sp,r7
 187              	.LCFI14:
 188              	 .cfi_def_cfa_register 13
 189              	 
 190 0026 5DF8047B 	 ldr r7,[sp],#4
 191              	.LCFI15:
 192              	 .cfi_restore 7
 193              	 .cfi_def_cfa_offset 0
 194 002a 7047     	 bx lr
 195              	 .cfi_endproc
 196              	.LFE188:
 198              	 .section .text.XMC_EBU_ConfigureRegion,"ax",%progbits
 199              	 .align 2
 200              	 .global XMC_EBU_ConfigureRegion
 201              	 .thumb
 202              	 .thumb_func
 204              	XMC_EBU_ConfigureRegion:
 205              	.LFB189:
 104:../Libraries/XMCLib/src/xmc_ebu.c **** 
 105:../Libraries/XMCLib/src/xmc_ebu.c **** /*
 106:../Libraries/XMCLib/src/xmc_ebu.c ****  * Configures the SDRAM region for read and write operation
 107:../Libraries/XMCLib/src/xmc_ebu.c ****  */
 108:../Libraries/XMCLib/src/xmc_ebu.c **** void XMC_EBU_ConfigureRegion(XMC_EBU_t *const ebu,const XMC_EBU_REGION_t *const region)
 109:../Libraries/XMCLib/src/xmc_ebu.c **** {
 206              	 .loc 2 109 0
 207              	 .cfi_startproc
 208              	 
 209              	 
 210              	 
 211 0000 80B4     	 push {r7}
 212              	.LCFI16:
 213              	 .cfi_def_cfa_offset 4
 214              	 .cfi_offset 7,-4
 215 0002 83B0     	 sub sp,sp,#12
 216              	.LCFI17:
 217              	 .cfi_def_cfa_offset 16
 218 0004 00AF     	 add r7,sp,#0
 219              	.LCFI18:
 220              	 .cfi_def_cfa_register 7
 221 0006 7860     	 str r0,[r7,#4]
 222 0008 3960     	 str r1,[r7]
 110:../Libraries/XMCLib/src/xmc_ebu.c ****   
 111:../Libraries/XMCLib/src/xmc_ebu.c ****   XMC_ASSERT("XMC_EBU_Init: Invalid module pointer", XMC_EBU_CHECK_MODULE_PTR(ebu));
 112:../Libraries/XMCLib/src/xmc_ebu.c ****   XMC_ASSERT("XMC_EBU_Init:Null Pointer", (region != (XMC_EBU_REGION_t *)NULL));
 113:../Libraries/XMCLib/src/xmc_ebu.c ****   
 114:../Libraries/XMCLib/src/xmc_ebu.c ****   /* Read configuration of the region*/
 115:../Libraries/XMCLib/src/xmc_ebu.c ****   ebu->BUS[region->read_config.ebu_region_no].RDCON = region->read_config.ebu_bus_read_config.raw0;
 223              	 .loc 2 115 0
 224 000a 3B68     	 ldr r3,[r7]
 225 000c 1B68     	 ldr r3,[r3]
 226 000e 3A68     	 ldr r2,[r7]
 227 0010 5268     	 ldr r2,[r2,#4]
 228 0012 7968     	 ldr r1,[r7,#4]
 229 0014 1B01     	 lsls r3,r3,#4
 230 0016 0B44     	 add r3,r3,r1
 231 0018 2833     	 adds r3,r3,#40
 232 001a 1A60     	 str r2,[r3]
 116:../Libraries/XMCLib/src/xmc_ebu.c **** 
 117:../Libraries/XMCLib/src/xmc_ebu.c ****   /* Read parameters of the region*/
 118:../Libraries/XMCLib/src/xmc_ebu.c ****   ebu->BUS[region->read_config.ebu_region_no].RDAPR = region->read_config.ebu_bus_read_config.raw1;
 233              	 .loc 2 118 0
 234 001c 3B68     	 ldr r3,[r7]
 235 001e 1B68     	 ldr r3,[r3]
 236 0020 3A68     	 ldr r2,[r7]
 237 0022 9268     	 ldr r2,[r2,#8]
 238 0024 7968     	 ldr r1,[r7,#4]
 239 0026 1B01     	 lsls r3,r3,#4
 240 0028 0B44     	 add r3,r3,r1
 241 002a 2833     	 adds r3,r3,#40
 242 002c 5A60     	 str r2,[r3,#4]
 119:../Libraries/XMCLib/src/xmc_ebu.c **** 
 120:../Libraries/XMCLib/src/xmc_ebu.c ****   /* Write configuration of the region*/
 121:../Libraries/XMCLib/src/xmc_ebu.c ****   ebu->BUS[region->write_config.ebu_region_no].WRCON = region->write_config.ebu_bus_write_config.ra
 243              	 .loc 2 121 0
 244 002e 3B68     	 ldr r3,[r7]
 245 0030 DB68     	 ldr r3,[r3,#12]
 246 0032 3A68     	 ldr r2,[r7]
 247 0034 1269     	 ldr r2,[r2,#16]
 248 0036 7968     	 ldr r1,[r7,#4]
 249 0038 0333     	 adds r3,r3,#3
 250 003a 1B01     	 lsls r3,r3,#4
 251 003c 0B44     	 add r3,r3,r1
 252 003e 1A60     	 str r2,[r3]
 122:../Libraries/XMCLib/src/xmc_ebu.c **** 
 123:../Libraries/XMCLib/src/xmc_ebu.c ****   /* Write parameters of the region*/
 124:../Libraries/XMCLib/src/xmc_ebu.c ****   ebu->BUS[region->write_config.ebu_region_no].WRAPR = region->write_config.ebu_bus_write_config.ra
 253              	 .loc 2 124 0
 254 0040 3B68     	 ldr r3,[r7]
 255 0042 DB68     	 ldr r3,[r3,#12]
 256 0044 3A68     	 ldr r2,[r7]
 257 0046 5269     	 ldr r2,[r2,#20]
 258 0048 7968     	 ldr r1,[r7,#4]
 259 004a 0333     	 adds r3,r3,#3
 260 004c 1B01     	 lsls r3,r3,#4
 261 004e 0B44     	 add r3,r3,r1
 262 0050 5A60     	 str r2,[r3,#4]
 125:../Libraries/XMCLib/src/xmc_ebu.c **** }
 263              	 .loc 2 125 0
 264 0052 0C37     	 adds r7,r7,#12
 265              	.LCFI19:
 266              	 .cfi_def_cfa_offset 4
 267 0054 BD46     	 mov sp,r7
 268              	.LCFI20:
 269              	 .cfi_def_cfa_register 13
 270              	 
 271 0056 5DF8047B 	 ldr r7,[sp],#4
 272              	.LCFI21:
 273              	 .cfi_restore 7
 274              	 .cfi_def_cfa_offset 0
 275 005a 7047     	 bx lr
 276              	 .cfi_endproc
 277              	.LFE189:
 279              	 .text
 280              	.Letext0:
 281              	 .file 3 "d:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 282              	 .file 4 "d:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 283              	 .file 5 "F:/Fuckultate/ProectSI/Libraries/XMCLib/inc/xmc4_scu.h"
 284              	 .file 6 "F:/Fuckultate/ProectSI/Libraries/CMSIS/Include/core_cm4.h"
 285              	 .file 7 "F:/Fuckultate/ProectSI/Libraries/CMSIS/Infineon/XMC4700_series/Include/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_ebu.c
    {standard input}:20     .text.XMC_EBU_Enable:00000000 $t
    {standard input}:24     .text.XMC_EBU_Enable:00000000 XMC_EBU_Enable
    {standard input}:64     .text.XMC_EBU_Enable:00000020 $d
    {standard input}:69     .text.XMC_EBU_Init:00000000 $t
    {standard input}:74     .text.XMC_EBU_Init:00000000 XMC_EBU_Init
    {standard input}:143    .text.XMC_EBU_ConfigureSdram:00000000 $t
    {standard input}:148    .text.XMC_EBU_ConfigureSdram:00000000 XMC_EBU_ConfigureSdram
    {standard input}:199    .text.XMC_EBU_ConfigureRegion:00000000 $t
    {standard input}:204    .text.XMC_EBU_ConfigureRegion:00000000 XMC_EBU_ConfigureRegion
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_RESET_DeassertPeripheralReset
