   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_can.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_CAN_IsPanelControlReady,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_CAN_IsPanelControlReady:
  25              	.LFB169:
  26              	 .file 1 "F:/Fuckultate/ProectSI/Libraries/XMCLib/inc/xmc_can.h"
   1:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
   2:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @file xmc_can.h
   3:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @date 2017-11-09
   4:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
   5:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @cond
   6:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
   7:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
   9:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * All rights reserved.                        
  11:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *                                             
  12:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * following conditions are met:   
  14:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  15:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * disclaimer.                        
  17:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * 
  18:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * 
  21:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * products derived from this software without specific prior written permission.                  
  23:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  24:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  32:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
  35:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
  36:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Change History
  37:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * --------------
  38:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
  39:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-02-20:
  40:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *     - Initial <br>
  41:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *     - Documentation improved <br>
  42:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
  43:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-05-20:
  44:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *     - New elements have added in XMC_CAN_MO_t data structure <br>
  45:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *     - XMC_CAN_MO_Config() signature has changed <br>
  46:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *     - XMC_CAN_STATUS_t enum structure has updated. <br>
  47:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
  48:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-06-20:
  49:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *     - New APIs added: XMC_CAN_NODE_ClearStatus(),XMC_CAN_MO_ReceiveData(), XMC_CAN_GATEWAY_InitD
  50:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  51:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *      
  52:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-07-09:
  53:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *     - New API added: XMC_CAN_NODE_Enable. <br>
  54:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
  55:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-09-01:
  56:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *     - Removed fCANB clock support <br>
  57:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
  58:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-09-15:
  59:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added "xmc_can_map.h" include <br>
  60:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
  61:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * 2016-06-07:
  62:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_IsPanelControlReady()
  63:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * 
  64:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * 2017-11-09:
  65:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_InitEx() and XMC_CAN_NODE_NominalBitTimeConfigureEx()
  66:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *     - Make XMC_CAN_GetBaudrateClockSource(), XMC_CAN_SetBaudrateClockSource() and XMC_CAN_GetBau
  67:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
  68:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * <b>Details of use for node configuration related APIs</b><br>
  69:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Please use the XMC_CAN_NODE_SetInitBit() and XMC_CAN_NODE_EnableConfigurationChange() before cal
  70:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * related APIs.
  71:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange() and  XMC_CAN_NODE_ResetInitBit() can be called for dis
  72:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * change and enable the node for communication afterwards.
  73:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Do not use this when configuring the nominal bit time with XMC_CAN_NODE_NominalBitTimeConfigure(
  74:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Enable/Disable node configuration change is taken in account.
  75:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
  76:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * <b>Example Usage:</b>
  77:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @code
  78:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * //disabling the Node
  79:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetInitBit(CAN_NODE0)
  80:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * //allowing the configuration change
  81:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(CAN_NODE0)
  82:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * //Node configuration
  83:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_FrameCounterConfigure(CAN_NODE0,&can_node_frame_counter);
  84:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack(CAN_NODE0)
  85:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * //disable configuration
  86:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange(CAN_NODE0)
  87:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * //Enabling node for communication
  88:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_ResetInitBit(CAN_NODE0)
  89:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @endcode
  90:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
  91:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * 2016-06-20:
  92:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *     - Fixed bug in XMC_CAN_MO_Config() <br>  
  93:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @endcond
  94:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
  95:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
  96:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
  97:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** #ifndef XMC_CAN_H
  98:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_H
  99:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 100:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 101:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * HEADER FILES
 102:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 103:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_common.h"
 104:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 105:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** #if defined(CAN)
 106:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 107:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_scu.h"
 108:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_can_map.h"
 109:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** #include <string.h>
 110:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 111:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 112:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @addtogroup XMClib XMC Peripheral Library
 113:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @{
 114:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 115:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 116:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 117:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @addtogroup CAN
 118:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @brief Controller Area Network Controller (CAN) driver for the XMC microcontroller family.
 119:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 120:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * CAN driver provides transfer of CAN frames in accordance with CAN specificetion V2.0 B (active).
 121:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * can receive and transmit standard frames with 11-bit identifiers as well as extended frames with
 122:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * All CAN nodes share a common set of message objects. Each message object can be individually all
 123:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * CAN nodes. 
 124:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Besides serving as a storage container for incoming and outgoing frames, message objects can be 
 125:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * gateways between 
 126:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * the CAN nodes or to setup a FIFO buffer. The CAN module provides Analyzer mode,Loop-back mode an
 127:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * node analysis.
 128:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * 
 129:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * The driver is divided into five sections:
 130:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN Global features:
 131:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure module frequency using function XMC_CAN_Init().
 132:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure Module interrupt using configuration structure XMC_CAN_NODE_INTERRUPT_TRI
 133:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *    XMC_CAN_EventTrigger().
 134:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * 
 135:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_NODE features:
 136:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to set baud rate by configuration structure XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t and
 137:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *    function XMC_CAN_NODE_NominalBitTimeConfigure().
 138:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure loop-back mode using fuction XMC_CAN_NODE_EnableLoopBack().
 139:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure CAN Node analyzer using function XMC_CAN_NODE_SetAnalyzerMode().
 140:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows CAN node events enable/ disable by enum structure XMC_CAN_NODE_EVENT_t and functions X
 141:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *    and XMC_CAN_NODE_DisableEvent().
 142:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * -# Provides bit timming analysis, configuration structure XMC_CAN_NODE_FRAME_COUNTER_t and funct
 143:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *    XMC_CAN_NODE_FrameCounterConfigure(). 
 144:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 145:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_MO features:
 146:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows message object initialization by configuration structure XMC_CAN_MO_t and function XMC
 147:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows transfer of message objects using functions XMC_CAN_MO_Transmit() and XMC_CAN_MO_Recei
 148:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure Single Data Transfer and Single Transmit Trial using functions 
 149:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_MO_EnableSingleTransmitTrial() and XMC_CAN_MO_EnableSingleTransmitTrial().
 150:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure MO events using function XMC_CAN_MO_EnableEvent(). 
 151:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 152:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_FIFO features:
 153:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows message object FIFO structure by configuration structure XMC_CAN_FIFO_CONFIG_t and fun
 154:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_TXFIFO_ConfigMOBaseObject() , XMC_CAN_RXFIFO_ConfigMOBaseObject() and XMC_CAN_TXFIFO_Tra
 155:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 156:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_GATEWAY features:
 157:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * -# Provides Gateway mode, configuration structure XMC_CAN_GATEWAY_CONFIG_t and function XMC_CAN_
 158:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 159:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @{
 160:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 161:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 162:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 163:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * MACROS
 164:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 165:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Pos (18U)   /**< Standard Identifier bitposition */
 166:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 167:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Msk ((0x000007FFUL) << XMC_CAN_MO_MOAR_STDID_Pos) /**< Standard Ident
 168:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 169:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** #define CAN_NODE_NIPR_Msk         (0x7UL) /**< Node event mask */
 170:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 171:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** #define CAN_MO_MOIPR_Msk          (0x7U)  /**< Message Object event mask */
 172:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 173:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 174:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * ENUMS
 175:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 176:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 177:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  Defines the status of CAN, to verify the CAN related API calls. Use type \a XMC_CAN_STATUS_t fo
 178:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** */
 179:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_STATUS
 180:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 181:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_SUCCESS,           /**< Driver accepted application request*/
 182:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_ERROR,             /**< Returned when unknown error occurred */
 183:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_BUSY,              /**< Driver is busy and can not handle request*/
 184:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_MO_NOT_ACCEPTABLE, /**< Message object type not allowed*/
 185:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_MO_DISABLED       /**< Returned if Message object is disabled */
 186:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_STATUS_t;
 187:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 188:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 189:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** * Defines CAN module Panel Commands . Use type \a XMC_CAN_PANCMD_t for this enum.
 190:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** */
 191:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_PANCMD
 192:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 193:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_INIT_LIST = 1U,              /**< Command to initialize a list */
 194:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_ALLOCATE = 2U,        /**< Command to activate static allocation */
 195:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_ALLOCATE = 3U,       /**< Command to activate dynamic allocation */
 196:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 197:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEFORE = 4U,   /**< Remove a message object from the list and insert
 198:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEFORE = 5U,  /**< Command to activate dynamic allocation */
 199:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEHIND = 6U,   /**< Command to activate dynamic allocation */
 200:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEHIND = 7U   /**< Command to activate dynamic allocation */
 201:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_PANCMD_t;
 202:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 203:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 204:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** * Defines loop Back Mode, to enable/disable an in-system test of the MultiCAN module .
 205:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** * Use type \a XMC_CAN_LOOKBACKMODE_t for this enum.
 206:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** */
 207:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_LOOKBACKMODE
 208:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 209:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_ENABLED,   /**< Each CAN node can be connected to the internal CAN bus  */
 210:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_DISABLED   /**< Each CAN node can be connected to the external CAN bus */
 211:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_LOOKBACKMODE_t;
 212:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 213:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 214:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Defines Message Object direction. Use type \a XMC_CAN_MO_TYPE_t for this enum.
 215:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 216:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_TYPE
 217:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 218:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_RECMSGOBJ,   /**< Receive Message Object selected */
 219:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_TRANSMSGOBJ  /**< Transmit Message Object selected */
 220:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_TYPE_t;
 221:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 222:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 223:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Defines Data frame types. Use type \a XMC_CAN_FRAME_TYPE_t for this enum.
 224:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 225:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_TYPE
 226:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 227:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_STANDARD_11BITS, /**< Standard type identifier*/
 228:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_EXTENDED_29BITS  /**< Extended type identifier*/
 229:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FRAME_TYPE_t;
 230:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 231:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 232:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 233:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Defines arbitration mode for transmit acceptance filtering. Use type \a XMC_CAN_ARBITRATION_MODE
 234:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 235:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_ARBITRATION_MODE
 236:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 237:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_1 = 1U,   /**< Transmit acceptance based in the order(p
 238:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_IDE_DIR_BASED_PRIO_2 = 2U, /**< Transmit acceptance filtering is based o
 239:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_3 = 3U    /**< Transmit acceptance based in the order *
 240:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_ARBITRATION_MODE_t;
 241:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 242:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 243:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the operation mode of the frame counter. Use type \a XMC_CAN_FRAME_COUNT_MODE_t for this
 244:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 245:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_COUNT_MODE
 246:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 247:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE = 0U,       /**< Frame Count Mode */
 248:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_TIME_STAMP = 1U,  /**< The frame counter is incremented with the beginni
 249:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_BIT_TIMING = 2U   /**< Used for baud rate detection and analysis of the 
 250:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FRAME_COUNT_MODE_t;
 251:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 252:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 253:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the Divider Modes. Use type \a XMC_CAN_DM_t for this enum.
 254:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 255:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_DM
 256:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 257:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_NORMAL = 1U,      /**< Normal divider mode */
 258:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_FRACTIONAL = 2U,  /**< Fractional divider mode */
 259:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_OFF = 3U          /**< Divider Mode in off-state*/
 260:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_DM_t;
 261:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 262:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 263:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object set status. Use type \a XMC_CAN_MO_SET_STATUS_t for th
 264:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 265:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_SET_STATUS
 266:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 267:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_PENDING = CAN_MO_MOCTR_SETRXPND_Msk,     /**< Set receive pending */
 268:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_PENDING = CAN_MO_MOCTR_SETTXPND_Msk,     /**< Set transmit pending */
 269:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_UPDATING = CAN_MO_MOCTR_SETRXUPD_Msk,    /**< Set receive updating */
 270:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_NEW_DATA = CAN_MO_MOCTR_SETNEWDAT_Msk,      /**< Set new data */
 271:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_SETMSGLST_Msk,  /**< Set message lost */
 272:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_SETMSGVAL_Msk, /**< Set message valid */
 273:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_SETRTSEL_Msk, /**< Set transmit/receive selec
 274:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_ENABLE = CAN_MO_MOCTR_SETRXEN_Msk,       /**< Set receive enable */
 275:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_REQUEST = CAN_MO_MOCTR_SETTXRQ_Msk,      /**< Set transmit request */
 276:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_SETTXEN0_Msk,     /**< Set transmit enable 0 */
 277:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_SETTXEN1_Msk,     /**< Set transmit enable 1 */
 278:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_SETDIR_Msk /**< Set message direction */
 279:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_SET_STATUS_t;
 280:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 281:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 282:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object reset status. Use type \a XMC_CAN_MO_RESET_STATUS_t fo
 283:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 284:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_RESET_STATUS
 285:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 286:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_PENDING = CAN_MO_MOCTR_RESRXPND_Msk,     /**< Reset receive pending */
 287:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_PENDING = CAN_MO_MOCTR_RESTXPND_Msk,     /**< Reset transmit pending *
 288:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_UPDATING = CAN_MO_MOCTR_RESRXUPD_Msk,    /**< Reset receive updating *
 289:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_NEW_DATA = CAN_MO_MOCTR_RESNEWDAT_Msk,      /**< Reset new data */
 290:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_RESMSGLST_Msk,  /**< Reset message lost */
 291:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_RESMSGVAL_Msk, /**< Reset message valid */
 292:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_RESRTSEL_Msk, /**< Reset transmit/receive s
 293:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_ENABLE = CAN_MO_MOCTR_RESRXEN_Msk,       /**< Reset receive enable */
 294:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_REQUEST = CAN_MO_MOCTR_RESTXRQ_Msk,      /**< Reset transmit request *
 295:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_RESTXEN0_Msk,     /**< Reset transmit enable 0 
 296:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_RESTXEN1_Msk,     /**< Reset transmit enable 1 
 297:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_RESDIR_Msk /**< Reset message direction 
 298:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_RESET_STATUS_t;
 299:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 300:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 301:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object status. Use type \a XMC_CAN_MO_STATUS_t for this enum.
 302:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 303:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_STATUS
 304:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 305:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_PENDING = CAN_MO_MOSTAT_RXPND_Msk,                   /**< Defines message ha
 306:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_PENDING = CAN_MO_MOSTAT_TXPND_Msk,                   /**< Defines message ha
 307:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_UPDATING = CAN_MO_MOSTAT_RXUPD_Msk,                  /**< Defines Message id
 308:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_NEW_DATA = CAN_MO_MOSTAT_NEWDAT_Msk,                    /**< Defines no update 
 309:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_LOST = CAN_MO_MOSTAT_MSGLST_Msk,                /**< CAN message is los
 310:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_VALID = CAN_MO_MOSTAT_MSGVAL_Msk,               /**< Message valid */
 311:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_TX_SELECTED = CAN_MO_MOSTAT_RTSEL_Msk,               /**< Transmit/Receive s
 312:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_ENABLE = CAN_MO_MOSTAT_RXEN_Msk,                     /**< Receive enable */
 313:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_REQUEST = CAN_MO_MOSTAT_TXRQ_Msk,                    /**< Transmit request *
 314:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE0 = CAN_MO_MOSTAT_TXEN0_Msk,                   /**< Transmit enable 0 
 315:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE1 = CAN_MO_MOSTAT_TXEN1_Msk,                   /**< Transmit enable 1 
 316:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_DIRECTION = CAN_MO_MOSTAT_DIR_Msk,              /**< Message direction 
 317:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_LIST = CAN_MO_MOSTAT_LIST_Msk,                          /**< List allocation */
 318:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_PREVIOUS_MO = CAN_MO_MOSTAT_PPREV_Msk,     /**< Pointer to previous 
 319:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_NEXT_MO = (int32_t)CAN_MO_MOSTAT_PNEXT_Msk   /**< Pointer to next Me
 320:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_STATUS_t;
 321:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 322:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 323:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node status. Use type \a XMC_CAN_NODE_STATUS_t for this enum.
 324:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 325:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_STATUS
 326:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 327:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LAST_ERROR_CODE = CAN_NODE_NSR_LEC_Msk,       /**< Last Error Code */
 328:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_TX_OK = CAN_NODE_NSR_TXOK_Msk,                /**< Message transmitted succes
 329:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_RX_OK = CAN_NODE_NSR_RXOK_Msk,                /**< Message received successfu
 330:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ALERT_WARNING = CAN_NODE_NSR_ALERT_Msk,       /**< Alert warning */
 331:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ERROR_WARNING_STATUS = CAN_NODE_NSR_EWRN_Msk, /**< Error warning status */
 332:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_BUS_OFF= CAN_NODE_NSR_BOFF_Msk,       /**< Bus-off status */
 333:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_LENGTH_ERROR = CAN_NODE_NSR_LLE_Msk,     /**< List length error */
 334:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_OBJECT_ERROR = CAN_NODE_NSR_LOE_Msk,     /**< List object error */
 335:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 336:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_SUSPENDED_ACK = CAN_NODE_NSR_SUSACK_Msk       /**< Suspend Acknowledge */
 337:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** #endif
 338:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_STATUS_t;
 339:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 340:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 341:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node control like initialization, node disable and analyzer mode .
 342:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Use type \a XMC_CAN_NODE_CONTROL_t for this enum.
 343:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 344:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_CONTROL
 345:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 346:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_NODE_INIT = CAN_NODE_NCR_INIT_Msk,            /**< Node initialization */
 347:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_TX_INT_ENABLE = CAN_NODE_NCR_TRIE_Msk,        /**< Transfer event enable */
 348:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_LEC_INT_ENABLE = CAN_NODE_NCR_LECIE_Msk,      /**< LEC Indicated Error Event
 349:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_ALERT_INT_ENABLE = CAN_NODE_NCR_ALIE_Msk,     /**< Alert Event Enable */
 350:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_DISABLE = CAN_NODE_NCR_CANDIS_Msk,        /**< CAN disable */
 351:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CONF_CHANGE_ENABLE= CAN_NODE_NCR_CCE_Msk,     /**< Configuration change enab
 352:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_ANALYZER_NODEDE = CAN_NODE_NCR_CALM_Msk,  /**< CAN Analyzer mode */
 353:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 354:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_SUSPENDED_ENABLE = CAN_NODE_NCR_SUSEN_Msk     /**< Suspend Enable */
 355:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** #endif
 356:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_CONTROL_t;
 357:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 358:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 359:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node events. Use type \a XMC_CAN_NODE_EVENT_t for this enum.
 360:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 361:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_EVENT
 362:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 363:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_TX_INT = CAN_NODE_NCR_TRIE_Msk,   /**< Node Transfer OK Event */
 364:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_ALERT = CAN_NODE_NCR_ALIE_Msk,    /**< Node Alert Event */
 365:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_LEC = CAN_NODE_NCR_LECIE_Msk,     /**< Last Error code Event */
 366:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_CFCIE = CAN_NODE_NFCR_CFCIE_Msk   /**< CAN Frame Count Event  */
 367:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_EVENT_t;
 368:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 369:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 370:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN node pointer events position. Use type \a XMC_CAN_NODE_POINTER_EVENT_
 371:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 372:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_POINTER_EVENT
 373:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 374:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_ALERT = CAN_NODE_NIPR_ALINP_Pos,           /**< Node Alert Event node 
 375:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_LEC = CAN_NODE_NIPR_LECINP_Pos,            /**< Last Error code Event 
 376:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK = CAN_NODE_NIPR_TRINP_Pos,     /**< Transmit Event node po
 377:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER = CAN_NODE_NIPR_CFCINP_Pos   /**< CAN Frame Count Event 
 378:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_POINTER_EVENT_t;
 379:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 380:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 381:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Message Object event node pointer position. Use type \a XMC_CAN_MO_POINTER_EVENT_t f
 382:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 383:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_POINTER_EVENT
 384:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 385:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_TRANSMIT = CAN_MO_MOIPR_TXINP_Pos,     /**< Transmit Event node pointer 
 386:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_RECEIVE = CAN_MO_MOIPR_RXINP_Pos       /**< Receive Event node pointer *
 387:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_POINTER_EVENT_t;
 388:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 389:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 390:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object event type. Use type \a XMC_CAN_MO_EVENT_t for this en
 391:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 392:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_EVENT
 393:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 394:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_TRANSMIT = CAN_MO_MOFCR_TXIE_Msk,  /**< Message Object transmit event */
 395:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_RECEIVE = CAN_MO_MOFCR_RXIE_Msk,   /**< Message Object receive event */
 396:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_OVERFLOW = CAN_MO_MOFCR_OVIE_Msk,  /**< Message Object overflow event */
 397:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_EVENT_t;
 398:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 399:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 400:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the possible receive inputs. Use type \a XMC_CAN_NODE_RECEIVE_INPUT_t for this enum.
 401:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 402:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_RECEIVE_INPUT
 403:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 404:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCA,   /**< CAN Receive Input A */
 405:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCB,   /**< CAN Receive Input B */
 406:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCC,   /**< CAN Receive Input C */
 407:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCD,   /**< CAN Receive Input D */
 408:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCE,   /**< CAN Receive Input E */
 409:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCF,   /**< CAN Receive Input F */
 410:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCG,   /**< CAN Receive Input G */
 411:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCH    /**< CAN Receive Input H */
 412:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_RECEIVE_INPUT_t;
 413:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 414:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 415:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Defines last error transfer direction. Use type \a XMC_CAN_NODE_LAST_ERROR_DIR_t for this enum.
 416:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 417:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_DIR
 418:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 419:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_RECEPCION,    /**< The last error occurred while the CAN n
 420:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_TRANSMISSION  /**< The last error occurred while the CAN n
 421:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_DIR_t;
 422:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 423:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 424:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 425:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Defines last error increment. Use type \a XMC_CAN_NODE_LAST_ERROR_INC_t for this enum.
 426:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 427:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_INC
 428:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 429:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_1, /**< The last error led to an error counter increment of 1. */
 430:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_8  /**< The last error led to an error counter increment of 8. */
 431:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_INC_t;
 432:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 433:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 434:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Defines interrupt request on interrupt output line INT_O[n]. Use type \a XMC_CAN_NODE_INTERRUPT_
 435:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 436:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_INTERRUPT_TRIGGER
 437:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 438:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_0 = 0x1U,
 439:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_1 = 0x2U,
 440:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_2 = 0x4U,
 441:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_3 = 0x8U,
 442:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_4 = 0x16U,
 443:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_5 = 0x32U,
 444:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_6 = 0x64U,
 445:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_7 = 0x128U,
 446:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_INTERRUPT_TRIGGER_t;
 447:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 448:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 449:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the Clock source used for the MCAN baudrate generator 
 450:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 451:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_CANCLKSRC
 452:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {  
 453:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 454:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** #if (UC_FAMILY == XMC4)
 455:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock.
 456:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** #else
 457:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_MCLK = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock. 
 458:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** #endif
 459:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FOHP = 0x2U, /**< Use high performance oscillator (fOHP) as MCAN baudrate gener
 460:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** #else
 461:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock.
 462:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** #endif
 463:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_CANCLKSRC_t;
 464:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 465:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 466:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * DATA STRUCTURES
 467:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 468:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 469:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN node Nominal Bit Time. Use type \a XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t for this s
 470:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** */
 471:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG
 472:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 473:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   uint32_t can_frequency;       /**< Frequency of the CAN module(fCAN). \a can_frequency shall be r
 474:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   uint32_t baudrate;          /**< Specifies the node baud rate. Unit: baud \a baudrate shall be ra
 475:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   uint16_t sample_point;      /**< Sample point is used to compensate mismatch between transmitter 
 476:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****                    the synchronization segment. Sample point. Range = [0, 10000] with respect [0%, 
 477:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   uint16_t sjw;               /**< (Re) Synchronization Jump Width. Range:0-3 */
 478:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t;
 479:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 480:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 481:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Defines base, top and bottom of CAN Message Object FIFO Structure. Use type \a XMC_CAN_FIFO_CONF
 482:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * A FIFO consists of one base object and n slave objects.
 483:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 484:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_FIFO_CONFIG
 485:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 486:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_bottom;    /**< points to the first element(slave object) in a FIFO structure.Range 
 487:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_top;     /**< points to the last element(slave object) in a FIFO structure. Range :0
 488:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_base;    /**< points to the actual target object(Base object) within a FIFO/Gateway 
 489:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FIFO_CONFIG_t;
 490:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 491:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 492:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Gateway FIFO structure and provides additional options for gateway destination objec
 493:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Use type \a XMC_CAN_GATEWAY_CONFIG_t for this structure.
 494:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 495:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_GATEWAY_CONFIG
 496:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 497:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_bottom;       /**< points to the first element(gateway destination object) in a F
 498:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_top;        /**< points to the last element(gateway destination object) in a FIFO
 499:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_base;       /**< points to the actual target object within a FIFO/Gateway structu
 500:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_frame_send;   /**< TXRQ updated in the gateway destination object after the int
 501:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****                                          to the gateway destination object */
 502:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_identifier_copy;   /**< The identifier of the gateway source object (after storing t
 503:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****                                          to the gateway destination object. */
 504:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 505:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_length_code_copy; /**< Data length code of the gateway source object (after sto
 506:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****                                            gateway destination object */
 507:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_copy;  /**< Data fields in registers MODATALn and MODATAHn of the gateway sourc
 508:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****                                 are copied to the gateway destination.*/
 509:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 510:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_GATEWAY_CONFIG_t;
 511:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 512:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 513:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** * Defines CAN Global Initialization structure
 514:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** */
 515:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** typedef CAN_GLOBAL_TypeDef XMC_CAN_t;
 516:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 517:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /*Anonymous structure/union guard start*/
 518:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** #if defined(__CC_ARM)
 519:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   #pragma push
 520:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   #pragma anon_unions
 521:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** #elif defined(__TASKING__)
 522:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   #pragma warning 586
 523:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** #endif
 524:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 525:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 526:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Defines frame counter configuration. Use type \a XMC_CAN_NODE_FRAME_COUNTER_t for this structure
 527:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * It provides configuration of frame counter that counts transmitted/received CAN frames or obtain
 528:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * when a frame has been started to transmit or be received by the CAN node.
 529:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** */
 530:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_NODE_FRAME_COUNTER
 531:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 532:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 533:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   union{
 534:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 535:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t : 16;
 536:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_frame_count_selection:3;   /**<   Defines function of the frame counter  */
 537:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_frame_count_mode:2;      /**<   Determines the operation mode of the frame count
 538:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t : 11;
 539:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****     };
 540:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t nfcr;
 541:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 542:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   };
 543:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_FRAME_COUNTER_t;
 544:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 545:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 546:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *Defines Node Runtime structure.
 547:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** */
 548:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** typedef CAN_NODE_TypeDef  XMC_CAN_NODE_t;            /**<  pointer to the Node CAN register */
 549:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 550:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 551:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Message Object runtime elements. Use type \a XMC_CAN_MO_t for this structure.
 552:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 553:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_MO
 554:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 555:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   CAN_MO_TypeDef *can_mo_ptr;                     /**< Pointer to the Message Object CAN register *
 556:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   union{
 557:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 558:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_identifier:29;            /**< standard (11 bit)/Extended (29 bit) message ident
 559:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_id_mode:1;                /**< Standard/Extended identifier support */
 560:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_priority:2;               /**< Arbitration Mode/Priority */
 561:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****     };
 562:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t mo_ar;
 563:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   };
 564:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   union{
 565:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 566:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_id_mask:29;              /**< CAN Identifier of Message Object */
 567:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_ide_mask:1;              /**< Identifier Extension Bit of Message Object */
 568:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****     };
 569:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t mo_amr;
 570:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   };
 571:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t can_data_length;                        /**< Message data length, Range:0-8 */
 572:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 573:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   union{
 574:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 575:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****       uint8_t can_data_byte[8];                 /**< Each position of the array represents a data b
 576:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****       uint16_t can_data_word[4];                /**< Each position of the array represents a 16 bit
 577:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_data[2];                     /**< can_data[0] lower 4 bytes of the data. can_dat
 578:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****                               of the data */
 579:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****       uint64_t can_data_long;                   /** Data of the Message Object*/
 580:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****       };
 581:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 582:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_t can_mo_type;                  /**<  Message Type */
 583:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 584:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_t;
 585:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /*Anonymous structure/union guard end*/
 586:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** #if defined(__CC_ARM)
 587:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   #pragma pop
 588:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** #elif defined(__TASKING__)
 589:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   #pragma warning restore
 590:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** #endif
 591:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 592:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * API Prototypes
 593:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 594:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** #ifdef __cplusplus
 595:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** extern "C" {
 596:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** #endif
 597:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 598:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 599:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 600:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 601:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 602:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 603:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 604:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 605:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 606:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  Disables CAN module. In disabled state, no registers of CAN module can be read or written excep
 607:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 608:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 609:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_Enable()\n\n\n
 610:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 611:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 612:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 613:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Disable(XMC_CAN_t *const obj);
 614:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 615:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 616:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 617:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 618:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *         for details.
 619:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 620:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 621:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 622:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 623:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  Enables CAN module and initializes all CAN registers to reset values. It is required to re-conf
 624:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  before any data transfer. It configures CAN_CLC.DISR bit.
 625:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 626:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 627:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_Disable()\n\n\n
 628:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 629:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 630:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 631:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Enable(XMC_CAN_t *const obj);
 632:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 633:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 634:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 635:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 636:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *       for details.
 637:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 638:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param node_num  CAN node number,Range : 0-2
 639:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param mo_num  CAN Message Object number,Range : 0-63
 640:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 641:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 642:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 643:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 644:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  Allocates Message Object from free list to node list. Each \a node_num is linked to one unique 
 645:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  A CAN node performs message transfer only with the \a mo_num message objects that are allocated
 646:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  It configures PANCTR register.
 647:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 648:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 649:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 650:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 651:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 652:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 653:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_nu
 654:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 655:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 656:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 657:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 658:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *       for details.
 659:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 660:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @return Ready status of list controller
 661:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 662:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 663:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns ready status of the list controller
 664:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 665:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 666:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_PanelControl()
 667:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 668:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 669:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
 670:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
  27              	 .loc 1 670 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
 671:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
  43              	 .loc 1 671 0
  44 0008 7B68     	 ldr r3,[r7,#4]
  45 000a D3F8C431 	 ldr r3,[r3,#452]
  46 000e 03F44073 	 and r3,r3,#768
  47 0012 002B     	 cmp r3,#0
  48 0014 0CBF     	 ite eq
  49 0016 0123     	 moveq r3,#1
  50 0018 0023     	 movne r3,#0
  51 001a DBB2     	 uxtb r3,r3
 672:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** }
  52              	 .loc 1 672 0
  53 001c 1846     	 mov r0,r3
  54 001e 0C37     	 adds r7,r7,#12
  55              	.LCFI3:
  56              	 .cfi_def_cfa_offset 4
  57 0020 BD46     	 mov sp,r7
  58              	.LCFI4:
  59              	 .cfi_def_cfa_register 13
  60              	 
  61 0022 5DF8047B 	 ldr r7,[sp],#4
  62              	.LCFI5:
  63              	 .cfi_restore 7
  64              	 .cfi_def_cfa_offset 0
  65 0026 7047     	 bx lr
  66              	 .cfi_endproc
  67              	.LFE169:
  69              	 .section .text.XMC_CAN_PanelControl,"ax",%progbits
  70              	 .align 2
  71              	 .thumb
  72              	 .thumb_func
  74              	XMC_CAN_PanelControl:
  75              	.LFB170:
 673:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 674:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 675:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 676:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 677:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 678:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 679:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param pancmd panal command selection. Refer @ref XMC_CAN_PANCMD_t for valid values.
 680:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param arg1   Panel Argument 1,Range : 0-2
 681:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param arg2   Panel Argument 2, Range : 0-63
 682:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 683:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 684:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 685:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 686:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures the panel command and panel arguments. A panel operation consists of a command code 
 687:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  panel arguments (PANAR1, PANAR2). Commands that have a return value deliver it to the PANAR1 bi
 688:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  return an error flag deliver it to bit 31 of the Panel Control Register, this means bit 7 of PA
 689:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  panel argument PANAR1,\a arg2 represents panel argument PANAR2 and \a pancmd represents command
 690:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  register.
 691:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 692:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 693:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 694:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 695:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 696:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 697:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
 698:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_PANCMD_t pancmd,
 699:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****                                       const uint8_t arg1,
 700:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****                                       const uint8_t arg2)
 701:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
  76              	 .loc 1 701 0
  77              	 .cfi_startproc
  78              	 
  79              	 
  80              	 
  81 0000 80B4     	 push {r7}
  82              	.LCFI6:
  83              	 .cfi_def_cfa_offset 4
  84              	 .cfi_offset 7,-4
  85 0002 83B0     	 sub sp,sp,#12
  86              	.LCFI7:
  87              	 .cfi_def_cfa_offset 16
  88 0004 00AF     	 add r7,sp,#0
  89              	.LCFI8:
  90              	 .cfi_def_cfa_register 7
  91 0006 7860     	 str r0,[r7,#4]
  92 0008 0846     	 mov r0,r1
  93 000a 1146     	 mov r1,r2
  94 000c 1A46     	 mov r2,r3
  95 000e 0346     	 mov r3,r0
  96 0010 FB70     	 strb r3,[r7,#3]
  97 0012 0B46     	 mov r3,r1
  98 0014 BB70     	 strb r3,[r7,#2]
  99 0016 1346     	 mov r3,r2
 100 0018 7B70     	 strb r3,[r7,#1]
 702:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 101              	 .loc 1 702 0
 102 001a FA78     	 ldrb r2,[r7,#3]
 703:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 103              	 .loc 1 703 0
 104 001c BB78     	 ldrb r3,[r7,#2]
 105 001e 1B04     	 lsls r3,r3,#16
 106 0020 03F47F03 	 and r3,r3,#16711680
 702:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 107              	 .loc 1 702 0
 108 0024 1A43     	 orrs r2,r2,r3
 704:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 109              	 .loc 1 704 0
 110 0026 7B78     	 ldrb r3,[r7,#1]
 111 0028 1B06     	 lsls r3,r3,#24
 703:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 112              	 .loc 1 703 0
 113 002a 1A43     	 orrs r2,r2,r3
 702:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 114              	 .loc 1 702 0
 115 002c 7B68     	 ldr r3,[r7,#4]
 116 002e C3F8C421 	 str r2,[r3,#452]
 705:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** }
 117              	 .loc 1 705 0
 118 0032 0C37     	 adds r7,r7,#12
 119              	.LCFI9:
 120              	 .cfi_def_cfa_offset 4
 121 0034 BD46     	 mov sp,r7
 122              	.LCFI10:
 123              	 .cfi_def_cfa_register 13
 124              	 
 125 0036 5DF8047B 	 ldr r7,[sp],#4
 126              	.LCFI11:
 127              	 .cfi_restore 7
 128              	 .cfi_def_cfa_offset 0
 129 003a 7047     	 bx lr
 130              	 .cfi_endproc
 131              	.LFE170:
 133              	 .section .text.XMC_CAN_NODE_EnableConfigurationChange,"ax",%progbits
 134              	 .align 2
 135              	 .thumb
 136              	 .thumb_func
 138              	XMC_CAN_NODE_EnableConfigurationChange:
 139              	.LFB186:
 706:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 707:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 708:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 709:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 710:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 711:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 712:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 713:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param service_requestr  Interrupt trigger number selection. Refer @ref XMC_CAN_NODE_INTERRUPT_T
 714:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *               Multiple interrupt trigger events can be ORed.
 715:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 716:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 717:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 718:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 719:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures multiple interrupt requests with a single write operation. \a service_requestr repre
 720:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  request or multiple.It configures MITR register.
 721:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 722:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 723:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 724:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 725:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 726:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 727:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_EventTrigger(XMC_CAN_t *const obj,const XMC_CAN_NODE_INTERRUPT_TRIGGER
 728:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 729:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   obj->MITR = ((uint32_t)service_requestr << CAN_MITR_IT_Pos) & (uint32_t)CAN_MITR_IT_Msk;
 730:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** }
 731:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 732:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 733:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 734:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 735:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 736:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 737:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 738:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param clksrc CAN module frequency clock source
 739:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_frequency CAN module frequency(fCAN). 
 740:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *        The can_frequency shall be an integer divisor of the CAN clock source frequency (fPERI/fM
 741:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *        it should be selected such that if fulfills the minimum operating frequency specified in 
 742:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *        In addition the can_frequency shall be an integer multiple of the baudrate.
 743:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *        Max. value: Max. clock source frequency, i.e. if using fOHP and using a XTAL of 20MHz the
 744:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 745:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @return Actual frequency
 746:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 747:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 748:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Similar to XMC_CAN_Init() configures clock rate of the module timer clock fCAN. 
 749:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * The difference being that only the normal divider is used to avoid jitter.
 750:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * In addition the actual achievable frequency is returned.
 751:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use XMC_CAN_InitEx() for new projects. XMC_CAN_Init() is kept for backward compatibility r
 752:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 753:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Altering CAN module \a can_frequency shall affects baud rate, call XMC_CAN_NODE_NominalBitTimeCo
 754:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * It configures FDR register.
 755:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 756:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 757:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure(), XMC_CAN_NODE_NominalBitTimeConfigureEx()\n\n\n
 758:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 759:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 760:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 761:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 762:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 763:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 764:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 765:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 766:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @return Baudrate generator clock source
 767:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 768:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 769:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Returns CAN baudrate generator clock source
 770:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 771:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use only for XMC1400 series and XMC47/4800 series projects
 772:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 773:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 774:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj);
 775:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 776:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 777:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 778:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 779:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 780:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 781:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * 
 782:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 783:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Sets CAN baudrate generator clock source
 784:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 785:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use only for XMC1400 series and XMC47/4800 series projects
 786:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 787:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 788:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source);
 789:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 790:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 791:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 792:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 793:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 794:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @return baudrate generator input clock frequency 
 795:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 796:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 797:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Gets CAN baudrate generator input clock frequency
 798:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 799:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use only for XMC1400 series and XMC47/4800 series projects
 800:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 801:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 802:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj);
 803:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 804:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 805:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 806:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 807:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 808:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 809:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 810:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param clksrc CAN module frequency clock source.
 811:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_frequency CAN module frequency(fCAN). Max. value: Max. clock source frequency, i.e. i
 812:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use clksrc parameter only for XMC1400 series and XMC47/4800 series projects, otherwise omi
 813:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 814:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 815:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 816:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 817:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Configures clock rate of the module timer clock fCAN. Altering CAN module \a can_frequency shall
 818:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * call XMC_CAN_NODE_NominalBitTimeConfigure() or XMC_CAN_NODE_NominalBitTimeConfigureEx() to confi
 819:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * It configures FDR register.
 820:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 821:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use XMC_CAN_InitEx() for new projects. XMC_CAN_Init() is kept for backward compatibility r
 822:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 823:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 824:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure(), XMC_CAN_NODE_NominalBitTimeConfigureEx(), XMC_CAN_InitEx
 825:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 826:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 827:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 828:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** #else
 829:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency);
 830:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** #endif
 831:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 832:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 833:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 834:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
 835:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 836:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 837:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 838:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 839:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Initializes CAN message object. Initialization includes configuring Message Object identifier ty
 840:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * identifier value, Message Object type, and transfer requests. It configures FDR register.
 841:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 842:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 843:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * None
 844:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 845:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 846:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo);
 847:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 848:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /* NODE APIs */
 849:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 850:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 851:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 852:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node      Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers.
 853:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param ptr_event     CAN_NODE interrupt pointer position. Refer @ref XMC_CAN_NODE_POINTER_EVENT_
 854:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param service_request Interrupt service request number. Range : 0-7
 855:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 856:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 857:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 858:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 859:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures node interrupt pointer \a service_request for CAN Node events \a ptr_event. It confi
 860:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 861:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 862:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * None
 863:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 864:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 865:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 866:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
 867:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
 868:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****                                           const uint32_t service_request)
 869:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 870:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_eve
 871:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** }
 872:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 873:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 874:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 875:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 876:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node    Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CA
 877:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_bit_time  Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMI
 878:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 879:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 880:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 881:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 882:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 883:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * It configures NBTR register.
 884:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 885:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 886:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * None
 887:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 888:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 889:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_NominalBitTimeConfigure(XMC_CAN_NODE_t *const can_node,
 890:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_b
 891:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 892:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 893:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 894:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node    Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CA
 895:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_bit_time  Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMI
 896:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 897:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @return Status on the sucess setting the desired bitrate XMC_CAN_STATUS_t
 898:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 899:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 900:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Similar to XMC_CAN_NODE_NominalBitTimeConfigure() configures the CAN node baudrate. 
 901:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * The difference being that allows bitrates below 100kpbs.
 902:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @note Consider using the new API for new projects. XMC_CAN_NODE_NominalBitTimeConfigure() is kep
 903:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 904:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 905:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * It configures NBTR register.
 906:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 907:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 908:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_InitEx()
 909:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 910:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 911:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
 912:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****                                                const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const 
 913:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 914:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 915:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 916:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param input    CAN receive input selection. Refer @ref XMC_CAN_NODE_RECEIVE_INPUT_t for details
 917:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 918:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 919:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 920:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 921:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \a input specifies CAN input receive pin. This API Configures NPCRx register,it is required to c
 922:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(), before configuring NPCRx register, call XMC_CAN_NODE_D
 923:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * API after configuring NPCRx register. CAN input receive pins which falls under analog port pins 
 924:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_GPIO_EnableDigitalInput(),to enable digital pad.
 925:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 926:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *\par<b>Related APIs:</b><BR>
 927:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * None
 928:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 929:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
 930:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 931:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 932:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 933:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 934:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
 935:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****                                               const XMC_CAN_NODE_RECEIVE_INPUT_t input)
 936:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 937:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 938:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****                    (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Ms
 939:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** }
 940:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 941:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 942:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 943:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node  Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_
 944:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 945:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 946:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 947:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 948:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Enable Node \a can_node in Loop-Back Mode. A Node is connected to an internal (virtual) loop-bac
 949:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * nodes which are in Loop- Back Mode are connected to this virtual CAN bus so that they can commun
 950:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * other internally. The external transmit line is forced recessive in Loop-Back Mode. This API Con
 951:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 952:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * API after NPCRx configuration configuration.
 953:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 954:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 955:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_DisableLoopBack().
 956:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 957:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  \par<b>Note:</b><br>
 958:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  NPCRx can be written only if bit NCRx.CCE is set.
 959:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 960:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 961:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 962:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
 963:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 964:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 965:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** }
 966:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 967:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 968:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 969:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 970:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 971:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 972:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 973:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 974:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Disable Node Loop-Back Mode, disables internal (virtual) loop-back CAN bus. This API Configures 
 975:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 976:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * API after NPCRx configuration.
 977:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 978:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 979:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack()
 980:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 981:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 982:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
 983:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 984:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 985:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
 986:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 987:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableLoopBack(XMC_CAN_NODE_t *const can_node)
 988:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 989:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR &= ~(uint32_t)CAN_NODE_NPCR_LBM_Msk;
 990:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** }
 991:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 992:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
 993:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
 994:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 995:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 996:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param event    CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
 997:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *           multiple events can be ORed.
 998:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
 999:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1000:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1001:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1002:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  Enable CAN Node events. It configures NFCR register.
1003:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1004:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1005:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableEvent()
1006:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1007:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
1008:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1009:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
1010:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1011:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1012:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
1013:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1014:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1015:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param event    CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
1016:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *           multiple events can be ORed.
1017:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1018:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1019:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1020:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1021:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  Disable CAN Node events. It configures NFCR register.
1022:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1023:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1024:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableEvent()
1025:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1026:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
1027:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1028:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_DisableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
1029:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1030:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1031:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
1032:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1033:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
1034:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1035:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_DIR_t Last error transfer direction. Refer @ref XMC_CAN_NODE_LAS
1036:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1037:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1038:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Returns NODE Last Error occurred during Transmit/receive direction. It returns value of NFCR reg
1039:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1040:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1041:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferInc()\n\n\n
1042:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1043:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
1044:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1045:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_DIR_t XMC_CAN_NODE_GetLastErrTransferDir(XMC_CAN_NODE_t *co
1046:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
1047:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_DIR_t)(((node->NECNT) & CAN_NODE_NECNT_LETD_Msk) >> CAN_NODE_NECN
1048:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** }
1049:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1050:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1051:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
1052:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1053:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
1054:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1055:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_INC_t Last error transfer increment. Refer @ref XMC_CAN_NODE_LAS
1056:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1057:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1058:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns NODE Last Error Transfer Increment. It returns value of NFCR register.
1059:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1060:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1061:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferDir()\n\n\n
1062:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1063:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
1064:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1065:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_INC_t XMC_CAN_NODE_GetLastErrTransferInc(XMC_CAN_NODE_t *co
1066:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
1067:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_INC_t)(((node->NECNT) & CAN_NODE_NECNT_LEINC_Msk)>> CAN_NODE_NECN
1068:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** }
1069:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1070:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1071:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
1072:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1073:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1074:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param  error_warning_level  Error Warning level value. Range :0-255.
1075:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1076:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1077:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1078:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1079:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Configures error warning level in order to set the corresponding error warning bit EWRN. It conf
1080:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * into NECNT register. Before this configuration call XMC_CAN_NODE_EnableConfigurationChange() API
1081:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1082:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1083:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetErrorWarningLevel()\n\n\n
1084:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1085:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1086:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1087:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1088:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
1089:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1090:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetErrorWarningLevel(XMC_CAN_NODE_t *const can_node, uint8_t erro
1091:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
1092:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_EWRNLVL_Msk)) |
1093:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****                     (((uint32_t)error_warning_level << CAN_NODE_NECNT_EWRNLVL_Pos) & (uint32_t)CAN_
1094:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** }
1095:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1096:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1097:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
1098:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1099:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1100:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_tec  transmit error counter value. Range :0-255
1101:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1102:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1103:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1104:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1105:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures Transmit error counter. It configures \a can_tec into NECNT register. Before this co
1106:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_EnableConfigurationChange() API.
1107:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1108:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1109:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetTransmitErrorCounter()\n\n\n
1110:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1111:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  \par<b>Note:</b><br>
1112:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1113:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1114:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
1115:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1116:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1117:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t c
1118:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
1119:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_TEC_Msk)) |
1120:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****                     (((uint32_t)can_tec << CAN_NODE_NECNT_TEC_Pos) & (uint32_t)CAN_NODE_NECNT_TEC_M
1121:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** }
1122:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1123:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1124:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
1125:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1126:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1127:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_rec  receive error counter value. Range :0-255
1128:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1129:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1130:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1131:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1132:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Configures Receive Error Counter. It configures \a can_rec into NECNT register. Before this conf
1133:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange() API.
1134:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1135:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1136:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetReceiveErrorCounter()\n\n\n
1137:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1138:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1139:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1140:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1141:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
1142:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1143:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t ca
1144:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
1145:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_REC_Msk)) |
1146:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****                    (((uint32_t)can_rec << CAN_NODE_NECNT_REC_Pos) & (uint32_t)CAN_NODE_NECNT_REC_Ms
1147:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** }
1148:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1149:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1150:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
1151:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1152:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1153:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1154:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t Error Warning Level. Range :0 - 255
1155:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1156:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1157:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns error warning level. This determines the threshold value (warning level, default 96) to
1158:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  to set the corresponding error warning bit EWRN. It reads NECNT register.
1159:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1160:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1161:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetErrorWarningLevel()\n\n\n
1162:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1163:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
1164:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1165:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1166:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetErrorWarningLevel(XMC_CAN_NODE_t *const can_node)
1167:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
1168:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_EWRNLVL_Msk) >> CAN_NODE_NECNT_EWR
1169:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** }
1170:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1171:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1172:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
1173:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1174:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1175:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1176:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t transmit error counter value. Range :0 - 255
1177:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1178:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1179:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns Transmit Error Counter value. If the Bitstream Processor detects an error while a trans
1180:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  running, the Transmit Error Counter is incremented by 8. An increment of 1 is used when the err
1181:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  reported by an external CAN node via an Error Frame generation. It reads NECNT register.
1182:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1183:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1184:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetTransmitErrorCounter()
1185:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1186:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1187:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1188:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1189:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
1190:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1191:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node)
1192:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
1193:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_TEC_Msk) >> CAN_NODE_NECNT_TEC_Po
1194:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** }
1195:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1196:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1197:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
1198:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1199:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1200:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1201:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t  receive error counter value.
1202:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1203:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1204:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns Receive Error Counter value. It reads NECNT register.
1205:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1206:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1207:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetReceiveErrorCounter()
1208:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1209:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
1210:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1211:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node)
1212:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
1213:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_REC_Msk) >> CAN_NODE_NECNT_REC_Po
1214:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** }
1215:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1216:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1217:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
1218:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1219:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1220:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1221:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint32_t Current status of the node.
1222:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1223:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1224:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Returns errors status as well as successfully transferred CAN frames status.
1225:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1226:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1227:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_ClearStatus()
1228:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1229:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
1230:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1231:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint32_t XMC_CAN_NODE_GetStatus(XMC_CAN_NODE_t *const can_node)
1232:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
1233:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   return ((can_node->NSR));
1234:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** }
1235:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1236:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
1237:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1238:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1239:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node_status Status to clear.Refer @ref XMC_CAN_NODE_STATUS_t for valid values.
1240:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1241:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1242:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1243:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1244:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Clear errors status as well as successfully transferred CAN frames status.
1245:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1246:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1247:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetStatus()
1248:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1249:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
1250:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1251:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_ClearStatus(XMC_CAN_NODE_t *const can_node,XMC_CAN_NODE_STATUS_t 
1252:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
1253:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****    can_node->NSR &= ~(uint32_t)can_node_status;
1254:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** }
1255:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1256:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1257:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
1258:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1259:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1260:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1261:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1262:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1263:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1264:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * Allow to change the configuration of the CAN node, like bit timing, CAN bus transmit/receive por
1265:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * counters read. It configures NCRx.CCE bit.
1266:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1267:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1268:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange()
1269:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1270:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
1271:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1272:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1273:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 140              	 .loc 1 1273 0
 141              	 .cfi_startproc
 142              	 
 143              	 
 144              	 
 145 0000 80B4     	 push {r7}
 146              	.LCFI12:
 147              	 .cfi_def_cfa_offset 4
 148              	 .cfi_offset 7,-4
 149 0002 83B0     	 sub sp,sp,#12
 150              	.LCFI13:
 151              	 .cfi_def_cfa_offset 16
 152 0004 00AF     	 add r7,sp,#0
 153              	.LCFI14:
 154              	 .cfi_def_cfa_register 7
 155 0006 7860     	 str r0,[r7,#4]
1274:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 156              	 .loc 1 1274 0
 157 0008 7B68     	 ldr r3,[r7,#4]
 158 000a 1B68     	 ldr r3,[r3]
 159 000c 43F04002 	 orr r2,r3,#64
 160 0010 7B68     	 ldr r3,[r7,#4]
 161 0012 1A60     	 str r2,[r3]
1275:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** }
 162              	 .loc 1 1275 0
 163 0014 0C37     	 adds r7,r7,#12
 164              	.LCFI15:
 165              	 .cfi_def_cfa_offset 4
 166 0016 BD46     	 mov sp,r7
 167              	.LCFI16:
 168              	 .cfi_def_cfa_register 13
 169              	 
 170 0018 5DF8047B 	 ldr r7,[sp],#4
 171              	.LCFI17:
 172              	 .cfi_restore 7
 173              	 .cfi_def_cfa_offset 0
 174 001c 7047     	 bx lr
 175              	 .cfi_endproc
 176              	.LFE186:
 178 001e 00BF     	 .section .text.XMC_CAN_NODE_DisableConfigurationChange,"ax",%progbits
 179              	 .align 2
 180              	 .thumb
 181              	 .thumb_func
 183              	XMC_CAN_NODE_DisableConfigurationChange:
 184              	.LFB187:
1276:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1277:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1278:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** /**
1279:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1280:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1281:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1282:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1283:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1284:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1285:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *  Forbid to change the configuration of the CAN node. It configures NCRx.CCE bit.
1286:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1287:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1288:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange()
1289:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  *
1290:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****  */
1291:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** 
1292:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1293:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** {
 185              	 .loc 1 1293 0
 186              	 .cfi_startproc
 187              	 
 188              	 
 189              	 
 190 0000 80B4     	 push {r7}
 191              	.LCFI18:
 192              	 .cfi_def_cfa_offset 4
 193              	 .cfi_offset 7,-4
 194 0002 83B0     	 sub sp,sp,#12
 195              	.LCFI19:
 196              	 .cfi_def_cfa_offset 16
 197 0004 00AF     	 add r7,sp,#0
 198              	.LCFI20:
 199              	 .cfi_def_cfa_register 7
 200 0006 7860     	 str r0,[r7,#4]
1294:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 201              	 .loc 1 1294 0
 202 0008 7B68     	 ldr r3,[r7,#4]
 203 000a 1B68     	 ldr r3,[r3]
 204 000c 23F04002 	 bic r2,r3,#64
 205 0010 7B68     	 ldr r3,[r7,#4]
 206 0012 1A60     	 str r2,[r3]
1295:F:/Fuckultate/ProectSI/Libraries/XMCLib/inc\xmc_can.h **** }
 207              	 .loc 1 1295 0
 208 0014 0C37     	 adds r7,r7,#12
 209              	.LCFI21:
 210              	 .cfi_def_cfa_offset 4
 211 0016 BD46     	 mov sp,r7
 212              	.LCFI22:
 213              	 .cfi_def_cfa_register 13
 214              	 
 215 0018 5DF8047B 	 ldr r7,[sp],#4
 216              	.LCFI23:
 217              	 .cfi_restore 7
 218              	 .cfi_def_cfa_offset 0
 219 001c 7047     	 bx lr
 220              	 .cfi_endproc
 221              	.LFE187:
 223 001e 00BF     	 .section .text.max,"ax",%progbits
 224              	 .align 2
 225              	 .thumb
 226              	 .thumb_func
 228              	max:
 229              	.LFB222:
 230              	 .file 2 "../Libraries/XMCLib/src/xmc_can.c"
   1:../Libraries/XMCLib/src/xmc_can.c **** /**
   2:../Libraries/XMCLib/src/xmc_can.c ****  * @file xmc_can.c
   3:../Libraries/XMCLib/src/xmc_can.c ****  * @date 2017-11-09
   4:../Libraries/XMCLib/src/xmc_can.c ****  *
   5:../Libraries/XMCLib/src/xmc_can.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_can.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_can.c ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_can.c ****  *
   9:../Libraries/XMCLib/src/xmc_can.c ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_can.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_can.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_can.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_can.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_can.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_can.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_can.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_can.c ****  * 
  18:../Libraries/XMCLib/src/xmc_can.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_can.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_can.c ****  * 
  21:../Libraries/XMCLib/src/xmc_can.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_can.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_can.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_can.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_can.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_can.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_can.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_can.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_can.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_can.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_can.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_can.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_can.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_can.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_can.c ****  *
  36:../Libraries/XMCLib/src/xmc_can.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_can.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_can.c ****  *
  39:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_can.c ****  *     - Initial draft <br>
  41:../Libraries/XMCLib/src/xmc_can.c ****  *
  42:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-05-20:
  43:../Libraries/XMCLib/src/xmc_can.c ****  *     - New API added: XMC_CAN_MO_ReceiveData() <br>
  44:../Libraries/XMCLib/src/xmc_can.c ****  *     - XMC_CAN_MO_Config() signature has changed <br>
  45:../Libraries/XMCLib/src/xmc_can.c ****  *     - Minor fix in XMC_CAN_TXFIFO_ConfigMOSlaveObject(). <br>
  46:../Libraries/XMCLib/src/xmc_can.c ****  *
  47:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-06-20:
  48:../Libraries/XMCLib/src/xmc_can.c ****  *     - Removed version macros and declaration of GetDriverVersion API
  49:../Libraries/XMCLib/src/xmc_can.c ****  *
  50:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-09-01:
  51:../Libraries/XMCLib/src/xmc_can.c ****  *     - Removed  fCANB clock support <br>
  52:../Libraries/XMCLib/src/xmc_can.c ****  *
  53:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-09-08:
  54:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed bug in XMC_CAN_Init() <br>
  55:../Libraries/XMCLib/src/xmc_can.c ****  *
  56:../Libraries/XMCLib/src/xmc_can.c ****  * 2016-06-07:
  57:../Libraries/XMCLib/src/xmc_can.c ****  *     - Changed XMC_CAN_AllocateMOtoNodeList to wait for ready status of list controller
  58:../Libraries/XMCLib/src/xmc_can.c ****  *
  59:../Libraries/XMCLib/src/xmc_can.c ****  * 2016-06-20:
  60:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed bug in XMC_CAN_MO_Config() <br> 
  61:../Libraries/XMCLib/src/xmc_can.c ****  *
  62:../Libraries/XMCLib/src/xmc_can.c ****  * 2017-11-09:
  63:../Libraries/XMCLib/src/xmc_can.c ****  *     - Added XMC_CAN_InitEx() and XMC_CAN_NODE_NominalBitTimeConfigureEx()
  64:../Libraries/XMCLib/src/xmc_can.c ****  *     - Make XMC_CAN_GetBaudrateClockSource(), XMC_CAN_SetBaudrateClockSource() and XMC_CAN_GetBau
  65:../Libraries/XMCLib/src/xmc_can.c ****  *     - Changed refactoring XMC_CAN_MO_Config() to configure MOCTR depending on transmit or receiv
  66:../Libraries/XMCLib/src/xmc_can.c ****  *
  67:../Libraries/XMCLib/src/xmc_can.c ****  * @endcond
  68:../Libraries/XMCLib/src/xmc_can.c ****  *
  69:../Libraries/XMCLib/src/xmc_can.c ****  */ 
  70:../Libraries/XMCLib/src/xmc_can.c **** 
  71:../Libraries/XMCLib/src/xmc_can.c **** /*******************************************************************************
  72:../Libraries/XMCLib/src/xmc_can.c ****  * HEADER FILES
  73:../Libraries/XMCLib/src/xmc_can.c ****  *******************************************************************************/
  74:../Libraries/XMCLib/src/xmc_can.c **** #include "xmc_can.h"
  75:../Libraries/XMCLib/src/xmc_can.c **** 
  76:../Libraries/XMCLib/src/xmc_can.c **** #if defined(CAN)
  77:../Libraries/XMCLib/src/xmc_can.c **** #include "xmc_scu.h"
  78:../Libraries/XMCLib/src/xmc_can.c **** 
  79:../Libraries/XMCLib/src/xmc_can.c **** __STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
  80:../Libraries/XMCLib/src/xmc_can.c **** {
 231              	 .loc 2 80 0
 232              	 .cfi_startproc
 233              	 
 234              	 
 235              	 
 236 0000 80B4     	 push {r7}
 237              	.LCFI24:
 238              	 .cfi_def_cfa_offset 4
 239              	 .cfi_offset 7,-4
 240 0002 83B0     	 sub sp,sp,#12
 241              	.LCFI25:
 242              	 .cfi_def_cfa_offset 16
 243 0004 00AF     	 add r7,sp,#0
 244              	.LCFI26:
 245              	 .cfi_def_cfa_register 7
 246 0006 7860     	 str r0,[r7,#4]
 247 0008 3960     	 str r1,[r7]
  81:../Libraries/XMCLib/src/xmc_can.c ****   return (a > b) ? a : b;
 248              	 .loc 2 81 0
 249 000a 3A68     	 ldr r2,[r7]
 250 000c 7B68     	 ldr r3,[r7,#4]
 251 000e 9342     	 cmp r3,r2
 252 0010 38BF     	 it cc
 253 0012 1346     	 movcc r3,r2
  82:../Libraries/XMCLib/src/xmc_can.c **** }
 254              	 .loc 2 82 0
 255 0014 1846     	 mov r0,r3
 256 0016 0C37     	 adds r7,r7,#12
 257              	.LCFI27:
 258              	 .cfi_def_cfa_offset 4
 259 0018 BD46     	 mov sp,r7
 260              	.LCFI28:
 261              	 .cfi_def_cfa_register 13
 262              	 
 263 001a 5DF8047B 	 ldr r7,[sp],#4
 264              	.LCFI29:
 265              	 .cfi_restore 7
 266              	 .cfi_def_cfa_offset 0
 267 001e 7047     	 bx lr
 268              	 .cfi_endproc
 269              	.LFE222:
 271              	 .section .text.min,"ax",%progbits
 272              	 .align 2
 273              	 .thumb
 274              	 .thumb_func
 276              	min:
 277              	.LFB223:
  83:../Libraries/XMCLib/src/xmc_can.c **** 
  84:../Libraries/XMCLib/src/xmc_can.c **** __STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
  85:../Libraries/XMCLib/src/xmc_can.c **** {
 278              	 .loc 2 85 0
 279              	 .cfi_startproc
 280              	 
 281              	 
 282              	 
 283 0000 80B4     	 push {r7}
 284              	.LCFI30:
 285              	 .cfi_def_cfa_offset 4
 286              	 .cfi_offset 7,-4
 287 0002 83B0     	 sub sp,sp,#12
 288              	.LCFI31:
 289              	 .cfi_def_cfa_offset 16
 290 0004 00AF     	 add r7,sp,#0
 291              	.LCFI32:
 292              	 .cfi_def_cfa_register 7
 293 0006 7860     	 str r0,[r7,#4]
 294 0008 3960     	 str r1,[r7]
  86:../Libraries/XMCLib/src/xmc_can.c ****   return (a < b) ? a : b;
 295              	 .loc 2 86 0
 296 000a 3A68     	 ldr r2,[r7]
 297 000c 7B68     	 ldr r3,[r7,#4]
 298 000e 9342     	 cmp r3,r2
 299 0010 28BF     	 it cs
 300 0012 1346     	 movcs r3,r2
  87:../Libraries/XMCLib/src/xmc_can.c **** }
 301              	 .loc 2 87 0
 302 0014 1846     	 mov r0,r3
 303 0016 0C37     	 adds r7,r7,#12
 304              	.LCFI33:
 305              	 .cfi_def_cfa_offset 4
 306 0018 BD46     	 mov sp,r7
 307              	.LCFI34:
 308              	 .cfi_def_cfa_register 13
 309              	 
 310 001a 5DF8047B 	 ldr r7,[sp],#4
 311              	.LCFI35:
 312              	 .cfi_restore 7
 313              	 .cfi_def_cfa_offset 0
 314 001e 7047     	 bx lr
 315              	 .cfi_endproc
 316              	.LFE223:
 318              	 .section .text.XMC_CAN_NODE_NominalBitTimeConfigureEx,"ax",%progbits
 319              	 .align 2
 320              	 .global XMC_CAN_NODE_NominalBitTimeConfigureEx
 321              	 .thumb
 322              	 .thumb_func
 324              	XMC_CAN_NODE_NominalBitTimeConfigureEx:
 325              	.LFB224:
  88:../Libraries/XMCLib/src/xmc_can.c **** 
  89:../Libraries/XMCLib/src/xmc_can.c **** /*******************************************************************************
  90:../Libraries/XMCLib/src/xmc_can.c ****  * API IMPLEMENTATION
  91:../Libraries/XMCLib/src/xmc_can.c ****  *******************************************************************************/
  92:../Libraries/XMCLib/src/xmc_can.c **** 
  93:../Libraries/XMCLib/src/xmc_can.c **** /* The max prescaler is the equal to max BRP setting (64) multiply by 8 (DIV8) */
  94:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_PRESCALER 512
  95:../Libraries/XMCLib/src/xmc_can.c **** 
  96:../Libraries/XMCLib/src/xmc_can.c **** /* maximum TSEG1 is 16 and maximum TSEG2 is 8, plus one fix sync tq */
  97:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_NTQ 25
  98:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MIN_NTQ 8
  99:../Libraries/XMCLib/src/xmc_can.c **** 
 100:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MIN_TSEG1 3
 101:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MIN_TSEG2 2
 102:../Libraries/XMCLib/src/xmc_can.c **** 
 103:../Libraries/XMCLib/src/xmc_can.c **** int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
 104:../Libraries/XMCLib/src/xmc_can.c ****                                                const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const 
 105:../Libraries/XMCLib/src/xmc_can.c **** {
 326              	 .loc 2 105 0
 327              	 .cfi_startproc
 328              	 
 329              	 
 330 0000 80B5     	 push {r7,lr}
 331              	.LCFI36:
 332              	 .cfi_def_cfa_offset 8
 333              	 .cfi_offset 7,-8
 334              	 .cfi_offset 14,-4
 335 0002 88B0     	 sub sp,sp,#32
 336              	.LCFI37:
 337              	 .cfi_def_cfa_offset 40
 338 0004 00AF     	 add r7,sp,#0
 339              	.LCFI38:
 340              	 .cfi_def_cfa_register 7
 341 0006 7860     	 str r0,[r7,#4]
 342 0008 3960     	 str r1,[r7]
 106:../Libraries/XMCLib/src/xmc_can.c ****   /* Check that the CAN frequency is a multiple of the required baudrate */
 107:../Libraries/XMCLib/src/xmc_can.c ****   if ((bit_time_config->can_frequency % bit_time_config->baudrate) == 0)
 343              	 .loc 2 107 0
 344 000a 3B68     	 ldr r3,[r7]
 345 000c 1B68     	 ldr r3,[r3]
 346 000e 3A68     	 ldr r2,[r7]
 347 0010 5268     	 ldr r2,[r2,#4]
 348 0012 B3FBF2F1 	 udiv r1,r3,r2
 349 0016 02FB01F2 	 mul r2,r2,r1
 350 001a 9B1A     	 subs r3,r3,r2
 351 001c 002B     	 cmp r3,#0
 352 001e 78D1     	 bne .L11
 353              	.LBB2:
 108:../Libraries/XMCLib/src/xmc_can.c ****   {
 109:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t prescaler;
 110:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t div8 = 0;
 354              	 .loc 2 110 0
 355 0020 0023     	 movs r3,#0
 356 0022 BB61     	 str r3,[r7,#24]
 111:../Libraries/XMCLib/src/xmc_can.c **** 
 112:../Libraries/XMCLib/src/xmc_can.c ****   /* Calculate the factor between can frequency and required baudrate, this is equal to (prescaler 
 113:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t fcan_div = bit_time_config->can_frequency / bit_time_config->baudrate;
 357              	 .loc 2 113 0
 358 0024 3B68     	 ldr r3,[r7]
 359 0026 1A68     	 ldr r2,[r3]
 360 0028 3B68     	 ldr r3,[r7]
 361 002a 5B68     	 ldr r3,[r3,#4]
 362 002c B2FBF3F3 	 udiv r3,r2,r3
 363 0030 3B61     	 str r3,[r7,#16]
 114:../Libraries/XMCLib/src/xmc_can.c **** 
 115:../Libraries/XMCLib/src/xmc_can.c ****     /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bi
 116:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
 364              	 .loc 2 116 0
 365 0032 1923     	 movs r3,#25
 366 0034 7B61     	 str r3,[r7,#20]
 117:../Libraries/XMCLib/src/xmc_can.c ****     while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 367              	 .loc 2 117 0
 368 0036 24E0     	 b .L12
 369              	.L16:
 118:../Libraries/XMCLib/src/xmc_can.c ****     {
 119:../Libraries/XMCLib/src/xmc_can.c ****       /* consider this ntq, only if fcan_div is multiple of ntq */
 120:../Libraries/XMCLib/src/xmc_can.c ****     if ((fcan_div % ntq) == 0)
 370              	 .loc 2 120 0
 371 0038 3B69     	 ldr r3,[r7,#16]
 372 003a 7A69     	 ldr r2,[r7,#20]
 373 003c B3FBF2F2 	 udiv r2,r3,r2
 374 0040 7969     	 ldr r1,[r7,#20]
 375 0042 01FB02F2 	 mul r2,r1,r2
 376 0046 9B1A     	 subs r3,r3,r2
 377 0048 002B     	 cmp r3,#0
 378 004a 17D1     	 bne .L13
 121:../Libraries/XMCLib/src/xmc_can.c ****     {
 122:../Libraries/XMCLib/src/xmc_can.c ****         prescaler = fcan_div / ntq;
 379              	 .loc 2 122 0
 380 004c 3A69     	 ldr r2,[r7,#16]
 381 004e 7B69     	 ldr r3,[r7,#20]
 382 0050 B2FBF3F3 	 udiv r3,r2,r3
 383 0054 FB61     	 str r3,[r7,#28]
 123:../Libraries/XMCLib/src/xmc_can.c ****         if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
 384              	 .loc 2 123 0
 385 0056 FB69     	 ldr r3,[r7,#28]
 386 0058 002B     	 cmp r3,#0
 387 005a 0FD0     	 beq .L13
 388              	 .loc 2 123 0 is_stmt 0 discriminator 1
 389 005c FB69     	 ldr r3,[r7,#28]
 390 005e B3F5007F 	 cmp r3,#512
 391 0062 0BD8     	 bhi .L13
 124:../Libraries/XMCLib/src/xmc_can.c ****         {
 125:../Libraries/XMCLib/src/xmc_can.c ****           if (prescaler >= 64)
 392              	 .loc 2 125 0 is_stmt 1
 393 0064 FB69     	 ldr r3,[r7,#28]
 394 0066 3F2B     	 cmp r3,#63
 395 0068 07D9     	 bls .L14
 126:../Libraries/XMCLib/src/xmc_can.c ****           {
 127:../Libraries/XMCLib/src/xmc_can.c ****           /* consider prescaler >=64, if it is integer divisible by 8*/
 128:../Libraries/XMCLib/src/xmc_can.c ****             if ((prescaler & 0x7U) == 0)
 396              	 .loc 2 128 0
 397 006a FB69     	 ldr r3,[r7,#28]
 398 006c 03F00703 	 and r3,r3,#7
 399 0070 002B     	 cmp r3,#0
 400 0072 03D1     	 bne .L13
 129:../Libraries/XMCLib/src/xmc_can.c ****         {
 130:../Libraries/XMCLib/src/xmc_can.c ****               div8 = 1;
 401              	 .loc 2 130 0
 402 0074 0123     	 movs r3,#1
 403 0076 BB61     	 str r3,[r7,#24]
 131:../Libraries/XMCLib/src/xmc_can.c ****               break;
 404              	 .loc 2 131 0
 405 0078 06E0     	 b .L15
 406              	.L14:
 132:../Libraries/XMCLib/src/xmc_can.c ****         }
 133:../Libraries/XMCLib/src/xmc_can.c ****           }
 134:../Libraries/XMCLib/src/xmc_can.c ****           else
 135:../Libraries/XMCLib/src/xmc_can.c ****           {
 136:../Libraries/XMCLib/src/xmc_can.c ****             break;
 407              	 .loc 2 136 0
 408 007a 05E0     	 b .L15
 409              	.L13:
 137:../Libraries/XMCLib/src/xmc_can.c ****           }
 138:../Libraries/XMCLib/src/xmc_can.c ****         }
 139:../Libraries/XMCLib/src/xmc_can.c ****       }
 140:../Libraries/XMCLib/src/xmc_can.c ****       --ntq;
 410              	 .loc 2 140 0
 411 007c 7B69     	 ldr r3,[r7,#20]
 412 007e 013B     	 subs r3,r3,#1
 413 0080 7B61     	 str r3,[r7,#20]
 414              	.L12:
 117:../Libraries/XMCLib/src/xmc_can.c ****     {
 415              	 .loc 2 117 0
 416 0082 7B69     	 ldr r3,[r7,#20]
 417 0084 072B     	 cmp r3,#7
 418 0086 D7D8     	 bhi .L16
 419              	.L15:
 141:../Libraries/XMCLib/src/xmc_can.c ****     }
 142:../Libraries/XMCLib/src/xmc_can.c **** 
 143:../Libraries/XMCLib/src/xmc_can.c ****     if (ntq >= XMC_CAN_NODE_MIN_NTQ)
 420              	 .loc 2 143 0
 421 0088 7B69     	 ldr r3,[r7,#20]
 422 008a 072B     	 cmp r3,#7
 423 008c 41D9     	 bls .L11
 424              	.LBB3:
 144:../Libraries/XMCLib/src/xmc_can.c ****     {
 145:../Libraries/XMCLib/src/xmc_can.c ****       uint32_t tseg1 = ((ntq - 1) * bit_time_config->sample_point) / 1000;
 425              	 .loc 2 145 0
 426 008e 7B69     	 ldr r3,[r7,#20]
 427 0090 013B     	 subs r3,r3,#1
 428 0092 3A68     	 ldr r2,[r7]
 429 0094 1289     	 ldrh r2,[r2,#8]
 430 0096 02FB03F3 	 mul r3,r2,r3
 431 009a 204A     	 ldr r2,.L20
 432 009c A2FB0323 	 umull r2,r3,r2,r3
 433 00a0 9B09     	 lsrs r3,r3,#6
 434 00a2 FB60     	 str r3,[r7,#12]
 146:../Libraries/XMCLib/src/xmc_can.c ****       uint32_t tseg2 = ntq - tseg1 - 1;
 435              	 .loc 2 146 0
 436 00a4 7A69     	 ldr r2,[r7,#20]
 437 00a6 FB68     	 ldr r3,[r7,#12]
 438 00a8 D31A     	 subs r3,r2,r3
 439 00aa 013B     	 subs r3,r3,#1
 440 00ac BB60     	 str r3,[r7,#8]
 147:../Libraries/XMCLib/src/xmc_can.c **** 
 148:../Libraries/XMCLib/src/xmc_can.c ****       if ((tseg1 < XMC_CAN_NODE_MIN_TSEG1) || (tseg2 < XMC_CAN_NODE_MIN_TSEG2) || (tseg2 < bit_time
 441              	 .loc 2 148 0
 442 00ae FB68     	 ldr r3,[r7,#12]
 443 00b0 022B     	 cmp r3,#2
 444 00b2 08D9     	 bls .L17
 445              	 .loc 2 148 0 is_stmt 0 discriminator 1
 446 00b4 BB68     	 ldr r3,[r7,#8]
 447 00b6 012B     	 cmp r3,#1
 448 00b8 05D9     	 bls .L17
 449              	 .loc 2 148 0 discriminator 2
 450 00ba 3B68     	 ldr r3,[r7]
 451 00bc 5B89     	 ldrh r3,[r3,#10]
 452 00be 1A46     	 mov r2,r3
 453 00c0 BB68     	 ldr r3,[r7,#8]
 454 00c2 9A42     	 cmp r2,r3
 455 00c4 01D9     	 bls .L18
 456              	.L17:
 149:../Libraries/XMCLib/src/xmc_can.c ****       {
 150:../Libraries/XMCLib/src/xmc_can.c ****       return XMC_CAN_STATUS_ERROR;
 457              	 .loc 2 150 0 is_stmt 1
 458 00c6 0123     	 movs r3,#1
 459 00c8 24E0     	 b .L19
 460              	.L18:
 151:../Libraries/XMCLib/src/xmc_can.c ****       }
 152:../Libraries/XMCLib/src/xmc_can.c **** 
 153:../Libraries/XMCLib/src/xmc_can.c ****       XMC_CAN_NODE_EnableConfigurationChange(can_node);
 461              	 .loc 2 153 0
 462 00ca 7868     	 ldr r0,[r7,#4]
 463 00cc FFF7FEFF 	 bl XMC_CAN_NODE_EnableConfigurationChange
 154:../Libraries/XMCLib/src/xmc_can.c **** 
 155:../Libraries/XMCLib/src/xmc_can.c ****       /* Configure bit timing register */
 156:../Libraries/XMCLib/src/xmc_can.c ****       can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_M
 464              	 .loc 2 156 0
 465 00d0 BB68     	 ldr r3,[r7,#8]
 466 00d2 013B     	 subs r3,r3,#1
 467 00d4 1B03     	 lsls r3,r3,#12
 468 00d6 03F4E042 	 and r2,r3,#28672
 157:../Libraries/XMCLib/src/xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 469              	 .loc 2 157 0
 470 00da 3B68     	 ldr r3,[r7]
 471 00dc 5B89     	 ldrh r3,[r3,#10]
 472 00de 013B     	 subs r3,r3,#1
 473 00e0 9B01     	 lsls r3,r3,#6
 474 00e2 DBB2     	 uxtb r3,r3
 156:../Libraries/XMCLib/src/xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 475              	 .loc 2 156 0
 476 00e4 1A43     	 orrs r2,r2,r3
 158:../Libraries/XMCLib/src/xmc_can.c ****                         (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_
 477              	 .loc 2 158 0
 478 00e6 FB68     	 ldr r3,[r7,#12]
 479 00e8 013B     	 subs r3,r3,#1
 480 00ea 1B02     	 lsls r3,r3,#8
 481 00ec 03F47063 	 and r3,r3,#3840
 157:../Libraries/XMCLib/src/xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 482              	 .loc 2 157 0
 483 00f0 1A43     	 orrs r2,r2,r3
 159:../Libraries/XMCLib/src/xmc_can.c ****                         (((prescaler - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_
 484              	 .loc 2 159 0
 485 00f2 FB69     	 ldr r3,[r7,#28]
 486 00f4 013B     	 subs r3,r3,#1
 487 00f6 03F03F03 	 and r3,r3,#63
 158:../Libraries/XMCLib/src/xmc_can.c ****                         (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_
 488              	 .loc 2 158 0
 489 00fa 1A43     	 orrs r2,r2,r3
 160:../Libraries/XMCLib/src/xmc_can.c ****                         ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 490              	 .loc 2 160 0
 491 00fc BB69     	 ldr r3,[r7,#24]
 492 00fe DB03     	 lsls r3,r3,#15
 493 0100 9BB2     	 uxth r3,r3
 159:../Libraries/XMCLib/src/xmc_can.c ****                         (((prescaler - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_
 494              	 .loc 2 159 0
 495 0102 1A43     	 orrs r2,r2,r3
 156:../Libraries/XMCLib/src/xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 496              	 .loc 2 156 0
 497 0104 7B68     	 ldr r3,[r7,#4]
 498 0106 1A61     	 str r2,[r3,#16]
 161:../Libraries/XMCLib/src/xmc_can.c **** 
 162:../Libraries/XMCLib/src/xmc_can.c ****       XMC_CAN_NODE_DisableConfigurationChange(can_node);
 499              	 .loc 2 162 0
 500 0108 7868     	 ldr r0,[r7,#4]
 501 010a FFF7FEFF 	 bl XMC_CAN_NODE_DisableConfigurationChange
 163:../Libraries/XMCLib/src/xmc_can.c **** 
 164:../Libraries/XMCLib/src/xmc_can.c ****       return XMC_CAN_STATUS_SUCCESS;
 502              	 .loc 2 164 0
 503 010e 0023     	 movs r3,#0
 504 0110 00E0     	 b .L19
 505              	.L11:
 506              	.LBE3:
 507              	.LBE2:
 165:../Libraries/XMCLib/src/xmc_can.c ****     }
 166:../Libraries/XMCLib/src/xmc_can.c ****   }
 167:../Libraries/XMCLib/src/xmc_can.c **** 
 168:../Libraries/XMCLib/src/xmc_can.c ****   return XMC_CAN_STATUS_ERROR;
 508              	 .loc 2 168 0
 509 0112 0123     	 movs r3,#1
 510              	.L19:
 169:../Libraries/XMCLib/src/xmc_can.c **** }
 511              	 .loc 2 169 0
 512 0114 1846     	 mov r0,r3
 513 0116 2037     	 adds r7,r7,#32
 514              	.LCFI39:
 515              	 .cfi_def_cfa_offset 8
 516 0118 BD46     	 mov sp,r7
 517              	.LCFI40:
 518              	 .cfi_def_cfa_register 13
 519              	 
 520 011a 80BD     	 pop {r7,pc}
 521              	.L21:
 522              	 .align 2
 523              	.L20:
 524 011c D34D6210 	 .word 274877907
 525              	 .cfi_endproc
 526              	.LFE224:
 528              	 .section .text.XMC_CAN_NODE_NominalBitTimeConfigure,"ax",%progbits
 529              	 .align 2
 530              	 .global XMC_CAN_NODE_NominalBitTimeConfigure
 531              	 .thumb
 532              	 .thumb_func
 534              	XMC_CAN_NODE_NominalBitTimeConfigure:
 535              	.LFB225:
 170:../Libraries/XMCLib/src/xmc_can.c **** 
 171:../Libraries/XMCLib/src/xmc_can.c **** /* Baudrate Configuration */
 172:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_NominalBitTimeConfigure (XMC_CAN_NODE_t *const can_node,
 173:../Libraries/XMCLib/src/xmc_can.c ****                                            const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_
 174:../Libraries/XMCLib/src/xmc_can.c **** {
 536              	 .loc 2 174 0
 537              	 .cfi_startproc
 538              	 
 539              	 
 540 0000 80B5     	 push {r7,lr}
 541              	.LCFI41:
 542              	 .cfi_def_cfa_offset 8
 543              	 .cfi_offset 7,-8
 544              	 .cfi_offset 14,-4
 545 0002 90B0     	 sub sp,sp,#64
 546              	.LCFI42:
 547              	 .cfi_def_cfa_offset 72
 548 0004 00AF     	 add r7,sp,#0
 549              	.LCFI43:
 550              	 .cfi_def_cfa_register 7
 551 0006 7860     	 str r0,[r7,#4]
 552 0008 3960     	 str r1,[r7]
 175:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t temp_brp = 12U ;
 553              	 .loc 2 175 0
 554 000a 0C23     	 movs r3,#12
 555 000c FB63     	 str r3,[r7,#60]
 176:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t temp_tseg1 = 12U;
 556              	 .loc 2 176 0
 557 000e 0C23     	 movs r3,#12
 558 0010 BB63     	 str r3,[r7,#56]
 177:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_brp = 0U;
 559              	 .loc 2 177 0
 560 0012 0023     	 movs r3,#0
 561 0014 7B63     	 str r3,[r7,#52]
 178:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tseg1 = 1U;
 562              	 .loc 2 178 0
 563 0016 0123     	 movs r3,#1
 564 0018 3B63     	 str r3,[r7,#48]
 179:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tseg2 = 0U;
 565              	 .loc 2 179 0
 566 001a 0023     	 movs r3,#0
 567 001c 7B61     	 str r3,[r7,#20]
 180:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tbaud = 0U;
 568              	 .loc 2 180 0
 569 001e 0023     	 movs r3,#0
 570 0020 FB62     	 str r3,[r7,#44]
 181:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_error = 10000U;
 571              	 .loc 2 181 0
 572 0022 42F21073 	 movw r3,#10000
 573 0026 BB62     	 str r3,[r7,#40]
 182:../Libraries/XMCLib/src/xmc_can.c **** 
 183:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: rate not supported", (can_bit_time->baudrate
 184:../Libraries/XMCLib/src/xmc_can.c ****              (can_bit_time->baudrate >= 100000U));
 185:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: fCAN not supported",
 186:../Libraries/XMCLib/src/xmc_can.c ****              can_bit_time->can_frequency <= 120000000U);
 187:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: fCAN not supported",
 188:../Libraries/XMCLib/src/xmc_can.c ****              can_bit_time->can_frequency > 5000000U);
 189:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: sample point not supported",
 190:../Libraries/XMCLib/src/xmc_can.c ****              (can_bit_time->sample_point < 10000U) && ((can_bit_time->sample_point > 0U)));
 191:../Libraries/XMCLib/src/xmc_can.c ****        
 192:../Libraries/XMCLib/src/xmc_can.c ****   /*
 193:../Libraries/XMCLib/src/xmc_can.c ****    * Bit timing & sampling
 194:../Libraries/XMCLib/src/xmc_can.c ****    * Tq = (BRP+1)/Fcan if DIV8 = 0
 195:../Libraries/XMCLib/src/xmc_can.c ****    * Tq = 8*(BRP+1)/Fcan if DIV8 = 1
 196:../Libraries/XMCLib/src/xmc_can.c ****    * TSync = 1.Tq
 197:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg1 = (TSEG1+1)*Tq                >= 3Tq
 198:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg2 = (TSEG2+1)*Tq                >= 2Tq
 199:../Libraries/XMCLib/src/xmc_can.c ****    * Bit Time = TSync + TSeg1 + TSeg2    >= 8Tq
 200:../Libraries/XMCLib/src/xmc_can.c ****    *
 201:../Libraries/XMCLib/src/xmc_can.c ****    * Resynchronization:
 202:../Libraries/XMCLib/src/xmc_can.c ****    *
 203:../Libraries/XMCLib/src/xmc_can.c ****    * Tsjw = (SJW + 1)*Tq
 204:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg1 >= Tsjw + Tprop
 205:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg2 >= Tsjw
 206:../Libraries/XMCLib/src/xmc_can.c ****    */
 207:../Libraries/XMCLib/src/xmc_can.c ****   /* search for best baudrate */
 208:../Libraries/XMCLib/src/xmc_can.c ****   for (temp_brp = 1U; temp_brp <= 64U; temp_brp++)
 574              	 .loc 2 208 0
 575 0028 0123     	 movs r3,#1
 576 002a FB63     	 str r3,[r7,#60]
 577 002c 67E0     	 b .L23
 578              	.L32:
 579              	.LBB4:
 209:../Libraries/XMCLib/src/xmc_can.c ****   {
 210:../Libraries/XMCLib/src/xmc_can.c **** 
 211:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t f_quanta = (uint32_t)((can_bit_time->can_frequency * 10U) / temp_brp);
 580              	 .loc 2 211 0
 581 002e 3B68     	 ldr r3,[r7]
 582 0030 1A68     	 ldr r2,[r3]
 583 0032 1346     	 mov r3,r2
 584 0034 9B00     	 lsls r3,r3,#2
 585 0036 1344     	 add r3,r3,r2
 586 0038 5B00     	 lsls r3,r3,#1
 587 003a 1A46     	 mov r2,r3
 588 003c FB6B     	 ldr r3,[r7,#60]
 589 003e B2FBF3F3 	 udiv r3,r2,r3
 590 0042 3B61     	 str r3,[r7,#16]
 212:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t temp_tbaud = (uint32_t)(f_quanta / (can_bit_time->baudrate));
 591              	 .loc 2 212 0
 592 0044 3B68     	 ldr r3,[r7]
 593 0046 5B68     	 ldr r3,[r3,#4]
 594 0048 3A69     	 ldr r2,[r7,#16]
 595 004a B2FBF3F3 	 udiv r3,r2,r3
 596 004e 7B62     	 str r3,[r7,#36]
 213:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t temp_baudrate;
 214:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t error;
 215:../Libraries/XMCLib/src/xmc_can.c **** 
 216:../Libraries/XMCLib/src/xmc_can.c ****   if((temp_tbaud % 10U) > 5U)
 597              	 .loc 2 216 0
 598 0050 796A     	 ldr r1,[r7,#36]
 599 0052 5B4B     	 ldr r3,.L40
 600 0054 A3FB0123 	 umull r2,r3,r3,r1
 601 0058 DA08     	 lsrs r2,r3,#3
 602 005a 1346     	 mov r3,r2
 603 005c 9B00     	 lsls r3,r3,#2
 604 005e 1344     	 add r3,r3,r2
 605 0060 5B00     	 lsls r3,r3,#1
 606 0062 CA1A     	 subs r2,r1,r3
 607 0064 052A     	 cmp r2,#5
 608 0066 09D9     	 bls .L24
 217:../Libraries/XMCLib/src/xmc_can.c ****   {
 218:../Libraries/XMCLib/src/xmc_can.c ****   temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 609              	 .loc 2 218 0
 610 0068 7B6A     	 ldr r3,[r7,#36]
 611 006a 554A     	 ldr r2,.L40
 612 006c A2FB0323 	 umull r2,r3,r2,r3
 613 0070 DB08     	 lsrs r3,r3,#3
 614 0072 7B62     	 str r3,[r7,#36]
 219:../Libraries/XMCLib/src/xmc_can.c ****   temp_tbaud++;
 615              	 .loc 2 219 0
 616 0074 7B6A     	 ldr r3,[r7,#36]
 617 0076 0133     	 adds r3,r3,#1
 618 0078 7B62     	 str r3,[r7,#36]
 619 007a 05E0     	 b .L25
 620              	.L24:
 220:../Libraries/XMCLib/src/xmc_can.c ****   }
 221:../Libraries/XMCLib/src/xmc_can.c ****   else
 222:../Libraries/XMCLib/src/xmc_can.c ****   {
 223:../Libraries/XMCLib/src/xmc_can.c ****   temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 621              	 .loc 2 223 0
 622 007c 7B6A     	 ldr r3,[r7,#36]
 623 007e 504A     	 ldr r2,.L40
 624 0080 A2FB0323 	 umull r2,r3,r2,r3
 625 0084 DB08     	 lsrs r3,r3,#3
 626 0086 7B62     	 str r3,[r7,#36]
 627              	.L25:
 224:../Libraries/XMCLib/src/xmc_can.c ****   }
 225:../Libraries/XMCLib/src/xmc_can.c **** 
 226:../Libraries/XMCLib/src/xmc_can.c ****   if(temp_tbaud > 0U)
 628              	 .loc 2 226 0
 629 0088 7B6A     	 ldr r3,[r7,#36]
 630 008a 002B     	 cmp r3,#0
 631 008c 0AD0     	 beq .L26
 227:../Libraries/XMCLib/src/xmc_can.c ****   {
 228:../Libraries/XMCLib/src/xmc_can.c ****     temp_baudrate = (uint32_t) (f_quanta / (temp_tbaud * 10U));
 632              	 .loc 2 228 0
 633 008e 7A6A     	 ldr r2,[r7,#36]
 634 0090 1346     	 mov r3,r2
 635 0092 9B00     	 lsls r3,r3,#2
 636 0094 1344     	 add r3,r3,r2
 637 0096 5B00     	 lsls r3,r3,#1
 638 0098 1A46     	 mov r2,r3
 639 009a 3B69     	 ldr r3,[r7,#16]
 640 009c B3FBF2F3 	 udiv r3,r3,r2
 641 00a0 3B62     	 str r3,[r7,#32]
 642 00a2 07E0     	 b .L27
 643              	.L26:
 229:../Libraries/XMCLib/src/xmc_can.c ****   }
 230:../Libraries/XMCLib/src/xmc_can.c ****   else
 231:../Libraries/XMCLib/src/xmc_can.c ****   {
 232:../Libraries/XMCLib/src/xmc_can.c ****     temp_baudrate = f_quanta / 10U;
 644              	 .loc 2 232 0
 645 00a4 3B69     	 ldr r3,[r7,#16]
 646 00a6 464A     	 ldr r2,.L40
 647 00a8 A2FB0323 	 umull r2,r3,r2,r3
 648 00ac DB08     	 lsrs r3,r3,#3
 649 00ae 3B62     	 str r3,[r7,#32]
 233:../Libraries/XMCLib/src/xmc_can.c ****   temp_tbaud = 1;
 650              	 .loc 2 233 0
 651 00b0 0123     	 movs r3,#1
 652 00b2 7B62     	 str r3,[r7,#36]
 653              	.L27:
 234:../Libraries/XMCLib/src/xmc_can.c ****   }
 235:../Libraries/XMCLib/src/xmc_can.c **** 
 236:../Libraries/XMCLib/src/xmc_can.c ****   if(temp_baudrate >= can_bit_time->baudrate)
 654              	 .loc 2 236 0
 655 00b4 3B68     	 ldr r3,[r7]
 656 00b6 5A68     	 ldr r2,[r3,#4]
 657 00b8 3B6A     	 ldr r3,[r7,#32]
 658 00ba 9A42     	 cmp r2,r3
 659 00bc 05D8     	 bhi .L28
 237:../Libraries/XMCLib/src/xmc_can.c ****   {
 238:../Libraries/XMCLib/src/xmc_can.c ****   error = temp_baudrate - can_bit_time->baudrate;
 660              	 .loc 2 238 0
 661 00be 3B68     	 ldr r3,[r7]
 662 00c0 5B68     	 ldr r3,[r3,#4]
 663 00c2 3A6A     	 ldr r2,[r7,#32]
 664 00c4 D31A     	 subs r3,r2,r3
 665 00c6 FB61     	 str r3,[r7,#28]
 666 00c8 04E0     	 b .L29
 667              	.L28:
 239:../Libraries/XMCLib/src/xmc_can.c ****   }
 240:../Libraries/XMCLib/src/xmc_can.c ****   else
 241:../Libraries/XMCLib/src/xmc_can.c ****   {
 242:../Libraries/XMCLib/src/xmc_can.c ****   error = can_bit_time->baudrate - temp_baudrate;
 668              	 .loc 2 242 0
 669 00ca 3B68     	 ldr r3,[r7]
 670 00cc 5A68     	 ldr r2,[r3,#4]
 671 00ce 3B6A     	 ldr r3,[r7,#32]
 672 00d0 D31A     	 subs r3,r2,r3
 673 00d2 FB61     	 str r3,[r7,#28]
 674              	.L29:
 243:../Libraries/XMCLib/src/xmc_can.c ****   }
 244:../Libraries/XMCLib/src/xmc_can.c **** 
 245:../Libraries/XMCLib/src/xmc_can.c ****   if ((temp_tbaud <= 20U) && (best_error > error))
 675              	 .loc 2 245 0
 676 00d4 7B6A     	 ldr r3,[r7,#36]
 677 00d6 142B     	 cmp r3,#20
 678 00d8 0ED8     	 bhi .L30
 679              	 .loc 2 245 0 is_stmt 0 discriminator 1
 680 00da BA6A     	 ldr r2,[r7,#40]
 681 00dc FB69     	 ldr r3,[r7,#28]
 682 00de 9A42     	 cmp r2,r3
 683 00e0 0AD9     	 bls .L30
 246:../Libraries/XMCLib/src/xmc_can.c ****   {
 247:../Libraries/XMCLib/src/xmc_can.c ****     best_brp = temp_brp;
 684              	 .loc 2 247 0 is_stmt 1
 685 00e2 FB6B     	 ldr r3,[r7,#60]
 686 00e4 7B63     	 str r3,[r7,#52]
 248:../Libraries/XMCLib/src/xmc_can.c ****     best_tbaud = temp_tbaud;
 687              	 .loc 2 248 0
 688 00e6 7B6A     	 ldr r3,[r7,#36]
 689 00e8 FB62     	 str r3,[r7,#44]
 249:../Libraries/XMCLib/src/xmc_can.c ****     best_error = (error);
 690              	 .loc 2 249 0
 691 00ea FB69     	 ldr r3,[r7,#28]
 692 00ec BB62     	 str r3,[r7,#40]
 250:../Libraries/XMCLib/src/xmc_can.c **** 
 251:../Libraries/XMCLib/src/xmc_can.c ****     if (error < 1000U)
 693              	 .loc 2 251 0
 694 00ee FB69     	 ldr r3,[r7,#28]
 695 00f0 B3F57A7F 	 cmp r3,#1000
 696 00f4 00D2     	 bcs .L30
 252:../Libraries/XMCLib/src/xmc_can.c ****     {
 253:../Libraries/XMCLib/src/xmc_can.c ****       break;
 697              	 .loc 2 253 0
 698 00f6 05E0     	 b .L31
 699              	.L30:
 700              	.LBE4:
 208:../Libraries/XMCLib/src/xmc_can.c ****   {
 701              	 .loc 2 208 0 discriminator 2
 702 00f8 FB6B     	 ldr r3,[r7,#60]
 703 00fa 0133     	 adds r3,r3,#1
 704 00fc FB63     	 str r3,[r7,#60]
 705              	.L23:
 208:../Libraries/XMCLib/src/xmc_can.c ****   {
 706              	 .loc 2 208 0 is_stmt 0 discriminator 1
 707 00fe FB6B     	 ldr r3,[r7,#60]
 708 0100 402B     	 cmp r3,#64
 709 0102 94D9     	 bls .L32
 710              	.L31:
 254:../Libraries/XMCLib/src/xmc_can.c ****     }
 255:../Libraries/XMCLib/src/xmc_can.c ****    }
 256:../Libraries/XMCLib/src/xmc_can.c ****   }
 257:../Libraries/XMCLib/src/xmc_can.c ****   /* search for best sample point */
 258:../Libraries/XMCLib/src/xmc_can.c ****   best_error = 10000U;
 711              	 .loc 2 258 0 is_stmt 1
 712 0104 42F21073 	 movw r3,#10000
 713 0108 BB62     	 str r3,[r7,#40]
 259:../Libraries/XMCLib/src/xmc_can.c **** 
 260:../Libraries/XMCLib/src/xmc_can.c ****   for (temp_tseg1 = 64U; temp_tseg1 >= 3U; temp_tseg1--)
 714              	 .loc 2 260 0
 715 010a 4023     	 movs r3,#64
 716 010c BB63     	 str r3,[r7,#56]
 717 010e 2EE0     	 b .L33
 718              	.L39:
 719              	.LBB5:
 261:../Libraries/XMCLib/src/xmc_can.c ****   {
 262:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t tempSamplePoint = ((temp_tseg1 + 1U) * 10000U) / best_tbaud;
 720              	 .loc 2 262 0
 721 0110 BB6B     	 ldr r3,[r7,#56]
 722 0112 0133     	 adds r3,r3,#1
 723 0114 42F21072 	 movw r2,#10000
 724 0118 02FB03F2 	 mul r2,r2,r3
 725 011c FB6A     	 ldr r3,[r7,#44]
 726 011e B2FBF3F3 	 udiv r3,r2,r3
 727 0122 FB60     	 str r3,[r7,#12]
 263:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t error;
 264:../Libraries/XMCLib/src/xmc_can.c ****   if (tempSamplePoint >= can_bit_time->sample_point)
 728              	 .loc 2 264 0
 729 0124 3B68     	 ldr r3,[r7]
 730 0126 1B89     	 ldrh r3,[r3,#8]
 731 0128 1A46     	 mov r2,r3
 732 012a FB68     	 ldr r3,[r7,#12]
 733 012c 9A42     	 cmp r2,r3
 734 012e 06D8     	 bhi .L34
 265:../Libraries/XMCLib/src/xmc_can.c ****   {
 266:../Libraries/XMCLib/src/xmc_can.c ****       error = tempSamplePoint  - can_bit_time->sample_point;
 735              	 .loc 2 266 0
 736 0130 3B68     	 ldr r3,[r7]
 737 0132 1B89     	 ldrh r3,[r3,#8]
 738 0134 1A46     	 mov r2,r3
 739 0136 FB68     	 ldr r3,[r7,#12]
 740 0138 9B1A     	 subs r3,r3,r2
 741 013a BB61     	 str r3,[r7,#24]
 742 013c 05E0     	 b .L35
 743              	.L34:
 267:../Libraries/XMCLib/src/xmc_can.c ****   }
 268:../Libraries/XMCLib/src/xmc_can.c ****   else
 269:../Libraries/XMCLib/src/xmc_can.c ****   {
 270:../Libraries/XMCLib/src/xmc_can.c ****     error = can_bit_time->sample_point  - tempSamplePoint;
 744              	 .loc 2 270 0
 745 013e 3B68     	 ldr r3,[r7]
 746 0140 1B89     	 ldrh r3,[r3,#8]
 747 0142 1A46     	 mov r2,r3
 748 0144 FB68     	 ldr r3,[r7,#12]
 749 0146 D31A     	 subs r3,r2,r3
 750 0148 BB61     	 str r3,[r7,#24]
 751              	.L35:
 271:../Libraries/XMCLib/src/xmc_can.c ****   }
 272:../Libraries/XMCLib/src/xmc_can.c ****     if (best_error > error)
 752              	 .loc 2 272 0
 753 014a BA6A     	 ldr r2,[r7,#40]
 754 014c BB69     	 ldr r3,[r7,#24]
 755 014e 9A42     	 cmp r2,r3
 756 0150 03D9     	 bls .L36
 273:../Libraries/XMCLib/src/xmc_can.c ****     {
 274:../Libraries/XMCLib/src/xmc_can.c ****       best_tseg1 = temp_tseg1;
 757              	 .loc 2 274 0
 758 0152 BB6B     	 ldr r3,[r7,#56]
 759 0154 3B63     	 str r3,[r7,#48]
 275:../Libraries/XMCLib/src/xmc_can.c ****       best_error = error;
 760              	 .loc 2 275 0
 761 0156 BB69     	 ldr r3,[r7,#24]
 762 0158 BB62     	 str r3,[r7,#40]
 763              	.L36:
 276:../Libraries/XMCLib/src/xmc_can.c ****     }
 277:../Libraries/XMCLib/src/xmc_can.c ****     if (tempSamplePoint < (can_bit_time->sample_point))
 764              	 .loc 2 277 0
 765 015a 3B68     	 ldr r3,[r7]
 766 015c 1B89     	 ldrh r3,[r3,#8]
 767 015e 1A46     	 mov r2,r3
 768 0160 FB68     	 ldr r3,[r7,#12]
 769 0162 9A42     	 cmp r2,r3
 770 0164 00D9     	 bls .L37
 278:../Libraries/XMCLib/src/xmc_can.c ****     {
 279:../Libraries/XMCLib/src/xmc_can.c ****       break;
 771              	 .loc 2 279 0
 772 0166 05E0     	 b .L38
 773              	.L37:
 774              	.LBE5:
 260:../Libraries/XMCLib/src/xmc_can.c ****   {
 775              	 .loc 2 260 0 discriminator 2
 776 0168 BB6B     	 ldr r3,[r7,#56]
 777 016a 013B     	 subs r3,r3,#1
 778 016c BB63     	 str r3,[r7,#56]
 779              	.L33:
 260:../Libraries/XMCLib/src/xmc_can.c ****   {
 780              	 .loc 2 260 0 is_stmt 0 discriminator 1
 781 016e BB6B     	 ldr r3,[r7,#56]
 782 0170 022B     	 cmp r3,#2
 783 0172 CDD8     	 bhi .L39
 784              	.L38:
 280:../Libraries/XMCLib/src/xmc_can.c ****     }
 281:../Libraries/XMCLib/src/xmc_can.c ****   }
 282:../Libraries/XMCLib/src/xmc_can.c **** 
 283:../Libraries/XMCLib/src/xmc_can.c ****   best_tseg2 = best_tbaud - best_tseg1 - 1U;
 785              	 .loc 2 283 0 is_stmt 1
 786 0174 FA6A     	 ldr r2,[r7,#44]
 787 0176 3B6B     	 ldr r3,[r7,#48]
 788 0178 D31A     	 subs r3,r2,r3
 789 017a 013B     	 subs r3,r3,#1
 790 017c 7B61     	 str r3,[r7,#20]
 284:../Libraries/XMCLib/src/xmc_can.c **** 
 285:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_NODE_EnableConfigurationChange(can_node);
 791              	 .loc 2 285 0
 792 017e 7868     	 ldr r0,[r7,#4]
 793 0180 FFF7FEFF 	 bl XMC_CAN_NODE_EnableConfigurationChange
 286:../Libraries/XMCLib/src/xmc_can.c ****   /* Configure bit timing register */
 287:../Libraries/XMCLib/src/xmc_can.c ****   can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_N
 794              	 .loc 2 287 0
 795 0184 7B69     	 ldr r3,[r7,#20]
 796 0186 013B     	 subs r3,r3,#1
 797 0188 1B03     	 lsls r3,r3,#12
 798 018a 03F4E042 	 and r2,r3,#28672
 288:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 799              	 .loc 2 288 0
 800 018e 3B68     	 ldr r3,[r7]
 801 0190 5B89     	 ldrh r3,[r3,#10]
 802 0192 013B     	 subs r3,r3,#1
 803 0194 9B01     	 lsls r3,r3,#6
 804 0196 DBB2     	 uxtb r3,r3
 287:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 805              	 .loc 2 287 0
 806 0198 1A43     	 orrs r2,r2,r3
 289:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBT
 807              	 .loc 2 289 0
 808 019a 3B6B     	 ldr r3,[r7,#48]
 809 019c 013B     	 subs r3,r3,#1
 810 019e 1B02     	 lsls r3,r3,#8
 811 01a0 03F47063 	 and r3,r3,#3840
 288:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 812              	 .loc 2 288 0
 813 01a4 1A43     	 orrs r2,r2,r3
 290:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_
 814              	 .loc 2 290 0
 815 01a6 7B6B     	 ldr r3,[r7,#52]
 816 01a8 013B     	 subs r3,r3,#1
 817 01aa 03F03F03 	 and r3,r3,#63
 818 01ae 1A43     	 orrs r2,r2,r3
 287:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 819              	 .loc 2 287 0
 820 01b0 7B68     	 ldr r3,[r7,#4]
 821 01b2 1A61     	 str r2,[r3,#16]
 291:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 292:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_NODE_DisableConfigurationChange(can_node);
 822              	 .loc 2 292 0
 823 01b4 7868     	 ldr r0,[r7,#4]
 824 01b6 FFF7FEFF 	 bl XMC_CAN_NODE_DisableConfigurationChange
 293:../Libraries/XMCLib/src/xmc_can.c **** }
 825              	 .loc 2 293 0
 826 01ba 4037     	 adds r7,r7,#64
 827              	.LCFI44:
 828              	 .cfi_def_cfa_offset 8
 829 01bc BD46     	 mov sp,r7
 830              	.LCFI45:
 831              	 .cfi_def_cfa_register 13
 832              	 
 833 01be 80BD     	 pop {r7,pc}
 834              	.L41:
 835              	 .align 2
 836              	.L40:
 837 01c0 CDCCCCCC 	 .word -858993459
 838              	 .cfi_endproc
 839              	.LFE225:
 841              	 .section .text.XMC_CAN_AllocateMOtoNodeList,"ax",%progbits
 842              	 .align 2
 843              	 .global XMC_CAN_AllocateMOtoNodeList
 844              	 .thumb
 845              	 .thumb_func
 847              	XMC_CAN_AllocateMOtoNodeList:
 848              	.LFB226:
 294:../Libraries/XMCLib/src/xmc_can.c **** /* Function to allocate message object from free list to node list */
 295:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_nu
 296:../Libraries/XMCLib/src/xmc_can.c **** {
 849              	 .loc 2 296 0
 850              	 .cfi_startproc
 851              	 
 852              	 
 853 0000 80B5     	 push {r7,lr}
 854              	.LCFI46:
 855              	 .cfi_def_cfa_offset 8
 856              	 .cfi_offset 7,-8
 857              	 .cfi_offset 14,-4
 858 0002 82B0     	 sub sp,sp,#8
 859              	.LCFI47:
 860              	 .cfi_def_cfa_offset 16
 861 0004 00AF     	 add r7,sp,#0
 862              	.LCFI48:
 863              	 .cfi_def_cfa_register 7
 864 0006 7860     	 str r0,[r7,#4]
 865 0008 0B46     	 mov r3,r1
 866 000a FB70     	 strb r3,[r7,#3]
 867 000c 1346     	 mov r3,r2
 868 000e BB70     	 strb r3,[r7,#2]
 297:../Libraries/XMCLib/src/xmc_can.c ****   /* wait while panel operation is in progress. */
 298:../Libraries/XMCLib/src/xmc_can.c ****   while (XMC_CAN_IsPanelControlReady(obj) == false)
 869              	 .loc 2 298 0
 870 0010 00BF     	 nop
 871              	.L43:
 872              	 .loc 2 298 0 is_stmt 0 discriminator 1
 873 0012 7868     	 ldr r0,[r7,#4]
 874 0014 FFF7FEFF 	 bl XMC_CAN_IsPanelControlReady
 875 0018 0346     	 mov r3,r0
 876 001a 83F00103 	 eor r3,r3,#1
 877 001e DBB2     	 uxtb r3,r3
 878 0020 002B     	 cmp r3,#0
 879 0022 F6D1     	 bne .L43
 299:../Libraries/XMCLib/src/xmc_can.c ****   {
 300:../Libraries/XMCLib/src/xmc_can.c ****     /*Do nothing*/
 301:../Libraries/XMCLib/src/xmc_can.c ****   };
 302:../Libraries/XMCLib/src/xmc_can.c **** 
 303:../Libraries/XMCLib/src/xmc_can.c ****   /* Panel Command for  allocation of MO to node list */
 304:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE,mo_num,(node_num + 1U));
 880              	 .loc 2 304 0 is_stmt 1
 881 0024 FB78     	 ldrb r3,[r7,#3]
 882 0026 0133     	 adds r3,r3,#1
 883 0028 DBB2     	 uxtb r3,r3
 884 002a BA78     	 ldrb r2,[r7,#2]
 885 002c 7868     	 ldr r0,[r7,#4]
 886 002e 0221     	 movs r1,#2
 887 0030 FFF7FEFF 	 bl XMC_CAN_PanelControl
 305:../Libraries/XMCLib/src/xmc_can.c **** }
 888              	 .loc 2 305 0
 889 0034 0837     	 adds r7,r7,#8
 890              	.LCFI49:
 891              	 .cfi_def_cfa_offset 8
 892 0036 BD46     	 mov sp,r7
 893              	.LCFI50:
 894              	 .cfi_def_cfa_register 13
 895              	 
 896 0038 80BD     	 pop {r7,pc}
 897              	 .cfi_endproc
 898              	.LFE226:
 900 003a 00BF     	 .section .text.XMC_CAN_Disable,"ax",%progbits
 901              	 .align 2
 902              	 .global XMC_CAN_Disable
 903              	 .thumb
 904              	 .thumb_func
 906              	XMC_CAN_Disable:
 907              	.LFB227:
 306:../Libraries/XMCLib/src/xmc_can.c **** 
 307:../Libraries/XMCLib/src/xmc_can.c **** /* Disable XMC_CAN Peripheral */
 308:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Disable(XMC_CAN_t *const obj)
 309:../Libraries/XMCLib/src/xmc_can.c **** {
 908              	 .loc 2 309 0
 909              	 .cfi_startproc
 910              	 
 911              	 
 912 0000 80B5     	 push {r7,lr}
 913              	.LCFI51:
 914              	 .cfi_def_cfa_offset 8
 915              	 .cfi_offset 7,-8
 916              	 .cfi_offset 14,-4
 917 0002 82B0     	 sub sp,sp,#8
 918              	.LCFI52:
 919              	 .cfi_def_cfa_offset 16
 920 0004 00AF     	 add r7,sp,#0
 921              	.LCFI53:
 922              	 .cfi_def_cfa_register 7
 923 0006 7860     	 str r0,[r7,#4]
 310:../Libraries/XMCLib/src/xmc_can.c ****   /* Disable CAN Module */
 311:../Libraries/XMCLib/src/xmc_can.c ****   obj->CLC = CAN_CLC_DISR_Msk;
 924              	 .loc 2 311 0
 925 0008 7B68     	 ldr r3,[r7,#4]
 926 000a 0122     	 movs r2,#1
 927 000c 1A60     	 str r2,[r3]
 312:../Libraries/XMCLib/src/xmc_can.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 313:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 928              	 .loc 2 313 0
 929 000e 0448     	 ldr r0,.L45
 930 0010 FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 314:../Libraries/XMCLib/src/xmc_can.c **** #endif
 315:../Libraries/XMCLib/src/xmc_can.c **** #if defined(CLOCK_GATING_SUPPORTED)
 316:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 931              	 .loc 2 316 0
 932 0014 0248     	 ldr r0,.L45
 933 0016 FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 317:../Libraries/XMCLib/src/xmc_can.c **** #endif
 318:../Libraries/XMCLib/src/xmc_can.c **** }
 934              	 .loc 2 318 0
 935 001a 0837     	 adds r7,r7,#8
 936              	.LCFI54:
 937              	 .cfi_def_cfa_offset 8
 938 001c BD46     	 mov sp,r7
 939              	.LCFI55:
 940              	 .cfi_def_cfa_register 13
 941              	 
 942 001e 80BD     	 pop {r7,pc}
 943              	.L46:
 944              	 .align 2
 945              	.L45:
 946 0020 10000010 	 .word 268435472
 947              	 .cfi_endproc
 948              	.LFE227:
 950              	 .section .text.XMC_CAN_Enable,"ax",%progbits
 951              	 .align 2
 952              	 .global XMC_CAN_Enable
 953              	 .thumb
 954              	 .thumb_func
 956              	XMC_CAN_Enable:
 957              	.LFB228:
 319:../Libraries/XMCLib/src/xmc_can.c **** 
 320:../Libraries/XMCLib/src/xmc_can.c **** /* Enable XMC_CAN Peripheral */
 321:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Enable(XMC_CAN_t *const obj)
 322:../Libraries/XMCLib/src/xmc_can.c **** {
 958              	 .loc 2 322 0
 959              	 .cfi_startproc
 960              	 
 961              	 
 962 0000 80B5     	 push {r7,lr}
 963              	.LCFI56:
 964              	 .cfi_def_cfa_offset 8
 965              	 .cfi_offset 7,-8
 966              	 .cfi_offset 14,-4
 967 0002 82B0     	 sub sp,sp,#8
 968              	.LCFI57:
 969              	 .cfi_def_cfa_offset 16
 970 0004 00AF     	 add r7,sp,#0
 971              	.LCFI58:
 972              	 .cfi_def_cfa_register 7
 973 0006 7860     	 str r0,[r7,#4]
 323:../Libraries/XMCLib/src/xmc_can.c **** #if defined(CLOCK_GATING_SUPPORTED)
 324:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 974              	 .loc 2 324 0
 975 0008 0A48     	 ldr r0,.L49
 976 000a FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 325:../Libraries/XMCLib/src/xmc_can.c **** #endif
 326:../Libraries/XMCLib/src/xmc_can.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 327:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 977              	 .loc 2 327 0
 978 000e 0948     	 ldr r0,.L49
 979 0010 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 328:../Libraries/XMCLib/src/xmc_can.c **** #endif
 329:../Libraries/XMCLib/src/xmc_can.c ****   /* Enable CAN Module */
 330:../Libraries/XMCLib/src/xmc_can.c ****   obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 980              	 .loc 2 330 0
 981 0014 7B68     	 ldr r3,[r7,#4]
 982 0016 1B68     	 ldr r3,[r3]
 983 0018 23F00102 	 bic r2,r3,#1
 984 001c 7B68     	 ldr r3,[r7,#4]
 985 001e 1A60     	 str r2,[r3]
 331:../Libraries/XMCLib/src/xmc_can.c ****   while (obj->CLC & CAN_CLC_DISS_Msk)
 986              	 .loc 2 331 0
 987 0020 00BF     	 nop
 988              	.L48:
 989              	 .loc 2 331 0 is_stmt 0 discriminator 1
 990 0022 7B68     	 ldr r3,[r7,#4]
 991 0024 1B68     	 ldr r3,[r3]
 992 0026 03F00203 	 and r3,r3,#2
 993 002a 002B     	 cmp r3,#0
 994 002c F9D1     	 bne .L48
 332:../Libraries/XMCLib/src/xmc_can.c ****   {
 333:../Libraries/XMCLib/src/xmc_can.c ****     /*Do nothing*/
 334:../Libraries/XMCLib/src/xmc_can.c ****   };
 335:../Libraries/XMCLib/src/xmc_can.c **** }
 995              	 .loc 2 335 0 is_stmt 1
 996 002e 0837     	 adds r7,r7,#8
 997              	.LCFI59:
 998              	 .cfi_def_cfa_offset 8
 999 0030 BD46     	 mov sp,r7
 1000              	.LCFI60:
 1001              	 .cfi_def_cfa_register 13
 1002              	 
 1003 0032 80BD     	 pop {r7,pc}
 1004              	.L50:
 1005              	 .align 2
 1006              	.L49:
 1007 0034 10000010 	 .word 268435472
 1008              	 .cfi_endproc
 1009              	.LFE228:
 1011              	 .section .text.XMC_CAN_Init,"ax",%progbits
 1012              	 .align 2
 1013              	 .global XMC_CAN_Init
 1014              	 .thumb
 1015              	 .thumb_func
 1017              	XMC_CAN_Init:
 1018              	.LFB229:
 336:../Libraries/XMCLib/src/xmc_can.c **** 
 337:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 338:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
 339:../Libraries/XMCLib/src/xmc_can.c **** {
 1019              	 .loc 2 339 0
 1020              	 .cfi_startproc
 1021              	 
 1022              	 
 1023 0000 80B5     	 push {r7,lr}
 1024              	.LCFI61:
 1025              	 .cfi_def_cfa_offset 8
 1026              	 .cfi_offset 7,-8
 1027              	 .cfi_offset 14,-4
 1028 0002 8EB0     	 sub sp,sp,#56
 1029              	.LCFI62:
 1030              	 .cfi_def_cfa_offset 64
 1031 0004 00AF     	 add r7,sp,#0
 1032              	.LCFI63:
 1033              	 .cfi_def_cfa_register 7
 1034 0006 F860     	 str r0,[r7,#12]
 1035 0008 0B46     	 mov r3,r1
 1036 000a 7A60     	 str r2,[r7,#4]
 1037 000c FB72     	 strb r3,[r7,#11]
 340:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t  step_n, step_f;
 341:../Libraries/XMCLib/src/xmc_can.c ****   bool normal_divider;
 342:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t freq_n, freq_f;
 343:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step;
 344:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t can_frequency_khz;
 345:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency_khz;
 346:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_DM_t can_divider_mode;
 347:../Libraries/XMCLib/src/xmc_can.c **** 
 348:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency;
 349:../Libraries/XMCLib/src/xmc_can.c ****   /*Enabling the module*/
 350:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_Enable(obj);
 1038              	 .loc 2 350 0
 1039 000e F868     	 ldr r0,[r7,#12]
 1040 0010 FFF7FEFF 	 bl XMC_CAN_Enable
 351:../Libraries/XMCLib/src/xmc_can.c **** 
 352:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 1041              	 .loc 2 352 0
 1042 0014 FB7A     	 ldrb r3,[r7,#11]
 1043 0016 F868     	 ldr r0,[r7,#12]
 1044 0018 1946     	 mov r1,r3
 1045 001a FFF7FEFF 	 bl XMC_CAN_SetBaudrateClockSource
 353:../Libraries/XMCLib/src/xmc_can.c **** 
 354:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 1046              	 .loc 2 354 0
 1047 001e F868     	 ldr r0,[r7,#12]
 1048 0020 FFF7FEFF 	 bl XMC_CAN_GetBaudrateClockFrequency
 1049 0024 7863     	 str r0,[r7,#52]
 355:../Libraries/XMCLib/src/xmc_can.c **** 
 356:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 357:../Libraries/XMCLib/src/xmc_can.c **** 
 358:../Libraries/XMCLib/src/xmc_can.c ****   /* Normal divider mode */
 359:../Libraries/XMCLib/src/xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 1050              	 .loc 2 359 0
 1051 0026 7A6B     	 ldr r2,[r7,#52]
 1052 0028 7B68     	 ldr r3,[r7,#4]
 1053 002a B2FBF3F3 	 udiv r3,r2,r3
 1054 002e C3F58063 	 rsb r3,r3,#1024
 1055 0032 0020     	 movs r0,#0
 1056 0034 1946     	 mov r1,r3
 1057 0036 FFF7FEFF 	 bl max
 1058 003a 0346     	 mov r3,r0
 1059 003c 1846     	 mov r0,r3
 1060 003e 40F2FF31 	 movw r1,#1023
 1061 0042 FFF7FEFF 	 bl min
 1062 0046 3863     	 str r0,[r7,#48]
 360:../Libraries/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t) (peripheral_frequency / (1024U - step_n));
 1063              	 .loc 2 360 0
 1064 0048 3B6B     	 ldr r3,[r7,#48]
 1065 004a C3F58063 	 rsb r3,r3,#1024
 1066 004e 7A6B     	 ldr r2,[r7,#52]
 1067 0050 B2FBF3F3 	 udiv r3,r2,r3
 1068 0054 FB62     	 str r3,[r7,#44]
 361:../Libraries/XMCLib/src/xmc_can.c **** 
 362:../Libraries/XMCLib/src/xmc_can.c ****   /* Fractional divider mode */
 363:../Libraries/XMCLib/src/xmc_can.c ****   can_frequency_khz = (uint32_t) (can_frequency >> 6);
 1069              	 .loc 2 363 0
 1070 0056 7B68     	 ldr r3,[r7,#4]
 1071 0058 9B09     	 lsrs r3,r3,#6
 1072 005a BB62     	 str r3,[r7,#40]
 364:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
 1073              	 .loc 2 364 0
 1074 005c 7B6B     	 ldr r3,[r7,#52]
 1075 005e 9B09     	 lsrs r3,r3,#6
 1076 0060 7B62     	 str r3,[r7,#36]
 365:../Libraries/XMCLib/src/xmc_can.c **** 
 366:../Libraries/XMCLib/src/xmc_can.c ****   step_f = (uint32_t)(min( (((1024U * can_frequency_khz) / peripheral_frequency_khz) ), 1023U ));
 1077              	 .loc 2 366 0
 1078 0062 BB6A     	 ldr r3,[r7,#40]
 1079 0064 9A02     	 lsls r2,r3,#10
 1080 0066 7B6A     	 ldr r3,[r7,#36]
 1081 0068 B2FBF3F3 	 udiv r3,r2,r3
 1082 006c 1846     	 mov r0,r3
 1083 006e 40F2FF31 	 movw r1,#1023
 1084 0072 FFF7FEFF 	 bl min
 1085 0076 3862     	 str r0,[r7,#32]
 367:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = (uint32_t)((peripheral_frequency_khz * step_f) / 1024U);
 1086              	 .loc 2 367 0
 1087 0078 7B6A     	 ldr r3,[r7,#36]
 1088 007a 3A6A     	 ldr r2,[r7,#32]
 1089 007c 02FB03F3 	 mul r3,r2,r3
 1090 0080 9B0A     	 lsrs r3,r3,#10
 1091 0082 FB61     	 str r3,[r7,#28]
 368:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = freq_f << 6;
 1092              	 .loc 2 368 0
 1093 0084 FB69     	 ldr r3,[r7,#28]
 1094 0086 9B01     	 lsls r3,r3,#6
 1095 0088 FB61     	 str r3,[r7,#28]
 369:../Libraries/XMCLib/src/xmc_can.c **** 
 370:../Libraries/XMCLib/src/xmc_can.c ****   normal_divider  = (uint32_t)(can_frequency - freq_n) <= (can_frequency - freq_f);
 1096              	 .loc 2 370 0
 1097 008a 7A68     	 ldr r2,[r7,#4]
 1098 008c FB6A     	 ldr r3,[r7,#44]
 1099 008e D21A     	 subs r2,r2,r3
 1100 0090 7968     	 ldr r1,[r7,#4]
 1101 0092 FB69     	 ldr r3,[r7,#28]
 1102 0094 CB1A     	 subs r3,r1,r3
 1103 0096 9A42     	 cmp r2,r3
 1104 0098 94BF     	 ite ls
 1105 009a 0123     	 movls r3,#1
 1106 009c 0023     	 movhi r3,#0
 1107 009e FB76     	 strb r3,[r7,#27]
 371:../Libraries/XMCLib/src/xmc_can.c **** 
 372:../Libraries/XMCLib/src/xmc_can.c ****   step   = (normal_divider != 0U) ? step_n : step_f;
 1108              	 .loc 2 372 0
 1109 00a0 FB7E     	 ldrb r3,[r7,#27]
 1110 00a2 002B     	 cmp r3,#0
 1111 00a4 01D0     	 beq .L52
 1112              	 .loc 2 372 0 is_stmt 0 discriminator 1
 1113 00a6 3B6B     	 ldr r3,[r7,#48]
 1114 00a8 00E0     	 b .L53
 1115              	.L52:
 1116              	 .loc 2 372 0 discriminator 2
 1117 00aa 3B6A     	 ldr r3,[r7,#32]
 1118              	.L53:
 1119              	 .loc 2 372 0 discriminator 4
 1120 00ac 7B61     	 str r3,[r7,#20]
 373:../Libraries/XMCLib/src/xmc_can.c ****   can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
 1121              	 .loc 2 373 0 is_stmt 1 discriminator 4
 1122 00ae FB7E     	 ldrb r3,[r7,#27]
 1123 00b0 002B     	 cmp r3,#0
 1124 00b2 01D0     	 beq .L54
 1125              	 .loc 2 373 0 is_stmt 0 discriminator 1
 1126 00b4 0123     	 movs r3,#1
 1127 00b6 00E0     	 b .L55
 1128              	.L54:
 1129              	 .loc 2 373 0 discriminator 2
 1130 00b8 0223     	 movs r3,#2
 1131              	.L55:
 1132              	 .loc 2 373 0 discriminator 4
 1133 00ba FB74     	 strb r3,[r7,#19]
 374:../Libraries/XMCLib/src/xmc_can.c **** 
 375:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 1134              	 .loc 2 375 0 is_stmt 1 discriminator 4
 1135 00bc FB68     	 ldr r3,[r7,#12]
 1136 00be DB68     	 ldr r3,[r3,#12]
 1137 00c0 23F44343 	 bic r3,r3,#49920
 1138 00c4 23F0FF03 	 bic r3,r3,#255
 1139 00c8 FA68     	 ldr r2,[r7,#12]
 1140 00ca D360     	 str r3,[r2,#12]
 376:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos)
 1141              	 .loc 2 376 0 discriminator 4
 1142 00cc FB68     	 ldr r3,[r7,#12]
 1143 00ce DA68     	 ldr r2,[r3,#12]
 1144 00d0 FB7C     	 ldrb r3,[r7,#19]
 1145 00d2 9903     	 lsls r1,r3,#14
 1146 00d4 7B69     	 ldr r3,[r7,#20]
 1147 00d6 0B43     	 orrs r3,r3,r1
 1148 00d8 1A43     	 orrs r2,r2,r3
 1149 00da FB68     	 ldr r3,[r7,#12]
 1150 00dc DA60     	 str r2,[r3,#12]
 377:../Libraries/XMCLib/src/xmc_can.c **** 
 378:../Libraries/XMCLib/src/xmc_can.c **** }
 1151              	 .loc 2 378 0 discriminator 4
 1152 00de 3837     	 adds r7,r7,#56
 1153              	.LCFI64:
 1154              	 .cfi_def_cfa_offset 8
 1155 00e0 BD46     	 mov sp,r7
 1156              	.LCFI65:
 1157              	 .cfi_def_cfa_register 13
 1158              	 
 1159 00e2 80BD     	 pop {r7,pc}
 1160              	 .cfi_endproc
 1161              	.LFE229:
 1163              	 .section .text.XMC_CAN_SetBaudrateClockSource,"ax",%progbits
 1164              	 .align 2
 1165              	 .global XMC_CAN_SetBaudrateClockSource
 1166              	 .thumb
 1167              	 .thumb_func
 1169              	XMC_CAN_SetBaudrateClockSource:
 1170              	.LFB230:
 379:../Libraries/XMCLib/src/xmc_can.c **** 
 380:../Libraries/XMCLib/src/xmc_can.c **** #else
 381:../Libraries/XMCLib/src/xmc_can.c **** /* Initialization of XMC_CAN GLOBAL Object */
 382:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency)
 383:../Libraries/XMCLib/src/xmc_can.c **** {
 384:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t  step_n, step_f;
 385:../Libraries/XMCLib/src/xmc_can.c ****   bool normal_divider;
 386:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t freq_n, freq_f;
 387:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step;
 388:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t can_frequency_khz;
 389:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency_khz;
 390:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_DM_t can_divider_mode;
 391:../Libraries/XMCLib/src/xmc_can.c **** 
 392:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency = (XMC_SCU_CLOCK_GetPeripheralClockFrequency());
 393:../Libraries/XMCLib/src/xmc_can.c **** 
 394:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 395:../Libraries/XMCLib/src/xmc_can.c **** 
 396:../Libraries/XMCLib/src/xmc_can.c ****   /*Enabling the module*/
 397:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_Enable(obj);
 398:../Libraries/XMCLib/src/xmc_can.c **** 
 399:../Libraries/XMCLib/src/xmc_can.c ****   /* Normal divider mode */
 400:../Libraries/XMCLib/src/xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 401:../Libraries/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t) (peripheral_frequency / (1024U - step_n));
 402:../Libraries/XMCLib/src/xmc_can.c **** 
 403:../Libraries/XMCLib/src/xmc_can.c ****   /* Fractional divider mode */
 404:../Libraries/XMCLib/src/xmc_can.c ****   can_frequency_khz = (uint32_t) (can_frequency >> 6);
 405:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
 406:../Libraries/XMCLib/src/xmc_can.c **** 
 407:../Libraries/XMCLib/src/xmc_can.c ****   step_f = (uint32_t)(min( (((1024U * can_frequency_khz) / peripheral_frequency_khz) ), 1023U ));
 408:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = (uint32_t)((peripheral_frequency_khz * step_f) / 1024U);
 409:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = freq_f << 6;
 410:../Libraries/XMCLib/src/xmc_can.c **** 
 411:../Libraries/XMCLib/src/xmc_can.c ****   normal_divider  = (uint32_t)(can_frequency - freq_n) <= (can_frequency - freq_f);
 412:../Libraries/XMCLib/src/xmc_can.c **** 
 413:../Libraries/XMCLib/src/xmc_can.c ****   step   = (normal_divider != 0U) ? step_n : step_f;
 414:../Libraries/XMCLib/src/xmc_can.c ****   can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
 415:../Libraries/XMCLib/src/xmc_can.c **** 
 416:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 417:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos)
 418:../Libraries/XMCLib/src/xmc_can.c **** }
 419:../Libraries/XMCLib/src/xmc_can.c **** #endif
 420:../Libraries/XMCLib/src/xmc_can.c **** 
 421:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source)
 422:../Libraries/XMCLib/src/xmc_can.c **** {
 1171              	 .loc 2 422 0
 1172              	 .cfi_startproc
 1173              	 
 1174              	 
 1175              	 
 1176 0000 80B4     	 push {r7}
 1177              	.LCFI66:
 1178              	 .cfi_def_cfa_offset 4
 1179              	 .cfi_offset 7,-4
 1180 0002 83B0     	 sub sp,sp,#12
 1181              	.LCFI67:
 1182              	 .cfi_def_cfa_offset 16
 1183 0004 00AF     	 add r7,sp,#0
 1184              	.LCFI68:
 1185              	 .cfi_def_cfa_register 7
 1186 0006 7860     	 str r0,[r7,#4]
 1187 0008 0B46     	 mov r3,r1
 1188 000a FB70     	 strb r3,[r7,#3]
 423:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 424:../Libraries/XMCLib/src/xmc_can.c ****   obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
 1189              	 .loc 2 424 0
 1190 000c 7B68     	 ldr r3,[r7,#4]
 1191 000e D3F8C831 	 ldr r3,[r3,#456]
 1192 0012 23F00F02 	 bic r2,r3,#15
 1193 0016 FB78     	 ldrb r3,[r7,#3]
 1194 0018 1A43     	 orrs r2,r2,r3
 1195 001a 7B68     	 ldr r3,[r7,#4]
 1196 001c C3F8C821 	 str r2,[r3,#456]
 425:../Libraries/XMCLib/src/xmc_can.c **** #endif  
 426:../Libraries/XMCLib/src/xmc_can.c **** }
 1197              	 .loc 2 426 0
 1198 0020 0C37     	 adds r7,r7,#12
 1199              	.LCFI69:
 1200              	 .cfi_def_cfa_offset 4
 1201 0022 BD46     	 mov sp,r7
 1202              	.LCFI70:
 1203              	 .cfi_def_cfa_register 13
 1204              	 
 1205 0024 5DF8047B 	 ldr r7,[sp],#4
 1206              	.LCFI71:
 1207              	 .cfi_restore 7
 1208              	 .cfi_def_cfa_offset 0
 1209 0028 7047     	 bx lr
 1210              	 .cfi_endproc
 1211              	.LFE230:
 1213 002a 00BF     	 .section .text.XMC_CAN_GetBaudrateClockSource,"ax",%progbits
 1214              	 .align 2
 1215              	 .global XMC_CAN_GetBaudrateClockSource
 1216              	 .thumb
 1217              	 .thumb_func
 1219              	XMC_CAN_GetBaudrateClockSource:
 1220              	.LFB231:
 427:../Libraries/XMCLib/src/xmc_can.c **** 
 428:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj)
 429:../Libraries/XMCLib/src/xmc_can.c **** {
 1221              	 .loc 2 429 0
 1222              	 .cfi_startproc
 1223              	 
 1224              	 
 1225              	 
 1226 0000 80B4     	 push {r7}
 1227              	.LCFI72:
 1228              	 .cfi_def_cfa_offset 4
 1229              	 .cfi_offset 7,-4
 1230 0002 83B0     	 sub sp,sp,#12
 1231              	.LCFI73:
 1232              	 .cfi_def_cfa_offset 16
 1233 0004 00AF     	 add r7,sp,#0
 1234              	.LCFI74:
 1235              	 .cfi_def_cfa_register 7
 1236 0006 7860     	 str r0,[r7,#4]
 430:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 431:../Libraries/XMCLib/src/xmc_can.c ****   return ((XMC_CAN_CANCLKSRC_t)((obj->MCR & CAN_MCR_CLKSEL_Msk) >> CAN_MCR_CLKSEL_Pos));
 1237              	 .loc 2 431 0
 1238 0008 7B68     	 ldr r3,[r7,#4]
 1239 000a D3F8C831 	 ldr r3,[r3,#456]
 1240 000e DBB2     	 uxtb r3,r3
 1241 0010 03F00F03 	 and r3,r3,#15
 1242 0014 DBB2     	 uxtb r3,r3
 432:../Libraries/XMCLib/src/xmc_can.c **** #elif (UC_FAMILY == XMC4) 
 433:../Libraries/XMCLib/src/xmc_can.c ****   return XMC_CAN_CANCLKSRC_FPERI;
 434:../Libraries/XMCLib/src/xmc_can.c **** #endif    
 435:../Libraries/XMCLib/src/xmc_can.c **** }
 1243              	 .loc 2 435 0
 1244 0016 1846     	 mov r0,r3
 1245 0018 0C37     	 adds r7,r7,#12
 1246              	.LCFI75:
 1247              	 .cfi_def_cfa_offset 4
 1248 001a BD46     	 mov sp,r7
 1249              	.LCFI76:
 1250              	 .cfi_def_cfa_register 13
 1251              	 
 1252 001c 5DF8047B 	 ldr r7,[sp],#4
 1253              	.LCFI77:
 1254              	 .cfi_restore 7
 1255              	 .cfi_def_cfa_offset 0
 1256 0020 7047     	 bx lr
 1257              	 .cfi_endproc
 1258              	.LFE231:
 1260 0022 00BF     	 .section .text.XMC_CAN_GetBaudrateClockFrequency,"ax",%progbits
 1261              	 .align 2
 1262              	 .global XMC_CAN_GetBaudrateClockFrequency
 1263              	 .thumb
 1264              	 .thumb_func
 1266              	XMC_CAN_GetBaudrateClockFrequency:
 1267              	.LFB232:
 436:../Libraries/XMCLib/src/xmc_can.c **** 
 437:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
 438:../Libraries/XMCLib/src/xmc_can.c **** {
 1268              	 .loc 2 438 0
 1269              	 .cfi_startproc
 1270              	 
 1271              	 
 1272 0000 80B5     	 push {r7,lr}
 1273              	.LCFI78:
 1274              	 .cfi_def_cfa_offset 8
 1275              	 .cfi_offset 7,-8
 1276              	 .cfi_offset 14,-4
 1277 0002 84B0     	 sub sp,sp,#16
 1278              	.LCFI79:
 1279              	 .cfi_def_cfa_offset 24
 1280 0004 00AF     	 add r7,sp,#0
 1281              	.LCFI80:
 1282              	 .cfi_def_cfa_register 7
 1283 0006 7860     	 str r0,[r7,#4]
 439:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t frequency;
 440:../Libraries/XMCLib/src/xmc_can.c **** 
 441:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 442:../Libraries/XMCLib/src/xmc_can.c ****   switch(XMC_CAN_GetBaudrateClockSource(obj))
 1284              	 .loc 2 442 0
 1285 0008 7868     	 ldr r0,[r7,#4]
 1286 000a FFF7FEFF 	 bl XMC_CAN_GetBaudrateClockSource
 1287 000e 0346     	 mov r3,r0
 1288 0010 012B     	 cmp r3,#1
 1289 0012 02D0     	 beq .L61
 1290 0014 022B     	 cmp r3,#2
 1291 0016 04D0     	 beq .L62
 1292 0018 07E0     	 b .L65
 1293              	.L61:
 443:../Libraries/XMCLib/src/xmc_can.c ****   {
 444:../Libraries/XMCLib/src/xmc_can.c **** #if UC_FAMILY == XMC4
 445:../Libraries/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_FPERI:
 446:../Libraries/XMCLib/src/xmc_can.c ****       frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 1294              	 .loc 2 446 0
 1295 001a FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 1296 001e F860     	 str r0,[r7,#12]
 447:../Libraries/XMCLib/src/xmc_can.c ****       break;
 1297              	 .loc 2 447 0
 1298 0020 06E0     	 b .L63
 1299              	.L62:
 448:../Libraries/XMCLib/src/xmc_can.c **** #else
 449:../Libraries/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_MCLK:
 450:../Libraries/XMCLib/src/xmc_can.c ****       frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 451:../Libraries/XMCLib/src/xmc_can.c ****       break;
 452:../Libraries/XMCLib/src/xmc_can.c **** #endif
 453:../Libraries/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_FOHP:
 454:../Libraries/XMCLib/src/xmc_can.c ****       frequency = OSCHP_GetFrequency();
 1300              	 .loc 2 454 0
 1301 0022 FFF7FEFF 	 bl OSCHP_GetFrequency
 1302 0026 F860     	 str r0,[r7,#12]
 455:../Libraries/XMCLib/src/xmc_can.c ****       break;
 1303              	 .loc 2 455 0
 1304 0028 02E0     	 b .L63
 1305              	.L65:
 456:../Libraries/XMCLib/src/xmc_can.c **** 
 457:../Libraries/XMCLib/src/xmc_can.c ****     default:
 458:../Libraries/XMCLib/src/xmc_can.c ****       frequency = 0;
 1306              	 .loc 2 458 0
 1307 002a 0023     	 movs r3,#0
 1308 002c FB60     	 str r3,[r7,#12]
 459:../Libraries/XMCLib/src/xmc_can.c ****       break;
 1309              	 .loc 2 459 0
 1310 002e 00BF     	 nop
 1311              	.L63:
 460:../Libraries/XMCLib/src/xmc_can.c ****   }
 461:../Libraries/XMCLib/src/xmc_can.c **** #else
 462:../Libraries/XMCLib/src/xmc_can.c ****   frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 463:../Libraries/XMCLib/src/xmc_can.c **** #endif  
 464:../Libraries/XMCLib/src/xmc_can.c **** 
 465:../Libraries/XMCLib/src/xmc_can.c ****   return frequency;
 1312              	 .loc 2 465 0
 1313 0030 FB68     	 ldr r3,[r7,#12]
 466:../Libraries/XMCLib/src/xmc_can.c **** }
 1314              	 .loc 2 466 0
 1315 0032 1846     	 mov r0,r3
 1316 0034 1037     	 adds r7,r7,#16
 1317              	.LCFI81:
 1318              	 .cfi_def_cfa_offset 8
 1319 0036 BD46     	 mov sp,r7
 1320              	.LCFI82:
 1321              	 .cfi_def_cfa_register 13
 1322              	 
 1323 0038 80BD     	 pop {r7,pc}
 1324              	 .cfi_endproc
 1325              	.LFE232:
 1327 003a 00BF     	 .section .text.XMC_CAN_InitEx,"ax",%progbits
 1328              	 .align 2
 1329              	 .global XMC_CAN_InitEx
 1330              	 .thumb
 1331              	 .thumb_func
 1333              	XMC_CAN_InitEx:
 1334              	.LFB233:
 467:../Libraries/XMCLib/src/xmc_can.c **** 
 468:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
 469:../Libraries/XMCLib/src/xmc_can.c **** {
 1335              	 .loc 2 469 0
 1336              	 .cfi_startproc
 1337              	 
 1338              	 
 1339 0000 80B5     	 push {r7,lr}
 1340              	.LCFI83:
 1341              	 .cfi_def_cfa_offset 8
 1342              	 .cfi_offset 7,-8
 1343              	 .cfi_offset 14,-4
 1344 0002 88B0     	 sub sp,sp,#32
 1345              	.LCFI84:
 1346              	 .cfi_def_cfa_offset 40
 1347 0004 00AF     	 add r7,sp,#0
 1348              	.LCFI85:
 1349              	 .cfi_def_cfa_register 7
 1350 0006 F860     	 str r0,[r7,#12]
 1351 0008 0B46     	 mov r3,r1
 1352 000a 7A60     	 str r2,[r7,#4]
 1353 000c FB72     	 strb r3,[r7,#11]
 470:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step_n;
 471:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t freq_n;
 472:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency;
 473:../Libraries/XMCLib/src/xmc_can.c **** 
 474:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 475:../Libraries/XMCLib/src/xmc_can.c **** 
 476:../Libraries/XMCLib/src/xmc_can.c ****   /*Enabling the module*/
 477:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_Enable(obj);
 1354              	 .loc 2 477 0
 1355 000e F868     	 ldr r0,[r7,#12]
 1356 0010 FFF7FEFF 	 bl XMC_CAN_Enable
 478:../Libraries/XMCLib/src/xmc_can.c **** 
 479:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 1357              	 .loc 2 479 0
 1358 0014 FB7A     	 ldrb r3,[r7,#11]
 1359 0016 F868     	 ldr r0,[r7,#12]
 1360 0018 1946     	 mov r1,r3
 1361 001a FFF7FEFF 	 bl XMC_CAN_SetBaudrateClockSource
 480:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 1362              	 .loc 2 480 0
 1363 001e F868     	 ldr r0,[r7,#12]
 1364 0020 FFF7FEFF 	 bl XMC_CAN_GetBaudrateClockFrequency
 1365 0024 F861     	 str r0,[r7,#28]
 481:../Libraries/XMCLib/src/xmc_can.c **** 
 482:../Libraries/XMCLib/src/xmc_can.c ****   /* Normal divider mode */
 483:../Libraries/XMCLib/src/xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 1366              	 .loc 2 483 0
 1367 0026 FA69     	 ldr r2,[r7,#28]
 1368 0028 7B68     	 ldr r3,[r7,#4]
 1369 002a B2FBF3F3 	 udiv r3,r2,r3
 1370 002e C3F58063 	 rsb r3,r3,#1024
 1371 0032 0020     	 movs r0,#0
 1372 0034 1946     	 mov r1,r3
 1373 0036 FFF7FEFF 	 bl max
 1374 003a 0346     	 mov r3,r0
 1375 003c 1846     	 mov r0,r3
 1376 003e 40F2FF31 	 movw r1,#1023
 1377 0042 FFF7FEFF 	 bl min
 1378 0046 B861     	 str r0,[r7,#24]
 484:../Libraries/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
 1379              	 .loc 2 484 0
 1380 0048 BB69     	 ldr r3,[r7,#24]
 1381 004a C3F58063 	 rsb r3,r3,#1024
 1382 004e FA69     	 ldr r2,[r7,#28]
 1383 0050 B2FBF3F3 	 udiv r3,r2,r3
 1384 0054 7B61     	 str r3,[r7,#20]
 485:../Libraries/XMCLib/src/xmc_can.c **** 
 486:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 1385              	 .loc 2 486 0
 1386 0056 FB68     	 ldr r3,[r7,#12]
 1387 0058 DB68     	 ldr r3,[r3,#12]
 1388 005a 23F44343 	 bic r3,r3,#49920
 1389 005e 23F0FF03 	 bic r3,r3,#255
 1390 0062 FA68     	 ldr r2,[r7,#12]
 1391 0064 D360     	 str r3,[r2,#12]
 487:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_P
 1392              	 .loc 2 487 0
 1393 0066 FB68     	 ldr r3,[r7,#12]
 1394 0068 DA68     	 ldr r2,[r3,#12]
 1395 006a BB69     	 ldr r3,[r7,#24]
 1396 006c 1343     	 orrs r3,r3,r2
 1397 006e 43F48042 	 orr r2,r3,#16384
 1398 0072 FB68     	 ldr r3,[r7,#12]
 1399 0074 DA60     	 str r2,[r3,#12]
 488:../Libraries/XMCLib/src/xmc_can.c **** 
 489:../Libraries/XMCLib/src/xmc_can.c ****   return freq_n;
 1400              	 .loc 2 489 0
 1401 0076 7B69     	 ldr r3,[r7,#20]
 490:../Libraries/XMCLib/src/xmc_can.c **** }
 1402              	 .loc 2 490 0
 1403 0078 1846     	 mov r0,r3
 1404 007a 2037     	 adds r7,r7,#32
 1405              	.LCFI86:
 1406              	 .cfi_def_cfa_offset 8
 1407 007c BD46     	 mov sp,r7
 1408              	.LCFI87:
 1409              	 .cfi_def_cfa_register 13
 1410              	 
 1411 007e 80BD     	 pop {r7,pc}
 1412              	 .cfi_endproc
 1413              	.LFE233:
 1415              	 .section .text.XMC_CAN_MO_SetIdentifier,"ax",%progbits
 1416              	 .align 2
 1417              	 .global XMC_CAN_MO_SetIdentifier
 1418              	 .thumb
 1419              	 .thumb_func
 1421              	XMC_CAN_MO_SetIdentifier:
 1422              	.LFB234:
 491:../Libraries/XMCLib/src/xmc_can.c **** 
 492:../Libraries/XMCLib/src/xmc_can.c **** /* Sets the Identifier of the MO */
 493:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_SetIdentifier(XMC_CAN_MO_t *const can_mo, const uint32_t can_identifier)
 494:../Libraries/XMCLib/src/xmc_can.c **** {
 1423              	 .loc 2 494 0
 1424              	 .cfi_startproc
 1425              	 
 1426              	 
 1427              	 
 1428 0000 80B4     	 push {r7}
 1429              	.LCFI88:
 1430              	 .cfi_def_cfa_offset 4
 1431              	 .cfi_offset 7,-4
 1432 0002 83B0     	 sub sp,sp,#12
 1433              	.LCFI89:
 1434              	 .cfi_def_cfa_offset 16
 1435 0004 00AF     	 add r7,sp,#0
 1436              	.LCFI90:
 1437              	 .cfi_def_cfa_register 7
 1438 0006 7860     	 str r0,[r7,#4]
 1439 0008 3960     	 str r1,[r7]
 495:../Libraries/XMCLib/src/xmc_can.c ****   if ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk)
 1440              	 .loc 2 495 0
 1441 000a 7B68     	 ldr r3,[r7,#4]
 1442 000c 1B68     	 ldr r3,[r3]
 1443 000e 9B69     	 ldr r3,[r3,#24]
 1444 0010 03F00053 	 and r3,r3,#536870912
 1445 0014 002B     	 cmp r3,#0
 1446 0016 0DD1     	 bne .L69
 496:../Libraries/XMCLib/src/xmc_can.c ****   {
 497:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 1447              	 .loc 2 497 0
 1448 0018 7B68     	 ldr r3,[r7,#4]
 1449 001a 1B68     	 ldr r3,[r3]
 1450 001c 7A68     	 ldr r2,[r7,#4]
 1451 001e 1268     	 ldr r2,[r2]
 1452 0020 9269     	 ldr r2,[r2,#24]
 1453 0022 02F06041 	 and r1,r2,#-536870912
 498:../Libraries/XMCLib/src/xmc_can.c ****                              ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MOAR
 1454              	 .loc 2 498 0
 1455 0026 3A68     	 ldr r2,[r7]
 1456 0028 9204     	 lsls r2,r2,#18
 1457 002a 22F06042 	 bic r2,r2,#-536870912
 497:../Libraries/XMCLib/src/xmc_can.c ****                              ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MOAR
 1458              	 .loc 2 497 0
 1459 002e 0A43     	 orrs r2,r2,r1
 1460 0030 9A61     	 str r2,[r3,#24]
 1461 0032 0BE0     	 b .L70
 1462              	.L69:
 499:../Libraries/XMCLib/src/xmc_can.c ****   }
 500:../Libraries/XMCLib/src/xmc_can.c ****   else
 501:../Libraries/XMCLib/src/xmc_can.c ****   {
 502:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 1463              	 .loc 2 502 0
 1464 0034 7B68     	 ldr r3,[r7,#4]
 1465 0036 1B68     	 ldr r3,[r3]
 1466 0038 7A68     	 ldr r2,[r7,#4]
 1467 003a 1268     	 ldr r2,[r2]
 1468 003c 9269     	 ldr r2,[r2,#24]
 1469 003e 02F06041 	 and r1,r2,#-536870912
 503:../Libraries/XMCLib/src/xmc_can.c ****                            (can_identifier & (uint32_t)CAN_MO_MOAR_ID_Msk);
 1470              	 .loc 2 503 0
 1471 0042 3A68     	 ldr r2,[r7]
 1472 0044 22F06042 	 bic r2,r2,#-536870912
 502:../Libraries/XMCLib/src/xmc_can.c ****                            (can_identifier & (uint32_t)CAN_MO_MOAR_ID_Msk);
 1473              	 .loc 2 502 0
 1474 0048 0A43     	 orrs r2,r2,r1
 1475 004a 9A61     	 str r2,[r3,#24]
 1476              	.L70:
 504:../Libraries/XMCLib/src/xmc_can.c ****   }
 505:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_identifier = can_identifier;
 1477              	 .loc 2 505 0
 1478 004c 3B68     	 ldr r3,[r7]
 1479 004e 23F06041 	 bic r1,r3,#-536870912
 1480 0052 7A68     	 ldr r2,[r7,#4]
 1481 0054 5368     	 ldr r3,[r2,#4]
 1482 0056 61F31C03 	 bfi r3,r1,#0,#29
 1483 005a 5360     	 str r3,[r2,#4]
 506:../Libraries/XMCLib/src/xmc_can.c **** }
 1484              	 .loc 2 506 0
 1485 005c 0C37     	 adds r7,r7,#12
 1486              	.LCFI91:
 1487              	 .cfi_def_cfa_offset 4
 1488 005e BD46     	 mov sp,r7
 1489              	.LCFI92:
 1490              	 .cfi_def_cfa_register 13
 1491              	 
 1492 0060 5DF8047B 	 ldr r7,[sp],#4
 1493              	.LCFI93:
 1494              	 .cfi_restore 7
 1495              	 .cfi_def_cfa_offset 0
 1496 0064 7047     	 bx lr
 1497              	 .cfi_endproc
 1498              	.LFE234:
 1500 0066 00BF     	 .section .text.XMC_CAN_MO_GetIdentifier,"ax",%progbits
 1501              	 .align 2
 1502              	 .global XMC_CAN_MO_GetIdentifier
 1503              	 .thumb
 1504              	 .thumb_func
 1506              	XMC_CAN_MO_GetIdentifier:
 1507              	.LFB235:
 507:../Libraries/XMCLib/src/xmc_can.c **** 
 508:../Libraries/XMCLib/src/xmc_can.c **** 
 509:../Libraries/XMCLib/src/xmc_can.c **** /* Gets the Identifier of the MO */
 510:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_MO_GetIdentifier(const XMC_CAN_MO_t *const can_mo)
 511:../Libraries/XMCLib/src/xmc_can.c **** {
 1508              	 .loc 2 511 0
 1509              	 .cfi_startproc
 1510              	 
 1511              	 
 1512              	 
 1513 0000 80B4     	 push {r7}
 1514              	.LCFI94:
 1515              	 .cfi_def_cfa_offset 4
 1516              	 .cfi_offset 7,-4
 1517 0002 85B0     	 sub sp,sp,#20
 1518              	.LCFI95:
 1519              	 .cfi_def_cfa_offset 24
 1520 0004 00AF     	 add r7,sp,#0
 1521              	.LCFI96:
 1522              	 .cfi_def_cfa_register 7
 1523 0006 7860     	 str r0,[r7,#4]
 512:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t identifier;
 513:../Libraries/XMCLib/src/xmc_can.c ****   if ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk)
 1524              	 .loc 2 513 0
 1525 0008 7B68     	 ldr r3,[r7,#4]
 1526 000a 1B68     	 ldr r3,[r3]
 1527 000c 9B69     	 ldr r3,[r3,#24]
 1528 000e 03F00053 	 and r3,r3,#536870912
 1529 0012 002B     	 cmp r3,#0
 1530 0014 07D1     	 bne .L72
 514:../Libraries/XMCLib/src/xmc_can.c ****   {
 515:../Libraries/XMCLib/src/xmc_can.c ****   identifier = ((can_mo->can_mo_ptr->MOAR) & (uint32_t)(CAN_MO_MOAR_ID_Msk)) >> XMC_CAN_MO_MOAR_STD
 1531              	 .loc 2 515 0
 1532 0016 7B68     	 ldr r3,[r7,#4]
 1533 0018 1B68     	 ldr r3,[r3]
 1534 001a 9B69     	 ldr r3,[r3,#24]
 1535 001c 23F06043 	 bic r3,r3,#-536870912
 1536 0020 9B0C     	 lsrs r3,r3,#18
 1537 0022 FB60     	 str r3,[r7,#12]
 1538 0024 05E0     	 b .L73
 1539              	.L72:
 516:../Libraries/XMCLib/src/xmc_can.c ****   }
 517:../Libraries/XMCLib/src/xmc_can.c ****   else
 518:../Libraries/XMCLib/src/xmc_can.c ****   {
 519:../Libraries/XMCLib/src/xmc_can.c ****   identifier = ((can_mo->can_mo_ptr->MOAR) & (uint32_t)(CAN_MO_MOAR_ID_Msk));
 1540              	 .loc 2 519 0
 1541 0026 7B68     	 ldr r3,[r7,#4]
 1542 0028 1B68     	 ldr r3,[r3]
 1543 002a 9B69     	 ldr r3,[r3,#24]
 1544 002c 23F06043 	 bic r3,r3,#-536870912
 1545 0030 FB60     	 str r3,[r7,#12]
 1546              	.L73:
 520:../Libraries/XMCLib/src/xmc_can.c ****   }
 521:../Libraries/XMCLib/src/xmc_can.c ****   return identifier;
 1547              	 .loc 2 521 0
 1548 0032 FB68     	 ldr r3,[r7,#12]
 522:../Libraries/XMCLib/src/xmc_can.c **** }
 1549              	 .loc 2 522 0
 1550 0034 1846     	 mov r0,r3
 1551 0036 1437     	 adds r7,r7,#20
 1552              	.LCFI97:
 1553              	 .cfi_def_cfa_offset 4
 1554 0038 BD46     	 mov sp,r7
 1555              	.LCFI98:
 1556              	 .cfi_def_cfa_register 13
 1557              	 
 1558 003a 5DF8047B 	 ldr r7,[sp],#4
 1559              	.LCFI99:
 1560              	 .cfi_restore 7
 1561              	 .cfi_def_cfa_offset 0
 1562 003e 7047     	 bx lr
 1563              	 .cfi_endproc
 1564              	.LFE235:
 1566              	 .section .text.XMC_CAN_MO_GetAcceptanceMask,"ax",%progbits
 1567              	 .align 2
 1568              	 .global XMC_CAN_MO_GetAcceptanceMask
 1569              	 .thumb
 1570              	 .thumb_func
 1572              	XMC_CAN_MO_GetAcceptanceMask:
 1573              	.LFB236:
 523:../Libraries/XMCLib/src/xmc_can.c **** 
 524:../Libraries/XMCLib/src/xmc_can.c **** /* Gets the acceptance mask for the CAN MO. */
 525:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_MO_GetAcceptanceMask(const XMC_CAN_MO_t *const can_mo)
 526:../Libraries/XMCLib/src/xmc_can.c **** {
 1574              	 .loc 2 526 0
 1575              	 .cfi_startproc
 1576              	 
 1577              	 
 1578              	 
 1579 0000 80B4     	 push {r7}
 1580              	.LCFI100:
 1581              	 .cfi_def_cfa_offset 4
 1582              	 .cfi_offset 7,-4
 1583 0002 85B0     	 sub sp,sp,#20
 1584              	.LCFI101:
 1585              	 .cfi_def_cfa_offset 24
 1586 0004 00AF     	 add r7,sp,#0
 1587              	.LCFI102:
 1588              	 .cfi_def_cfa_register 7
 1589 0006 7860     	 str r0,[r7,#4]
 527:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t identifier_mask;
 528:../Libraries/XMCLib/src/xmc_can.c ****   if (((can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) != (uint32_t)CAN_MO_MOAMR_MIDE_Msk)
 1590              	 .loc 2 528 0
 1591 0008 7B68     	 ldr r3,[r7,#4]
 1592 000a 1B68     	 ldr r3,[r3]
 1593 000c DB68     	 ldr r3,[r3,#12]
 1594 000e 03F00053 	 and r3,r3,#536870912
 1595 0012 002B     	 cmp r3,#0
 1596 0014 0ED1     	 bne .L76
 529:../Libraries/XMCLib/src/xmc_can.c ****             && ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk))
 1597              	 .loc 2 529 0
 1598 0016 7B68     	 ldr r3,[r7,#4]
 1599 0018 1B68     	 ldr r3,[r3]
 1600 001a 9B69     	 ldr r3,[r3,#24]
 1601 001c 03F00053 	 and r3,r3,#536870912
 1602 0020 002B     	 cmp r3,#0
 1603 0022 07D1     	 bne .L76
 530:../Libraries/XMCLib/src/xmc_can.c ****   {
 531:../Libraries/XMCLib/src/xmc_can.c ****     identifier_mask = ((can_mo->can_mo_ptr->MOAMR) & (uint32_t)(CAN_MO_MOAMR_AM_Msk)) >> XMC_CAN_MO
 1604              	 .loc 2 531 0
 1605 0024 7B68     	 ldr r3,[r7,#4]
 1606 0026 1B68     	 ldr r3,[r3]
 1607 0028 DB68     	 ldr r3,[r3,#12]
 1608 002a 23F06043 	 bic r3,r3,#-536870912
 1609 002e 9B0C     	 lsrs r3,r3,#18
 1610 0030 FB60     	 str r3,[r7,#12]
 1611 0032 05E0     	 b .L77
 1612              	.L76:
 532:../Libraries/XMCLib/src/xmc_can.c ****   }
 533:../Libraries/XMCLib/src/xmc_can.c ****   else
 534:../Libraries/XMCLib/src/xmc_can.c ****   {
 535:../Libraries/XMCLib/src/xmc_can.c ****     identifier_mask = ((can_mo->can_mo_ptr->MOAMR) & (uint32_t)(CAN_MO_MOAMR_AM_Msk));
 1613              	 .loc 2 535 0
 1614 0034 7B68     	 ldr r3,[r7,#4]
 1615 0036 1B68     	 ldr r3,[r3]
 1616 0038 DB68     	 ldr r3,[r3,#12]
 1617 003a 23F06043 	 bic r3,r3,#-536870912
 1618 003e FB60     	 str r3,[r7,#12]
 1619              	.L77:
 536:../Libraries/XMCLib/src/xmc_can.c ****   }
 537:../Libraries/XMCLib/src/xmc_can.c ****   return identifier_mask;
 1620              	 .loc 2 537 0
 1621 0040 FB68     	 ldr r3,[r7,#12]
 538:../Libraries/XMCLib/src/xmc_can.c **** }
 1622              	 .loc 2 538 0
 1623 0042 1846     	 mov r0,r3
 1624 0044 1437     	 adds r7,r7,#20
 1625              	.LCFI103:
 1626              	 .cfi_def_cfa_offset 4
 1627 0046 BD46     	 mov sp,r7
 1628              	.LCFI104:
 1629              	 .cfi_def_cfa_register 13
 1630              	 
 1631 0048 5DF8047B 	 ldr r7,[sp],#4
 1632              	.LCFI105:
 1633              	 .cfi_restore 7
 1634              	 .cfi_def_cfa_offset 0
 1635 004c 7047     	 bx lr
 1636              	 .cfi_endproc
 1637              	.LFE236:
 1639 004e 00BF     	 .section .text.XMC_CAN_MO_SetAcceptanceMask,"ax",%progbits
 1640              	 .align 2
 1641              	 .global XMC_CAN_MO_SetAcceptanceMask
 1642              	 .thumb
 1643              	 .thumb_func
 1645              	XMC_CAN_MO_SetAcceptanceMask:
 1646              	.LFB237:
 539:../Libraries/XMCLib/src/xmc_can.c **** 
 540:../Libraries/XMCLib/src/xmc_can.c **** /* Gets the acceptance mask of the MO */
 541:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_SetAcceptanceMask(XMC_CAN_MO_t *const can_mo,const uint32_t can_id_mask)
 542:../Libraries/XMCLib/src/xmc_can.c **** {
 1647              	 .loc 2 542 0
 1648              	 .cfi_startproc
 1649              	 
 1650              	 
 1651              	 
 1652 0000 80B4     	 push {r7}
 1653              	.LCFI106:
 1654              	 .cfi_def_cfa_offset 4
 1655              	 .cfi_offset 7,-4
 1656 0002 83B0     	 sub sp,sp,#12
 1657              	.LCFI107:
 1658              	 .cfi_def_cfa_offset 16
 1659 0004 00AF     	 add r7,sp,#0
 1660              	.LCFI108:
 1661              	 .cfi_def_cfa_register 7
 1662 0006 7860     	 str r0,[r7,#4]
 1663 0008 3960     	 str r1,[r7]
 543:../Libraries/XMCLib/src/xmc_can.c ****   if (((can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) != (uint32_t)CAN_MO_MOAMR_MIDE_Msk)
 1664              	 .loc 2 543 0
 1665 000a 7B68     	 ldr r3,[r7,#4]
 1666 000c 1B68     	 ldr r3,[r3]
 1667 000e DB68     	 ldr r3,[r3,#12]
 1668 0010 03F00053 	 and r3,r3,#536870912
 1669 0014 002B     	 cmp r3,#0
 1670 0016 12D1     	 bne .L80
 544:../Libraries/XMCLib/src/xmc_can.c ****           && ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk))
 1671              	 .loc 2 544 0
 1672 0018 7B68     	 ldr r3,[r7,#4]
 1673 001a 1B68     	 ldr r3,[r3]
 1674 001c 9B69     	 ldr r3,[r3,#24]
 1675 001e 03F00053 	 and r3,r3,#536870912
 1676 0022 002B     	 cmp r3,#0
 1677 0024 0BD1     	 bne .L80
 545:../Libraries/XMCLib/src/xmc_can.c ****   {
 546:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOAMR = ((can_mo->can_mo_ptr->MOAMR) & ~(uint32_t)(CAN_MO_MOAMR_AM_Msk)) |
 1678              	 .loc 2 546 0
 1679 0026 7B68     	 ldr r3,[r7,#4]
 1680 0028 1B68     	 ldr r3,[r3]
 1681 002a 7A68     	 ldr r2,[r7,#4]
 1682 002c 1268     	 ldr r2,[r2]
 1683 002e D268     	 ldr r2,[r2,#12]
 1684 0030 02F06041 	 and r1,r2,#-536870912
 547:../Libraries/XMCLib/src/xmc_can.c ****                   (can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 1685              	 .loc 2 547 0
 1686 0034 3A68     	 ldr r2,[r7]
 1687 0036 9204     	 lsls r2,r2,#18
 546:../Libraries/XMCLib/src/xmc_can.c ****                   (can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 1688              	 .loc 2 546 0
 1689 0038 0A43     	 orrs r2,r2,r1
 1690 003a DA60     	 str r2,[r3,#12]
 1691 003c 0BE0     	 b .L81
 1692              	.L80:
 548:../Libraries/XMCLib/src/xmc_can.c ****   }
 549:../Libraries/XMCLib/src/xmc_can.c ****   else
 550:../Libraries/XMCLib/src/xmc_can.c ****   {
 551:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOAMR = ((can_mo->can_mo_ptr->MOAMR) & ~(uint32_t)(CAN_MO_MOAMR_AM_Msk)) |
 1693              	 .loc 2 551 0
 1694 003e 7B68     	 ldr r3,[r7,#4]
 1695 0040 1B68     	 ldr r3,[r3]
 1696 0042 7A68     	 ldr r2,[r7,#4]
 1697 0044 1268     	 ldr r2,[r2]
 1698 0046 D268     	 ldr r2,[r2,#12]
 1699 0048 02F06041 	 and r1,r2,#-536870912
 552:../Libraries/XMCLib/src/xmc_can.c ****                   (can_id_mask & (uint32_t)CAN_MO_MOAMR_AM_Msk);
 1700              	 .loc 2 552 0
 1701 004c 3A68     	 ldr r2,[r7]
 1702 004e 22F06042 	 bic r2,r2,#-536870912
 551:../Libraries/XMCLib/src/xmc_can.c ****                   (can_id_mask & (uint32_t)CAN_MO_MOAMR_AM_Msk);
 1703              	 .loc 2 551 0
 1704 0052 0A43     	 orrs r2,r2,r1
 1705 0054 DA60     	 str r2,[r3,#12]
 1706              	.L81:
 553:../Libraries/XMCLib/src/xmc_can.c ****   }
 554:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_id_mask = can_id_mask;
 1707              	 .loc 2 554 0
 1708 0056 3B68     	 ldr r3,[r7]
 1709 0058 23F06041 	 bic r1,r3,#-536870912
 1710 005c 7A68     	 ldr r2,[r7,#4]
 1711 005e 9368     	 ldr r3,[r2,#8]
 1712 0060 61F31C03 	 bfi r3,r1,#0,#29
 1713 0064 9360     	 str r3,[r2,#8]
 555:../Libraries/XMCLib/src/xmc_can.c **** }
 1714              	 .loc 2 555 0
 1715 0066 0C37     	 adds r7,r7,#12
 1716              	.LCFI109:
 1717              	 .cfi_def_cfa_offset 4
 1718 0068 BD46     	 mov sp,r7
 1719              	.LCFI110:
 1720              	 .cfi_def_cfa_register 13
 1721              	 
 1722 006a 5DF8047B 	 ldr r7,[sp],#4
 1723              	.LCFI111:
 1724              	 .cfi_restore 7
 1725              	 .cfi_def_cfa_offset 0
 1726 006e 7047     	 bx lr
 1727              	 .cfi_endproc
 1728              	.LFE237:
 1730              	 .section .text.XMC_CAN_MO_Config,"ax",%progbits
 1731              	 .align 2
 1732              	 .global XMC_CAN_MO_Config
 1733              	 .thumb
 1734              	 .thumb_func
 1736              	XMC_CAN_MO_Config:
 1737              	.LFB238:
 556:../Libraries/XMCLib/src/xmc_can.c **** 
 557:../Libraries/XMCLib/src/xmc_can.c **** /* Initialization of XMC_CAN MO Object */
 558:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
 559:../Libraries/XMCLib/src/xmc_can.c **** {
 1738              	 .loc 2 559 0
 1739              	 .cfi_startproc
 1740              	 
 1741              	 
 1742 0000 80B5     	 push {r7,lr}
 1743              	.LCFI112:
 1744              	 .cfi_def_cfa_offset 8
 1745              	 .cfi_offset 7,-8
 1746              	 .cfi_offset 14,-4
 1747 0002 86B0     	 sub sp,sp,#24
 1748              	.LCFI113:
 1749              	 .cfi_def_cfa_offset 32
 1750 0004 00AF     	 add r7,sp,#0
 1751              	.LCFI114:
 1752              	 .cfi_def_cfa_register 7
 1753 0006 7860     	 str r0,[r7,#4]
 560:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t reg;
 561:../Libraries/XMCLib/src/xmc_can.c ****   
 562:../Libraries/XMCLib/src/xmc_can.c ****   /* Configure MPN */
 563:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
 1754              	 .loc 2 563 0
 1755 0008 7B68     	 ldr r3,[r7,#4]
 1756 000a 1B68     	 ldr r3,[r3]
 1757 000c 03F13843 	 add r3,r3,#-1207959552
 1758 0010 A3F5A833 	 sub r3,r3,#86016
 1759 0014 5B09     	 lsrs r3,r3,#5
 1760 0016 7B61     	 str r3,[r7,#20]
 564:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_
 1761              	 .loc 2 564 0
 1762 0018 7B69     	 ldr r3,[r7,#20]
 1763 001a 5B09     	 lsrs r3,r3,#5
 1764 001c 5A03     	 lsls r2,r3,#13
 1765 001e 7B69     	 ldr r3,[r7,#20]
 1766 0020 03F01F03 	 and r3,r3,#31
 1767 0024 1B02     	 lsls r3,r3,#8
 1768 0026 1343     	 orrs r3,r3,r2
 1769 0028 3B61     	 str r3,[r7,#16]
 565:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 1770              	 .loc 2 565 0
 1771 002a 7B68     	 ldr r3,[r7,#4]
 1772 002c 1B68     	 ldr r3,[r3]
 1773 002e 7A68     	 ldr r2,[r7,#4]
 1774 0030 1268     	 ldr r2,[r2]
 1775 0032 9268     	 ldr r2,[r2,#8]
 1776 0034 22F47F42 	 bic r2,r2,#65280
 1777 0038 9A60     	 str r2,[r3,#8]
 566:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOIPR |= set;
 1778              	 .loc 2 566 0
 1779 003a 7B68     	 ldr r3,[r7,#4]
 1780 003c 1B68     	 ldr r3,[r3]
 1781 003e 7A68     	 ldr r2,[r7,#4]
 1782 0040 1268     	 ldr r2,[r2]
 1783 0042 9168     	 ldr r1,[r2,#8]
 1784 0044 3A69     	 ldr r2,[r7,#16]
 1785 0046 0A43     	 orrs r2,r2,r1
 1786 0048 9A60     	 str r2,[r3,#8]
 567:../Libraries/XMCLib/src/xmc_can.c ****   
 568:../Libraries/XMCLib/src/xmc_can.c ****   if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 1787              	 .loc 2 568 0
 1788 004a 7B68     	 ldr r3,[r7,#4]
 1789 004c DB79     	 ldrb r3,[r3,#7]
 1790 004e 03F02003 	 and r3,r3,#32
 1791 0052 DBB2     	 uxtb r3,r3
 1792 0054 002B     	 cmp r3,#0
 1793 0056 07D0     	 beq .L83
 569:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1794              	 .loc 2 569 0 discriminator 1
 1795 0058 7B68     	 ldr r3,[r7,#4]
 1796 005a DB79     	 ldrb r3,[r3,#7]
 1797 005c 03F02003 	 and r3,r3,#32
 1798 0060 DBB2     	 uxtb r3,r3
 568:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1799              	 .loc 2 568 0 discriminator 1
 1800 0062 002B     	 cmp r3,#0
 1801 0064 00D1     	 bne .L83
 568:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1802              	 .loc 2 568 0 is_stmt 0
 1803 0066 60E0     	 b .L82
 1804              	.L83:
 570:../Libraries/XMCLib/src/xmc_can.c ****       ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 1805              	 .loc 2 570 0 is_stmt 1
 1806 0068 7B68     	 ldr r3,[r7,#4]
 1807 006a 1B7E     	 ldrb r3,[r3,#24]
 569:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1808              	 .loc 2 569 0
 1809 006c 002B     	 cmp r3,#0
 1810 006e 04D0     	 beq .L85
 571:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 1811              	 .loc 2 571 0
 1812 0070 7B68     	 ldr r3,[r7,#4]
 1813 0072 1B7E     	 ldrb r3,[r3,#24]
 570:../Libraries/XMCLib/src/xmc_can.c ****       ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 1814              	 .loc 2 570 0
 1815 0074 012B     	 cmp r3,#1
 1816 0076 00D0     	 beq .L85
 1817 0078 57E0     	 b .L82
 1818              	.L85:
 572:../Libraries/XMCLib/src/xmc_can.c ****   {
 573:../Libraries/XMCLib/src/xmc_can.c ****     ; /*Do nothing*/
 574:../Libraries/XMCLib/src/xmc_can.c ****   }
 575:../Libraries/XMCLib/src/xmc_can.c ****   else
 576:../Libraries/XMCLib/src/xmc_can.c ****   {
 577:../Libraries/XMCLib/src/xmc_can.c **** 
 578:../Libraries/XMCLib/src/xmc_can.c ****     /* Disable Message object */
 579:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 1819              	 .loc 2 579 0
 1820 007a 7B68     	 ldr r3,[r7,#4]
 1821 007c 1B68     	 ldr r3,[r3]
 1822 007e 2022     	 movs r2,#32
 1823 0080 DA61     	 str r2,[r3,#28]
 580:../Libraries/XMCLib/src/xmc_can.c ****     if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 1824              	 .loc 2 580 0
 1825 0082 7B68     	 ldr r3,[r7,#4]
 1826 0084 DB79     	 ldrb r3,[r3,#7]
 1827 0086 03F02003 	 and r3,r3,#32
 1828 008a DBB2     	 uxtb r3,r3
 1829 008c 002B     	 cmp r3,#0
 1830 008e 28D1     	 bne .L86
 581:../Libraries/XMCLib/src/xmc_can.c ****     {
 582:../Libraries/XMCLib/src/xmc_can.c ****       reg = can_mo->mo_ar;
 1831              	 .loc 2 582 0
 1832 0090 7B68     	 ldr r3,[r7,#4]
 1833 0092 5B68     	 ldr r3,[r3,#4]
 1834 0094 FB60     	 str r3,[r7,#12]
 583:../Libraries/XMCLib/src/xmc_can.c ****       reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 1835              	 .loc 2 583 0
 1836 0096 FB68     	 ldr r3,[r7,#12]
 1837 0098 03F06043 	 and r3,r3,#-536870912
 1838 009c FB60     	 str r3,[r7,#12]
 584:../Libraries/XMCLib/src/xmc_can.c ****       reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 1839              	 .loc 2 584 0
 1840 009e 7B68     	 ldr r3,[r7,#4]
 1841 00a0 5B68     	 ldr r3,[r3,#4]
 1842 00a2 C3F31C03 	 ubfx r3,r3,#0,#29
 1843 00a6 9B04     	 lsls r3,r3,#18
 1844 00a8 1A46     	 mov r2,r3
 1845 00aa FB68     	 ldr r3,[r7,#12]
 1846 00ac 1343     	 orrs r3,r3,r2
 1847 00ae FB60     	 str r3,[r7,#12]
 585:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAR = reg;
 1848              	 .loc 2 585 0
 1849 00b0 7B68     	 ldr r3,[r7,#4]
 1850 00b2 1B68     	 ldr r3,[r3]
 1851 00b4 FA68     	 ldr r2,[r7,#12]
 1852 00b6 9A61     	 str r2,[r3,#24]
 586:../Libraries/XMCLib/src/xmc_can.c **** 
 587:../Libraries/XMCLib/src/xmc_can.c ****       reg = can_mo->mo_amr;
 1853              	 .loc 2 587 0
 1854 00b8 7B68     	 ldr r3,[r7,#4]
 1855 00ba 9B68     	 ldr r3,[r3,#8]
 1856 00bc FB60     	 str r3,[r7,#12]
 588:../Libraries/XMCLib/src/xmc_can.c ****       reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 1857              	 .loc 2 588 0
 1858 00be FB68     	 ldr r3,[r7,#12]
 1859 00c0 03F06043 	 and r3,r3,#-536870912
 1860 00c4 FB60     	 str r3,[r7,#12]
 589:../Libraries/XMCLib/src/xmc_can.c ****       reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 1861              	 .loc 2 589 0
 1862 00c6 7B68     	 ldr r3,[r7,#4]
 1863 00c8 9B68     	 ldr r3,[r3,#8]
 1864 00ca C3F31C03 	 ubfx r3,r3,#0,#29
 1865 00ce 9B04     	 lsls r3,r3,#18
 1866 00d0 1A46     	 mov r2,r3
 1867 00d2 FB68     	 ldr r3,[r7,#12]
 1868 00d4 1343     	 orrs r3,r3,r2
 1869 00d6 FB60     	 str r3,[r7,#12]
 590:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAMR = reg;
 1870              	 .loc 2 590 0
 1871 00d8 7B68     	 ldr r3,[r7,#4]
 1872 00da 1B68     	 ldr r3,[r3]
 1873 00dc FA68     	 ldr r2,[r7,#12]
 1874 00de DA60     	 str r2,[r3,#12]
 1875 00e0 09E0     	 b .L87
 1876              	.L86:
 591:../Libraries/XMCLib/src/xmc_can.c ****     }
 592:../Libraries/XMCLib/src/xmc_can.c ****     else
 593:../Libraries/XMCLib/src/xmc_can.c ****     {
 594:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 1877              	 .loc 2 594 0
 1878 00e2 7B68     	 ldr r3,[r7,#4]
 1879 00e4 1B68     	 ldr r3,[r3]
 1880 00e6 7A68     	 ldr r2,[r7,#4]
 1881 00e8 5268     	 ldr r2,[r2,#4]
 1882 00ea 9A61     	 str r2,[r3,#24]
 595:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 1883              	 .loc 2 595 0
 1884 00ec 7B68     	 ldr r3,[r7,#4]
 1885 00ee 1B68     	 ldr r3,[r3]
 1886 00f0 7A68     	 ldr r2,[r7,#4]
 1887 00f2 9268     	 ldr r2,[r2,#8]
 1888 00f4 DA60     	 str r2,[r3,#12]
 1889              	.L87:
 596:../Libraries/XMCLib/src/xmc_can.c ****     }
 597:../Libraries/XMCLib/src/xmc_can.c ****     /* Check whether message object is transmit message object */
 598:../Libraries/XMCLib/src/xmc_can.c ****     if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 1890              	 .loc 2 598 0
 1891 00f6 7B68     	 ldr r3,[r7,#4]
 1892 00f8 1B7E     	 ldrb r3,[r3,#24]
 1893 00fa 012B     	 cmp r3,#1
 1894 00fc 0CD1     	 bne .L88
 599:../Libraries/XMCLib/src/xmc_can.c ****     {
 600:../Libraries/XMCLib/src/xmc_can.c ****       /* Set MO as Transmit message object  */
 601:../Libraries/XMCLib/src/xmc_can.c ****       XMC_CAN_MO_UpdateData(can_mo);
 1895              	 .loc 2 601 0
 1896 00fe 7868     	 ldr r0,[r7,#4]
 1897 0100 FFF7FEFF 	 bl XMC_CAN_MO_UpdateData
 602:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 1898              	 .loc 2 602 0
 1899 0104 7B68     	 ldr r3,[r7,#4]
 1900 0106 1B68     	 ldr r3,[r3]
 1901 0108 4FF00062 	 mov r2,#134217728
 1902 010c DA61     	 str r2,[r3,#28]
 603:../Libraries/XMCLib/src/xmc_can.c **** 
 604:../Libraries/XMCLib/src/xmc_can.c ****       /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
 605:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_M
 1903              	 .loc 2 605 0
 1904 010e 7B68     	 ldr r3,[r7,#4]
 1905 0110 1B68     	 ldr r3,[r3]
 1906 0112 074A     	 ldr r2,.L89
 1907 0114 DA61     	 str r2,[r3,#28]
 1908 0116 08E0     	 b .L82
 1909              	.L88:
 606:../Libraries/XMCLib/src/xmc_can.c ****                                    CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
 607:../Libraries/XMCLib/src/xmc_can.c ****     }
 608:../Libraries/XMCLib/src/xmc_can.c ****     else
 609:../Libraries/XMCLib/src/xmc_can.c ****     {
 610:../Libraries/XMCLib/src/xmc_can.c ****       /* Set MO as Receive message object and set RXEN bit */
 611:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 1910              	 .loc 2 611 0
 1911 0118 7B68     	 ldr r3,[r7,#4]
 1912 011a 1B68     	 ldr r3,[r3]
 1913 011c 4FF40062 	 mov r2,#2048
 1914 0120 DA61     	 str r2,[r3,#28]
 612:../Libraries/XMCLib/src/xmc_can.c **** 
 613:../Libraries/XMCLib/src/xmc_can.c ****       /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
 614:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_M
 1915              	 .loc 2 614 0
 1916 0122 7B68     	 ldr r3,[r7,#4]
 1917 0124 1B68     	 ldr r3,[r3]
 1918 0126 034A     	 ldr r2,.L89+4
 1919 0128 DA61     	 str r2,[r3,#28]
 1920              	.L82:
 615:../Libraries/XMCLib/src/xmc_can.c ****                                    CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
 616:../Libraries/XMCLib/src/xmc_can.c ****     }
 617:../Libraries/XMCLib/src/xmc_can.c **** 
 618:../Libraries/XMCLib/src/xmc_can.c ****   }
 619:../Libraries/XMCLib/src/xmc_can.c **** }
 1921              	 .loc 2 619 0
 1922 012a 1837     	 adds r7,r7,#24
 1923              	.LCFI115:
 1924              	 .cfi_def_cfa_offset 8
 1925 012c BD46     	 mov sp,r7
 1926              	.LCFI116:
 1927              	 .cfi_def_cfa_register 13
 1928              	 
 1929 012e 80BD     	 pop {r7,pc}
 1930              	.L90:
 1931              	 .align 2
 1932              	.L89:
 1933 0130 C0002006 	 .word 102760640
 1934 0134 4006A000 	 .word 10487360
 1935              	 .cfi_endproc
 1936              	.LFE238:
 1938              	 .section .text.XMC_CAN_MO_UpdateData,"ax",%progbits
 1939              	 .align 2
 1940              	 .global XMC_CAN_MO_UpdateData
 1941              	 .thumb
 1942              	 .thumb_func
 1944              	XMC_CAN_MO_UpdateData:
 1945              	.LFB239:
 620:../Libraries/XMCLib/src/xmc_can.c **** 
 621:../Libraries/XMCLib/src/xmc_can.c **** /* Update of XMC_CAN Object */
 622:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
 623:../Libraries/XMCLib/src/xmc_can.c **** {
 1946              	 .loc 2 623 0
 1947              	 .cfi_startproc
 1948              	 
 1949              	 
 1950              	 
 1951 0000 80B4     	 push {r7}
 1952              	.LCFI117:
 1953              	 .cfi_def_cfa_offset 4
 1954              	 .cfi_offset 7,-4
 1955 0002 85B0     	 sub sp,sp,#20
 1956              	.LCFI118:
 1957              	 .cfi_def_cfa_offset 24
 1958 0004 00AF     	 add r7,sp,#0
 1959              	.LCFI119:
 1960              	 .cfi_def_cfa_register 7
 1961 0006 7860     	 str r0,[r7,#4]
 624:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 1962              	 .loc 2 624 0
 1963 0008 0323     	 movs r3,#3
 1964 000a FB73     	 strb r3,[r7,#15]
 625:../Libraries/XMCLib/src/xmc_can.c ****   /* Check whether message object is transmit message object */
 626:../Libraries/XMCLib/src/xmc_can.c ****   if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 1965              	 .loc 2 626 0
 1966 000c 7B68     	 ldr r3,[r7,#4]
 1967 000e 1B7E     	 ldrb r3,[r3,#24]
 1968 0010 012B     	 cmp r3,#1
 1969 0012 22D1     	 bne .L92
 627:../Libraries/XMCLib/src/xmc_can.c ****   {
 628:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 1970              	 .loc 2 628 0
 1971 0014 7B68     	 ldr r3,[r7,#4]
 1972 0016 1B68     	 ldr r3,[r3]
 1973 0018 2022     	 movs r2,#32
 1974 001a DA61     	 str r2,[r3,#28]
 629:../Libraries/XMCLib/src/xmc_can.c ****     /* Configure data length */
 630:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 1975              	 .loc 2 630 0
 1976 001c 7B68     	 ldr r3,[r7,#4]
 1977 001e 1B68     	 ldr r3,[r3]
 1978 0020 7A68     	 ldr r2,[r7,#4]
 1979 0022 1268     	 ldr r2,[r2]
 1980 0024 1268     	 ldr r2,[r2]
 1981 0026 22F07061 	 bic r1,r2,#251658240
 631:../Libraries/XMCLib/src/xmc_can.c ****                                 (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (ui
 1982              	 .loc 2 631 0
 1983 002a 7A68     	 ldr r2,[r7,#4]
 1984 002c 127B     	 ldrb r2,[r2,#12]
 1985 002e 1206     	 lsls r2,r2,#24
 1986 0030 02F07062 	 and r2,r2,#251658240
 630:../Libraries/XMCLib/src/xmc_can.c ****                                 (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (ui
 1987              	 .loc 2 630 0
 1988 0034 0A43     	 orrs r2,r2,r1
 1989 0036 1A60     	 str r2,[r3]
 632:../Libraries/XMCLib/src/xmc_can.c ****     /* Configure Data registers*/
 633:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 1990              	 .loc 2 633 0
 1991 0038 7B68     	 ldr r3,[r7,#4]
 1992 003a 1B68     	 ldr r3,[r3]
 1993 003c 7A68     	 ldr r2,[r7,#4]
 1994 003e 1269     	 ldr r2,[r2,#16]
 1995 0040 1A61     	 str r2,[r3,#16]
 634:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 1996              	 .loc 2 634 0
 1997 0042 7B68     	 ldr r3,[r7,#4]
 1998 0044 1B68     	 ldr r3,[r3]
 1999 0046 7A68     	 ldr r2,[r7,#4]
 2000 0048 5269     	 ldr r2,[r2,#20]
 2001 004a 5A61     	 str r2,[r3,#20]
 635:../Libraries/XMCLib/src/xmc_can.c ****     /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
 636:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk| CAN_MO_MOCTR_SETMSGVAL_Msk |CAN_MO_MOC
 2002              	 .loc 2 636 0
 2003 004c 7B68     	 ldr r3,[r7,#4]
 2004 004e 1B68     	 ldr r3,[r3]
 2005 0050 064A     	 ldr r2,.L95
 2006 0052 DA61     	 str r2,[r3,#28]
 637:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2007              	 .loc 2 637 0
 2008 0054 0023     	 movs r3,#0
 2009 0056 FB73     	 strb r3,[r7,#15]
 2010 0058 01E0     	 b .L93
 2011              	.L92:
 638:../Libraries/XMCLib/src/xmc_can.c ****   }
 639:../Libraries/XMCLib/src/xmc_can.c ****   else
 640:../Libraries/XMCLib/src/xmc_can.c ****   {
 641:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 2012              	 .loc 2 641 0
 2013 005a 0323     	 movs r3,#3
 2014 005c FB73     	 strb r3,[r7,#15]
 2015              	.L93:
 642:../Libraries/XMCLib/src/xmc_can.c ****   }
 643:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2016              	 .loc 2 643 0
 2017 005e FB7B     	 ldrb r3,[r7,#15]
 644:../Libraries/XMCLib/src/xmc_can.c **** }
 2018              	 .loc 2 644 0
 2019 0060 1846     	 mov r0,r3
 2020 0062 1437     	 adds r7,r7,#20
 2021              	.LCFI120:
 2022              	 .cfi_def_cfa_offset 4
 2023 0064 BD46     	 mov sp,r7
 2024              	.LCFI121:
 2025              	 .cfi_def_cfa_register 13
 2026              	 
 2027 0066 5DF8047B 	 ldr r7,[sp],#4
 2028              	.LCFI122:
 2029              	 .cfi_restore 7
 2030              	 .cfi_def_cfa_offset 0
 2031 006a 7047     	 bx lr
 2032              	.L96:
 2033              	 .align 2
 2034              	.L95:
 2035 006c 40002800 	 .word 2621504
 2036              	 .cfi_endproc
 2037              	.LFE239:
 2039              	 .section .text.XMC_CAN_MO_Transmit,"ax",%progbits
 2040              	 .align 2
 2041              	 .global XMC_CAN_MO_Transmit
 2042              	 .thumb
 2043              	 .thumb_func
 2045              	XMC_CAN_MO_Transmit:
 2046              	.LFB240:
 645:../Libraries/XMCLib/src/xmc_can.c **** 
 646:../Libraries/XMCLib/src/xmc_can.c **** /* This function is will put a transmit request to transmit message object */
 647:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
 648:../Libraries/XMCLib/src/xmc_can.c **** {
 2047              	 .loc 2 648 0
 2048              	 .cfi_startproc
 2049              	 
 2050              	 
 2051              	 
 2052 0000 80B4     	 push {r7}
 2053              	.LCFI123:
 2054              	 .cfi_def_cfa_offset 4
 2055              	 .cfi_offset 7,-4
 2056 0002 87B0     	 sub sp,sp,#28
 2057              	.LCFI124:
 2058              	 .cfi_def_cfa_offset 32
 2059 0004 00AF     	 add r7,sp,#0
 2060              	.LCFI125:
 2061              	 .cfi_def_cfa_register 7
 2062 0006 7860     	 str r0,[r7,#4]
 649:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2063              	 .loc 2 649 0
 2064 0008 0123     	 movs r3,#1
 2065 000a FB75     	 strb r3,[r7,#23]
 650:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO
 2066              	 .loc 2 650 0
 2067 000c 7B68     	 ldr r3,[r7,#4]
 2068 000e 1B68     	 ldr r3,[r3]
 2069 0010 DB69     	 ldr r3,[r3,#28]
 2070 0012 03F02003 	 and r3,r3,#32
 2071 0016 5B09     	 lsrs r3,r3,#5
 2072 0018 3B61     	 str r3,[r7,#16]
 651:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_
 2073              	 .loc 2 651 0
 2074 001a 7B68     	 ldr r3,[r7,#4]
 2075 001c 1B68     	 ldr r3,[r3]
 2076 001e DB69     	 ldr r3,[r3,#28]
 2077 0020 03F48073 	 and r3,r3,#256
 2078 0024 1B0A     	 lsrs r3,r3,#8
 2079 0026 FB60     	 str r3,[r7,#12]
 652:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message is disabled */
 653:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type == 0U)
 2080              	 .loc 2 653 0
 2081 0028 3B69     	 ldr r3,[r7,#16]
 2082 002a 002B     	 cmp r3,#0
 2083 002c 02D1     	 bne .L98
 654:../Libraries/XMCLib/src/xmc_can.c ****   {
 655:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_DISABLED;
 2084              	 .loc 2 655 0
 2085 002e 0423     	 movs r3,#4
 2086 0030 FB75     	 strb r3,[r7,#23]
 2087 0032 0CE0     	 b .L99
 2088              	.L98:
 656:../Libraries/XMCLib/src/xmc_can.c ****   }
 657:../Libraries/XMCLib/src/xmc_can.c ****   /* check if transmission is ongoing on message object */
 658:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_transmission_ongoing == 1U)
 2089              	 .loc 2 658 0
 2090 0034 FB68     	 ldr r3,[r7,#12]
 2091 0036 012B     	 cmp r3,#1
 2092 0038 02D1     	 bne .L100
 659:../Libraries/XMCLib/src/xmc_can.c ****   {
 660:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2093              	 .loc 2 660 0
 2094 003a 0223     	 movs r3,#2
 2095 003c FB75     	 strb r3,[r7,#23]
 2096 003e 06E0     	 b .L99
 2097              	.L100:
 661:../Libraries/XMCLib/src/xmc_can.c ****   }
 662:../Libraries/XMCLib/src/xmc_can.c ****   else
 663:../Libraries/XMCLib/src/xmc_can.c ****   {
 664:../Libraries/XMCLib/src/xmc_can.c ****     /* set TXRQ bit */
 665:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCT
 2098              	 .loc 2 665 0
 2099 0040 7B68     	 ldr r3,[r7,#4]
 2100 0042 1B68     	 ldr r3,[r3]
 2101 0044 4FF0E062 	 mov r2,#117440512
 2102 0048 DA61     	 str r2,[r3,#28]
 666:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2103              	 .loc 2 666 0
 2104 004a 0023     	 movs r3,#0
 2105 004c FB75     	 strb r3,[r7,#23]
 2106              	.L99:
 667:../Libraries/XMCLib/src/xmc_can.c ****   }
 668:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2107              	 .loc 2 668 0
 2108 004e FB7D     	 ldrb r3,[r7,#23]
 669:../Libraries/XMCLib/src/xmc_can.c **** }
 2109              	 .loc 2 669 0
 2110 0050 1846     	 mov r0,r3
 2111 0052 1C37     	 adds r7,r7,#28
 2112              	.LCFI126:
 2113              	 .cfi_def_cfa_offset 4
 2114 0054 BD46     	 mov sp,r7
 2115              	.LCFI127:
 2116              	 .cfi_def_cfa_register 13
 2117              	 
 2118 0056 5DF8047B 	 ldr r7,[sp],#4
 2119              	.LCFI128:
 2120              	 .cfi_restore 7
 2121              	 .cfi_def_cfa_offset 0
 2122 005a 7047     	 bx lr
 2123              	 .cfi_endproc
 2124              	.LFE240:
 2126              	 .section .text.XMC_CAN_MO_ReceiveData,"ax",%progbits
 2127              	 .align 2
 2128              	 .global XMC_CAN_MO_ReceiveData
 2129              	 .thumb
 2130              	 .thumb_func
 2132              	XMC_CAN_MO_ReceiveData:
 2133              	.LFB241:
 670:../Libraries/XMCLib/src/xmc_can.c **** 
 671:../Libraries/XMCLib/src/xmc_can.c **** /* This function is will read the message object data bytes */
 672:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_ReceiveData (XMC_CAN_MO_t *can_mo)
 673:../Libraries/XMCLib/src/xmc_can.c **** {
 2134              	 .loc 2 673 0
 2135              	 .cfi_startproc
 2136              	 
 2137              	 
 2138              	 
 2139 0000 80B4     	 push {r7}
 2140              	.LCFI129:
 2141              	 .cfi_def_cfa_offset 4
 2142              	 .cfi_offset 7,-4
 2143 0002 87B0     	 sub sp,sp,#28
 2144              	.LCFI130:
 2145              	 .cfi_def_cfa_offset 32
 2146 0004 00AF     	 add r7,sp,#0
 2147              	.LCFI131:
 2148              	 .cfi_def_cfa_register 7
 2149 0006 7860     	 str r0,[r7,#4]
 674:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2150              	 .loc 2 674 0
 2151 0008 0123     	 movs r3,#1
 2152 000a FB75     	 strb r3,[r7,#23]
 675:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t rx_pnd = 0U;
 2153              	 .loc 2 675 0
 2154 000c 0023     	 movs r3,#0
 2155 000e BB75     	 strb r3,[r7,#22]
 676:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t new_data = 0U;
 2156              	 .loc 2 676 0
 2157 0010 0023     	 movs r3,#0
 2158 0012 7B75     	 strb r3,[r7,#21]
 677:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOS
 2159              	 .loc 2 677 0
 2160 0014 7B68     	 ldr r3,[r7,#4]
 2161 0016 1B68     	 ldr r3,[r3]
 2162 0018 DB69     	 ldr r3,[r3,#28]
 2163 001a 03F40063 	 and r3,r3,#2048
 2164 001e DB0A     	 lsrs r3,r3,#11
 2165 0020 3B61     	 str r3,[r7,#16]
 678:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk
 2166              	 .loc 2 678 0
 2167 0022 7B68     	 ldr r3,[r7,#4]
 2168 0024 1B68     	 ldr r3,[r3]
 2169 0026 DB69     	 ldr r3,[r3,#28]
 2170 0028 03F00403 	 and r3,r3,#4
 2171 002c 9B08     	 lsrs r3,r3,#2
 2172 002e FB60     	 str r3,[r7,#12]
 679:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message object is a receive message object */
 680:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 2173              	 .loc 2 680 0
 2174 0030 3B69     	 ldr r3,[r7,#16]
 2175 0032 002B     	 cmp r3,#0
 2176 0034 02D0     	 beq .L103
 681:../Libraries/XMCLib/src/xmc_can.c ****   {
 682:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 2177              	 .loc 2 682 0
 2178 0036 0323     	 movs r3,#3
 2179 0038 FB75     	 strb r3,[r7,#23]
 2180 003a 25E0     	 b .L104
 2181              	.L103:
 683:../Libraries/XMCLib/src/xmc_can.c ****   }
 684:../Libraries/XMCLib/src/xmc_can.c ****   /* check if reception is ongoing on message object */
 685:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_recepcion_ongoing == 1U)
 2182              	 .loc 2 685 0
 2183 003c FB68     	 ldr r3,[r7,#12]
 2184 003e 012B     	 cmp r3,#1
 2185 0040 02D1     	 bne .L105
 686:../Libraries/XMCLib/src/xmc_can.c ****   {
 687:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2186              	 .loc 2 687 0
 2187 0042 0223     	 movs r3,#2
 2188 0044 FB75     	 strb r3,[r7,#23]
 2189 0046 1FE0     	 b .L104
 2190              	.L105:
 688:../Libraries/XMCLib/src/xmc_can.c ****   }
 689:../Libraries/XMCLib/src/xmc_can.c ****   else
 690:../Libraries/XMCLib/src/xmc_can.c ****   {
 691:../Libraries/XMCLib/src/xmc_can.c ****     /* read message parameters */
 692:../Libraries/XMCLib/src/xmc_can.c ****     do
 693:../Libraries/XMCLib/src/xmc_can.c ****     {
 694:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 2191              	 .loc 2 694 0 discriminator 2
 2192 0048 7B68     	 ldr r3,[r7,#4]
 2193 004a 1B68     	 ldr r3,[r3]
 2194 004c 1A69     	 ldr r2,[r3,#16]
 2195 004e 7B68     	 ldr r3,[r7,#4]
 2196 0050 1A61     	 str r2,[r3,#16]
 695:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 2197              	 .loc 2 695 0 discriminator 2
 2198 0052 7B68     	 ldr r3,[r7,#4]
 2199 0054 1B68     	 ldr r3,[r3]
 2200 0056 5A69     	 ldr r2,[r3,#20]
 2201 0058 7B68     	 ldr r3,[r7,#4]
 2202 005a 5A61     	 str r2,[r3,#20]
 696:../Libraries/XMCLib/src/xmc_can.c **** 
 697:../Libraries/XMCLib/src/xmc_can.c ****       rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_
 2203              	 .loc 2 697 0 discriminator 2
 2204 005c 7B68     	 ldr r3,[r7,#4]
 2205 005e 1B68     	 ldr r3,[r3]
 2206 0060 DB69     	 ldr r3,[r3,#28]
 2207 0062 03F00403 	 and r3,r3,#4
 2208 0066 9B08     	 lsrs r3,r3,#2
 2209 0068 BB75     	 strb r3,[r7,#22]
 698:../Libraries/XMCLib/src/xmc_can.c ****       new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> C
 2210              	 .loc 2 698 0 discriminator 2
 2211 006a 7B68     	 ldr r3,[r7,#4]
 2212 006c 1B68     	 ldr r3,[r3]
 2213 006e DB69     	 ldr r3,[r3,#28]
 2214 0070 03F00803 	 and r3,r3,#8
 2215 0074 DB08     	 lsrs r3,r3,#3
 2216 0076 7B75     	 strb r3,[r7,#21]
 699:../Libraries/XMCLib/src/xmc_can.c ****     } while ((rx_pnd != 0U) && (new_data != 0U));
 2217              	 .loc 2 699 0 discriminator 2
 2218 0078 BB7D     	 ldrb r3,[r7,#22]
 2219 007a 002B     	 cmp r3,#0
 2220 007c 02D0     	 beq .L106
 2221              	 .loc 2 699 0 is_stmt 0 discriminator 1
 2222 007e 7B7D     	 ldrb r3,[r7,#21]
 2223 0080 002B     	 cmp r3,#0
 2224 0082 E1D1     	 bne .L105
 2225              	.L106:
 700:../Libraries/XMCLib/src/xmc_can.c **** 
 701:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2226              	 .loc 2 701 0 is_stmt 1
 2227 0084 0023     	 movs r3,#0
 2228 0086 FB75     	 strb r3,[r7,#23]
 2229              	.L104:
 702:../Libraries/XMCLib/src/xmc_can.c ****   }
 703:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2230              	 .loc 2 703 0
 2231 0088 FB7D     	 ldrb r3,[r7,#23]
 704:../Libraries/XMCLib/src/xmc_can.c **** }
 2232              	 .loc 2 704 0
 2233 008a 1846     	 mov r0,r3
 2234 008c 1C37     	 adds r7,r7,#28
 2235              	.LCFI132:
 2236              	 .cfi_def_cfa_offset 4
 2237 008e BD46     	 mov sp,r7
 2238              	.LCFI133:
 2239              	 .cfi_def_cfa_register 13
 2240              	 
 2241 0090 5DF8047B 	 ldr r7,[sp],#4
 2242              	.LCFI134:
 2243              	 .cfi_restore 7
 2244              	 .cfi_def_cfa_offset 0
 2245 0094 7047     	 bx lr
 2246              	 .cfi_endproc
 2247              	.LFE241:
 2249 0096 00BF     	 .section .text.XMC_CAN_MO_Receive,"ax",%progbits
 2250              	 .align 2
 2251              	 .global XMC_CAN_MO_Receive
 2252              	 .thumb
 2253              	 .thumb_func
 2255              	XMC_CAN_MO_Receive:
 2256              	.LFB242:
 705:../Libraries/XMCLib/src/xmc_can.c **** 
 706:../Libraries/XMCLib/src/xmc_can.c **** 
 707:../Libraries/XMCLib/src/xmc_can.c **** /* This function is will read the message object data bytes */
 708:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
 709:../Libraries/XMCLib/src/xmc_can.c **** {
 2257              	 .loc 2 709 0
 2258              	 .cfi_startproc
 2259              	 
 2260              	 
 2261              	 
 2262 0000 80B4     	 push {r7}
 2263              	.LCFI135:
 2264              	 .cfi_def_cfa_offset 4
 2265              	 .cfi_offset 7,-4
 2266 0002 87B0     	 sub sp,sp,#28
 2267              	.LCFI136:
 2268              	 .cfi_def_cfa_offset 32
 2269 0004 00AF     	 add r7,sp,#0
 2270              	.LCFI137:
 2271              	 .cfi_def_cfa_register 7
 2272 0006 7860     	 str r0,[r7,#4]
 710:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2273              	 .loc 2 710 0
 2274 0008 0123     	 movs r3,#1
 2275 000a FB75     	 strb r3,[r7,#23]
 711:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t rx_pnd = 0U;
 2276              	 .loc 2 711 0
 2277 000c 0023     	 movs r3,#0
 2278 000e BB75     	 strb r3,[r7,#22]
 712:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t new_data = 0U;
 2279              	 .loc 2 712 0
 2280 0010 0023     	 movs r3,#0
 2281 0012 7B75     	 strb r3,[r7,#21]
 713:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOS
 2282              	 .loc 2 713 0
 2283 0014 7B68     	 ldr r3,[r7,#4]
 2284 0016 1B68     	 ldr r3,[r3]
 2285 0018 DB69     	 ldr r3,[r3,#28]
 2286 001a 03F40063 	 and r3,r3,#2048
 2287 001e DB0A     	 lsrs r3,r3,#11
 2288 0020 3B61     	 str r3,[r7,#16]
 714:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk
 2289              	 .loc 2 714 0
 2290 0022 7B68     	 ldr r3,[r7,#4]
 2291 0024 1B68     	 ldr r3,[r3]
 2292 0026 DB69     	 ldr r3,[r3,#28]
 2293 0028 03F00403 	 and r3,r3,#4
 2294 002c 9B08     	 lsrs r3,r3,#2
 2295 002e FB60     	 str r3,[r7,#12]
 715:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message object is a receive message object */
 716:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 2296              	 .loc 2 716 0
 2297 0030 3B69     	 ldr r3,[r7,#16]
 2298 0032 002B     	 cmp r3,#0
 2299 0034 02D0     	 beq .L109
 717:../Libraries/XMCLib/src/xmc_can.c ****   {
 718:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 2300              	 .loc 2 718 0
 2301 0036 0323     	 movs r3,#3
 2302 0038 FB75     	 strb r3,[r7,#23]
 2303 003a A7E0     	 b .L110
 2304              	.L109:
 719:../Libraries/XMCLib/src/xmc_can.c ****   }
 720:../Libraries/XMCLib/src/xmc_can.c ****   /* check if reception is ongoing on message object */
 721:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_recepcion_ongoing == 1U)
 2305              	 .loc 2 721 0
 2306 003c FB68     	 ldr r3,[r7,#12]
 2307 003e 012B     	 cmp r3,#1
 2308 0040 02D1     	 bne .L111
 722:../Libraries/XMCLib/src/xmc_can.c ****   {
 723:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2309              	 .loc 2 723 0
 2310 0042 0223     	 movs r3,#2
 2311 0044 FB75     	 strb r3,[r7,#23]
 2312 0046 A1E0     	 b .L110
 2313              	.L111:
 724:../Libraries/XMCLib/src/xmc_can.c ****   }
 725:../Libraries/XMCLib/src/xmc_can.c ****   else
 726:../Libraries/XMCLib/src/xmc_can.c ****   {
 727:../Libraries/XMCLib/src/xmc_can.c ****     /* read message parameters */
 728:../Libraries/XMCLib/src/xmc_can.c ****     do
 729:../Libraries/XMCLib/src/xmc_can.c ****     {
 730:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 2314              	 .loc 2 730 0
 2315 0048 7B68     	 ldr r3,[r7,#4]
 2316 004a 1B68     	 ldr r3,[r3]
 2317 004c 0822     	 movs r2,#8
 2318 004e DA61     	 str r2,[r3,#28]
 731:../Libraries/XMCLib/src/xmc_can.c ****       if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 2319              	 .loc 2 731 0
 2320 0050 7B68     	 ldr r3,[r7,#4]
 2321 0052 1B68     	 ldr r3,[r3]
 2322 0054 9B69     	 ldr r3,[r3,#24]
 2323 0056 03F00053 	 and r3,r3,#536870912
 2324 005a 5B0F     	 lsrs r3,r3,#29
 2325 005c 002B     	 cmp r3,#0
 2326 005e 40D1     	 bne .L112
 732:../Libraries/XMCLib/src/xmc_can.c ****       {
 733:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 2327              	 .loc 2 733 0
 2328 0060 7A68     	 ldr r2,[r7,#4]
 2329 0062 D379     	 ldrb r3,[r2,#7]
 2330 0064 6FF34513 	 bfc r3,#5,#1
 2331 0068 D371     	 strb r3,[r2,#7]
 734:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_
 2332              	 .loc 2 734 0
 2333 006a 7B68     	 ldr r3,[r7,#4]
 2334 006c 1B68     	 ldr r3,[r3]
 2335 006e 9A69     	 ldr r2,[r3,#24]
 2336 0070 4A4B     	 ldr r3,.L118
 2337 0072 1340     	 ands r3,r3,r2
 2338 0074 9B0C     	 lsrs r3,r3,#18
 2339 0076 23F06041 	 bic r1,r3,#-536870912
 2340 007a 7A68     	 ldr r2,[r7,#4]
 2341 007c 5368     	 ldr r3,[r2,#4]
 2342 007e 61F31C03 	 bfi r3,r1,#0,#29
 2343 0082 5360     	 str r3,[r2,#4]
 735:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN
 2344              	 .loc 2 735 0
 2345 0084 7B68     	 ldr r3,[r7,#4]
 2346 0086 1B68     	 ldr r3,[r3]
 2347 0088 DB68     	 ldr r3,[r3,#12]
 2348 008a 03F00053 	 and r3,r3,#536870912
 2349 008e 5B0F     	 lsrs r3,r3,#29
 2350 0090 DBB2     	 uxtb r3,r3
 2351 0092 03F00103 	 and r3,r3,#1
 2352 0096 D9B2     	 uxtb r1,r3
 2353 0098 7A68     	 ldr r2,[r7,#4]
 2354 009a D37A     	 ldrb r3,[r2,#11]
 2355 009c 61F34513 	 bfi r3,r1,#5,#1
 2356 00a0 D372     	 strb r3,[r2,#11]
 736:../Libraries/XMCLib/src/xmc_can.c ****         if(can_mo->can_ide_mask == 1U)
 2357              	 .loc 2 736 0
 2358 00a2 7B68     	 ldr r3,[r7,#4]
 2359 00a4 DB7A     	 ldrb r3,[r3,#11]
 2360 00a6 03F02003 	 and r3,r3,#32
 2361 00aa DBB2     	 uxtb r3,r3
 2362 00ac 002B     	 cmp r3,#0
 2363 00ae 0DD0     	 beq .L113
 737:../Libraries/XMCLib/src/xmc_can.c ****         {
 738:../Libraries/XMCLib/src/xmc_can.c ****           can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >
 2364              	 .loc 2 738 0
 2365 00b0 7B68     	 ldr r3,[r7,#4]
 2366 00b2 1B68     	 ldr r3,[r3]
 2367 00b4 DA68     	 ldr r2,[r3,#12]
 2368 00b6 394B     	 ldr r3,.L118
 2369 00b8 1340     	 ands r3,r3,r2
 2370 00ba 9B0C     	 lsrs r3,r3,#18
 2371 00bc 23F06041 	 bic r1,r3,#-536870912
 2372 00c0 7A68     	 ldr r2,[r7,#4]
 2373 00c2 9368     	 ldr r3,[r2,#8]
 2374 00c4 61F31C03 	 bfi r3,r1,#0,#29
 2375 00c8 9360     	 str r3,[r2,#8]
 2376 00ca 32E0     	 b .L115
 2377              	.L113:
 739:../Libraries/XMCLib/src/xmc_can.c ****         }
 740:../Libraries/XMCLib/src/xmc_can.c ****         else
 741:../Libraries/XMCLib/src/xmc_can.c ****         {
 742:../Libraries/XMCLib/src/xmc_can.c ****           can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 2378              	 .loc 2 742 0
 2379 00cc 7B68     	 ldr r3,[r7,#4]
 2380 00ce 1B68     	 ldr r3,[r3]
 2381 00d0 DB68     	 ldr r3,[r3,#12]
 2382 00d2 23F06041 	 bic r1,r3,#-536870912
 2383 00d6 7A68     	 ldr r2,[r7,#4]
 2384 00d8 9368     	 ldr r3,[r2,#8]
 2385 00da 61F31C03 	 bfi r3,r1,#0,#29
 2386 00de 9360     	 str r3,[r2,#8]
 2387 00e0 27E0     	 b .L115
 2388              	.L112:
 743:../Libraries/XMCLib/src/xmc_can.c ****         }
 744:../Libraries/XMCLib/src/xmc_can.c ****       }
 745:../Libraries/XMCLib/src/xmc_can.c ****       else
 746:../Libraries/XMCLib/src/xmc_can.c ****       {
 747:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 2389              	 .loc 2 747 0
 2390 00e2 7A68     	 ldr r2,[r7,#4]
 2391 00e4 D379     	 ldrb r3,[r2,#7]
 2392 00e6 43F02003 	 orr r3,r3,#32
 2393 00ea D371     	 strb r3,[r2,#7]
 748:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 2394              	 .loc 2 748 0
 2395 00ec 7B68     	 ldr r3,[r7,#4]
 2396 00ee 1B68     	 ldr r3,[r3]
 2397 00f0 9B69     	 ldr r3,[r3,#24]
 2398 00f2 23F06041 	 bic r1,r3,#-536870912
 2399 00f6 7A68     	 ldr r2,[r7,#4]
 2400 00f8 5368     	 ldr r3,[r2,#4]
 2401 00fa 61F31C03 	 bfi r3,r1,#0,#29
 2402 00fe 5360     	 str r3,[r2,#4]
 749:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 2403              	 .loc 2 749 0
 2404 0100 7B68     	 ldr r3,[r7,#4]
 2405 0102 1B68     	 ldr r3,[r3]
 2406 0104 DB68     	 ldr r3,[r3,#12]
 2407 0106 23F06041 	 bic r1,r3,#-536870912
 2408 010a 7A68     	 ldr r2,[r7,#4]
 2409 010c 9368     	 ldr r3,[r2,#8]
 2410 010e 61F31C03 	 bfi r3,r1,#0,#29
 2411 0112 9360     	 str r3,[r2,#8]
 750:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN
 2412              	 .loc 2 750 0
 2413 0114 7B68     	 ldr r3,[r7,#4]
 2414 0116 1B68     	 ldr r3,[r3]
 2415 0118 DB68     	 ldr r3,[r3,#12]
 2416 011a 03F00053 	 and r3,r3,#536870912
 2417 011e 5B0F     	 lsrs r3,r3,#29
 2418 0120 DBB2     	 uxtb r3,r3
 2419 0122 03F00103 	 and r3,r3,#1
 2420 0126 D9B2     	 uxtb r1,r3
 2421 0128 7A68     	 ldr r2,[r7,#4]
 2422 012a D37A     	 ldrb r3,[r2,#11]
 2423 012c 61F34513 	 bfi r3,r1,#5,#1
 2424 0130 D372     	 strb r3,[r2,#11]
 2425              	.L115:
 751:../Libraries/XMCLib/src/xmc_can.c ****       }
 752:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC
 2426              	 .loc 2 752 0
 2427 0132 7B68     	 ldr r3,[r7,#4]
 2428 0134 1B68     	 ldr r3,[r3]
 2429 0136 1B68     	 ldr r3,[r3]
 2430 0138 03F07063 	 and r3,r3,#251658240
 2431 013c 1B0E     	 lsrs r3,r3,#24
 2432 013e DAB2     	 uxtb r2,r3
 2433 0140 7B68     	 ldr r3,[r7,#4]
 2434 0142 1A73     	 strb r2,[r3,#12]
 753:../Libraries/XMCLib/src/xmc_can.c **** 
 754:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 2435              	 .loc 2 754 0
 2436 0144 7B68     	 ldr r3,[r7,#4]
 2437 0146 1B68     	 ldr r3,[r3]
 2438 0148 1A69     	 ldr r2,[r3,#16]
 2439 014a 7B68     	 ldr r3,[r7,#4]
 2440 014c 1A61     	 str r2,[r3,#16]
 755:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 2441              	 .loc 2 755 0
 2442 014e 7B68     	 ldr r3,[r7,#4]
 2443 0150 1B68     	 ldr r3,[r3]
 2444 0152 5A69     	 ldr r2,[r3,#20]
 2445 0154 7B68     	 ldr r3,[r7,#4]
 2446 0156 5A61     	 str r2,[r3,#20]
 756:../Libraries/XMCLib/src/xmc_can.c **** 
 757:../Libraries/XMCLib/src/xmc_can.c ****       rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_
 2447              	 .loc 2 757 0
 2448 0158 7B68     	 ldr r3,[r7,#4]
 2449 015a 1B68     	 ldr r3,[r3]
 2450 015c DB69     	 ldr r3,[r3,#28]
 2451 015e 03F00403 	 and r3,r3,#4
 2452 0162 9B08     	 lsrs r3,r3,#2
 2453 0164 BB75     	 strb r3,[r7,#22]
 758:../Libraries/XMCLib/src/xmc_can.c ****       new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> C
 2454              	 .loc 2 758 0
 2455 0166 7B68     	 ldr r3,[r7,#4]
 2456 0168 1B68     	 ldr r3,[r3]
 2457 016a DB69     	 ldr r3,[r3,#28]
 2458 016c 03F00803 	 and r3,r3,#8
 2459 0170 DB08     	 lsrs r3,r3,#3
 2460 0172 7B75     	 strb r3,[r7,#21]
 759:../Libraries/XMCLib/src/xmc_can.c ****     } while ((rx_pnd != 0U) && (new_data != 0U));
 2461              	 .loc 2 759 0
 2462 0174 BB7D     	 ldrb r3,[r7,#22]
 2463 0176 002B     	 cmp r3,#0
 2464 0178 03D0     	 beq .L116
 2465              	 .loc 2 759 0 is_stmt 0 discriminator 1
 2466 017a 7B7D     	 ldrb r3,[r7,#21]
 2467 017c 002B     	 cmp r3,#0
 2468 017e 7FF463AF 	 bne .L111
 2469              	.L116:
 760:../Libraries/XMCLib/src/xmc_can.c **** 
 761:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 2470              	 .loc 2 761 0 is_stmt 1
 2471 0182 7B68     	 ldr r3,[r7,#4]
 2472 0184 0022     	 movs r2,#0
 2473 0186 1A76     	 strb r2,[r3,#24]
 762:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2474              	 .loc 2 762 0
 2475 0188 0023     	 movs r3,#0
 2476 018a FB75     	 strb r3,[r7,#23]
 2477              	.L110:
 763:../Libraries/XMCLib/src/xmc_can.c ****   }
 764:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2478              	 .loc 2 764 0
 2479 018c FB7D     	 ldrb r3,[r7,#23]
 765:../Libraries/XMCLib/src/xmc_can.c **** }
 2480              	 .loc 2 765 0
 2481 018e 1846     	 mov r0,r3
 2482 0190 1C37     	 adds r7,r7,#28
 2483              	.LCFI138:
 2484              	 .cfi_def_cfa_offset 4
 2485 0192 BD46     	 mov sp,r7
 2486              	.LCFI139:
 2487              	 .cfi_def_cfa_register 13
 2488              	 
 2489 0194 5DF8047B 	 ldr r7,[sp],#4
 2490              	.LCFI140:
 2491              	 .cfi_restore 7
 2492              	 .cfi_def_cfa_offset 0
 2493 0198 7047     	 bx lr
 2494              	.L119:
 2495 019a 00BF     	 .align 2
 2496              	.L118:
 2497 019c 0000FC1F 	 .word 536608768
 2498              	 .cfi_endproc
 2499              	.LFE242:
 2501              	 .section .text.XMC_CAN_NODE_EnableEvent,"ax",%progbits
 2502              	 .align 2
 2503              	 .global XMC_CAN_NODE_EnableEvent
 2504              	 .thumb
 2505              	 .thumb_func
 2507              	XMC_CAN_NODE_EnableEvent:
 2508              	.LFB243:
 766:../Libraries/XMCLib/src/xmc_can.c **** 
 767:../Libraries/XMCLib/src/xmc_can.c **** /* Function to enable node event */
 768:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
 769:../Libraries/XMCLib/src/xmc_can.c **** {
 2509              	 .loc 2 769 0
 2510              	 .cfi_startproc
 2511              	 
 2512              	 
 2513              	 
 2514 0000 80B4     	 push {r7}
 2515              	.LCFI141:
 2516              	 .cfi_def_cfa_offset 4
 2517              	 .cfi_offset 7,-4
 2518 0002 83B0     	 sub sp,sp,#12
 2519              	.LCFI142:
 2520              	 .cfi_def_cfa_offset 16
 2521 0004 00AF     	 add r7,sp,#0
 2522              	.LCFI143:
 2523              	 .cfi_def_cfa_register 7
 2524 0006 7860     	 str r0,[r7,#4]
 2525 0008 3960     	 str r1,[r7]
 770:../Libraries/XMCLib/src/xmc_can.c ****   if(event != XMC_CAN_NODE_EVENT_CFCIE)
 2526              	 .loc 2 770 0
 2527 000a 3B68     	 ldr r3,[r7]
 2528 000c B3F5800F 	 cmp r3,#4194304
 2529 0010 06D0     	 beq .L121
 771:../Libraries/XMCLib/src/xmc_can.c ****   {
 772:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NCR |= (uint32_t)event;
 2530              	 .loc 2 772 0
 2531 0012 7B68     	 ldr r3,[r7,#4]
 2532 0014 1A68     	 ldr r2,[r3]
 2533 0016 3B68     	 ldr r3,[r7]
 2534 0018 1A43     	 orrs r2,r2,r3
 2535 001a 7B68     	 ldr r3,[r7,#4]
 2536 001c 1A60     	 str r2,[r3]
 2537 001e 05E0     	 b .L120
 2538              	.L121:
 773:../Libraries/XMCLib/src/xmc_can.c ****   }
 774:../Libraries/XMCLib/src/xmc_can.c ****   else
 775:../Libraries/XMCLib/src/xmc_can.c ****   {
 776:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NFCR |= (uint32_t)event;
 2539              	 .loc 2 776 0
 2540 0020 7B68     	 ldr r3,[r7,#4]
 2541 0022 9A69     	 ldr r2,[r3,#24]
 2542 0024 3B68     	 ldr r3,[r7]
 2543 0026 1A43     	 orrs r2,r2,r3
 2544 0028 7B68     	 ldr r3,[r7,#4]
 2545 002a 9A61     	 str r2,[r3,#24]
 2546              	.L120:
 777:../Libraries/XMCLib/src/xmc_can.c ****   }
 778:../Libraries/XMCLib/src/xmc_can.c **** }
 2547              	 .loc 2 778 0
 2548 002c 0C37     	 adds r7,r7,#12
 2549              	.LCFI144:
 2550              	 .cfi_def_cfa_offset 4
 2551 002e BD46     	 mov sp,r7
 2552              	.LCFI145:
 2553              	 .cfi_def_cfa_register 13
 2554              	 
 2555 0030 5DF8047B 	 ldr r7,[sp],#4
 2556              	.LCFI146:
 2557              	 .cfi_restore 7
 2558              	 .cfi_def_cfa_offset 0
 2559 0034 7047     	 bx lr
 2560              	 .cfi_endproc
 2561              	.LFE243:
 2563 0036 00BF     	 .section .text.XMC_CAN_NODE_DisableEvent,"ax",%progbits
 2564              	 .align 2
 2565              	 .global XMC_CAN_NODE_DisableEvent
 2566              	 .thumb
 2567              	 .thumb_func
 2569              	XMC_CAN_NODE_DisableEvent:
 2570              	.LFB244:
 779:../Libraries/XMCLib/src/xmc_can.c **** 
 780:../Libraries/XMCLib/src/xmc_can.c **** /* Function to disable node event */
 781:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_DisableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
 782:../Libraries/XMCLib/src/xmc_can.c **** {
 2571              	 .loc 2 782 0
 2572              	 .cfi_startproc
 2573              	 
 2574              	 
 2575              	 
 2576 0000 80B4     	 push {r7}
 2577              	.LCFI147:
 2578              	 .cfi_def_cfa_offset 4
 2579              	 .cfi_offset 7,-4
 2580 0002 83B0     	 sub sp,sp,#12
 2581              	.LCFI148:
 2582              	 .cfi_def_cfa_offset 16
 2583 0004 00AF     	 add r7,sp,#0
 2584              	.LCFI149:
 2585              	 .cfi_def_cfa_register 7
 2586 0006 7860     	 str r0,[r7,#4]
 2587 0008 3960     	 str r1,[r7]
 783:../Libraries/XMCLib/src/xmc_can.c ****   if(event != XMC_CAN_NODE_EVENT_CFCIE)
 2588              	 .loc 2 783 0
 2589 000a 3B68     	 ldr r3,[r7]
 2590 000c B3F5800F 	 cmp r3,#4194304
 2591 0010 07D0     	 beq .L124
 784:../Libraries/XMCLib/src/xmc_can.c ****   {
 785:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NCR &= ~(uint32_t)event;
 2592              	 .loc 2 785 0
 2593 0012 7B68     	 ldr r3,[r7,#4]
 2594 0014 1A68     	 ldr r2,[r3]
 2595 0016 3B68     	 ldr r3,[r7]
 2596 0018 DB43     	 mvns r3,r3
 2597 001a 1A40     	 ands r2,r2,r3
 2598 001c 7B68     	 ldr r3,[r7,#4]
 2599 001e 1A60     	 str r2,[r3]
 2600 0020 06E0     	 b .L123
 2601              	.L124:
 786:../Libraries/XMCLib/src/xmc_can.c ****   }
 787:../Libraries/XMCLib/src/xmc_can.c ****   else
 788:../Libraries/XMCLib/src/xmc_can.c ****   {
 789:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NFCR &= ~(uint32_t)event;
 2602              	 .loc 2 789 0
 2603 0022 7B68     	 ldr r3,[r7,#4]
 2604 0024 9A69     	 ldr r2,[r3,#24]
 2605 0026 3B68     	 ldr r3,[r7]
 2606 0028 DB43     	 mvns r3,r3
 2607 002a 1A40     	 ands r2,r2,r3
 2608 002c 7B68     	 ldr r3,[r7,#4]
 2609 002e 9A61     	 str r2,[r3,#24]
 2610              	.L123:
 790:../Libraries/XMCLib/src/xmc_can.c ****   }
 791:../Libraries/XMCLib/src/xmc_can.c **** }
 2611              	 .loc 2 791 0
 2612 0030 0C37     	 adds r7,r7,#12
 2613              	.LCFI150:
 2614              	 .cfi_def_cfa_offset 4
 2615 0032 BD46     	 mov sp,r7
 2616              	.LCFI151:
 2617              	 .cfi_def_cfa_register 13
 2618              	 
 2619 0034 5DF8047B 	 ldr r7,[sp],#4
 2620              	.LCFI152:
 2621              	 .cfi_restore 7
 2622              	 .cfi_def_cfa_offset 0
 2623 0038 7047     	 bx lr
 2624              	 .cfi_endproc
 2625              	.LFE244:
 2627 003a 00BF     	 .section .text.XMC_CAN_TXFIFO_Transmit,"ax",%progbits
 2628              	 .align 2
 2629              	 .global XMC_CAN_TXFIFO_Transmit
 2630              	 .thumb
 2631              	 .thumb_func
 2633              	XMC_CAN_TXFIFO_Transmit:
 2634              	.LFB245:
 792:../Libraries/XMCLib/src/xmc_can.c **** /* Function to transmit MO from the FIFO */
 793:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_TXFIFO_Transmit(const XMC_CAN_MO_t *const can_mo)
 794:../Libraries/XMCLib/src/xmc_can.c **** {
 2635              	 .loc 2 794 0
 2636              	 .cfi_startproc
 2637              	 
 2638              	 
 2639              	 
 2640 0000 80B4     	 push {r7}
 2641              	.LCFI153:
 2642              	 .cfi_def_cfa_offset 4
 2643              	 .cfi_offset 7,-4
 2644 0002 89B0     	 sub sp,sp,#36
 2645              	.LCFI154:
 2646              	 .cfi_def_cfa_offset 40
 2647 0004 00AF     	 add r7,sp,#0
 2648              	.LCFI155:
 2649              	 .cfi_def_cfa_register 7
 2650 0006 7860     	 str r0,[r7,#4]
 795:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2651              	 .loc 2 795 0
 2652 0008 0123     	 movs r3,#1
 2653 000a FB77     	 strb r3,[r7,#31]
 796:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = ((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO
 2654              	 .loc 2 796 0
 2655 000c 7B68     	 ldr r3,[r7,#4]
 2656 000e 1B68     	 ldr r3,[r3]
 2657 0010 DB69     	 ldr r3,[r3,#28]
 2658 0012 03F02003 	 and r3,r3,#32
 2659 0016 5B09     	 lsrs r3,r3,#5
 2660 0018 BB61     	 str r3,[r7,#24]
 797:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_transmission_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_M
 2661              	 .loc 2 797 0
 2662 001a 7B68     	 ldr r3,[r7,#4]
 2663 001c 1B68     	 ldr r3,[r3]
 2664 001e DB69     	 ldr r3,[r3,#28]
 2665 0020 03F48073 	 and r3,r3,#256
 2666 0024 1B0A     	 lsrs r3,r3,#8
 2667 0026 7B61     	 str r3,[r7,#20]
 798:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_cur =  (uint32_t)(can_mo->can_mo_ptr-> MOFGPR & CAN_MO_MOFGPR_CUR_Msk) >> CAN_MO_MOFG
 2668              	 .loc 2 798 0
 2669 0028 7B68     	 ldr r3,[r7,#4]
 2670 002a 1B68     	 ldr r3,[r3]
 2671 002c 5B68     	 ldr r3,[r3,#4]
 2672 002e 03F47F03 	 and r3,r3,#16711680
 2673 0032 1B0C     	 lsrs r3,r3,#16
 2674 0034 3B61     	 str r3,[r7,#16]
 799:../Libraries/XMCLib/src/xmc_can.c ****   CAN_MO_TypeDef*  mo = (CAN_MO_TypeDef *)(CAN_BASE + 0x1000UL + (mo_cur * 0x0020UL));
 2675              	 .loc 2 799 0
 2676 0036 3B69     	 ldr r3,[r7,#16]
 2677 0038 03F11073 	 add r3,r3,#37748736
 2678 003c 03F52863 	 add r3,r3,#2688
 2679 0040 5B01     	 lsls r3,r3,#5
 2680 0042 FB60     	 str r3,[r7,#12]
 800:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message is disabled */
 801:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type == 0U)
 2681              	 .loc 2 801 0
 2682 0044 BB69     	 ldr r3,[r7,#24]
 2683 0046 002B     	 cmp r3,#0
 2684 0048 02D1     	 bne .L127
 802:../Libraries/XMCLib/src/xmc_can.c ****   {
 803:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_DISABLED;
 2685              	 .loc 2 803 0
 2686 004a 0423     	 movs r3,#4
 2687 004c FB77     	 strb r3,[r7,#31]
 2688 004e 0BE0     	 b .L128
 2689              	.L127:
 804:../Libraries/XMCLib/src/xmc_can.c ****   }
 805:../Libraries/XMCLib/src/xmc_can.c ****   /* check if transmission is ongoing on message object */
 806:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_transmission_ongoing == 1U)
 2690              	 .loc 2 806 0
 2691 0050 7B69     	 ldr r3,[r7,#20]
 2692 0052 012B     	 cmp r3,#1
 2693 0054 02D1     	 bne .L129
 807:../Libraries/XMCLib/src/xmc_can.c ****   {
 808:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2694              	 .loc 2 808 0
 2695 0056 0223     	 movs r3,#2
 2696 0058 FB77     	 strb r3,[r7,#31]
 2697 005a 05E0     	 b .L128
 2698              	.L129:
 809:../Libraries/XMCLib/src/xmc_can.c ****   }
 810:../Libraries/XMCLib/src/xmc_can.c ****   else
 811:../Libraries/XMCLib/src/xmc_can.c ****   {
 812:../Libraries/XMCLib/src/xmc_can.c ****     mo->MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 2699              	 .loc 2 812 0
 2700 005c FB68     	 ldr r3,[r7,#12]
 2701 005e 4FF0E062 	 mov r2,#117440512
 2702 0062 DA61     	 str r2,[r3,#28]
 813:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2703              	 .loc 2 813 0
 2704 0064 0023     	 movs r3,#0
 2705 0066 FB77     	 strb r3,[r7,#31]
 2706              	.L128:
 814:../Libraries/XMCLib/src/xmc_can.c ****   }
 815:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2707              	 .loc 2 815 0
 2708 0068 FB7F     	 ldrb r3,[r7,#31]
 816:../Libraries/XMCLib/src/xmc_can.c **** }
 2709              	 .loc 2 816 0
 2710 006a 1846     	 mov r0,r3
 2711 006c 2437     	 adds r7,r7,#36
 2712              	.LCFI156:
 2713              	 .cfi_def_cfa_offset 4
 2714 006e BD46     	 mov sp,r7
 2715              	.LCFI157:
 2716              	 .cfi_def_cfa_register 13
 2717              	 
 2718 0070 5DF8047B 	 ldr r7,[sp],#4
 2719              	.LCFI158:
 2720              	 .cfi_restore 7
 2721              	 .cfi_def_cfa_offset 0
 2722 0074 7047     	 bx lr
 2723              	 .cfi_endproc
 2724              	.LFE245:
 2726 0076 00BF     	 .section .text.XMC_CAN_TXFIFO_ConfigMOBaseObject,"ax",%progbits
 2727              	 .align 2
 2728              	 .global XMC_CAN_TXFIFO_ConfigMOBaseObject
 2729              	 .thumb
 2730              	 .thumb_func
 2732              	XMC_CAN_TXFIFO_ConfigMOBaseObject:
 2733              	.LFB246:
 817:../Libraries/XMCLib/src/xmc_can.c **** 
 818:../Libraries/XMCLib/src/xmc_can.c **** /* Function to initialize the transmit FIFO MO base object */
 819:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_TXFIFO_ConfigMOBaseObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_t
 820:../Libraries/XMCLib/src/xmc_can.c **** {
 2734              	 .loc 2 820 0
 2735              	 .cfi_startproc
 2736              	 
 2737              	 
 2738              	 
 2739 0000 80B4     	 push {r7}
 2740              	.LCFI159:
 2741              	 .cfi_def_cfa_offset 4
 2742              	 .cfi_offset 7,-4
 2743 0002 83B0     	 sub sp,sp,#12
 2744              	.LCFI160:
 2745              	 .cfi_def_cfa_offset 16
 2746 0004 00AF     	 add r7,sp,#0
 2747              	.LCFI161:
 2748              	 .cfi_def_cfa_register 7
 2749 0006 7860     	 str r0,[r7,#4]
 2750 0008 3960     	 str r1,[r7]
 821:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 2751              	 .loc 2 821 0
 2752 000a 7B68     	 ldr r3,[r7,#4]
 2753 000c 1B68     	 ldr r3,[r3]
 2754 000e 7A68     	 ldr r2,[r7,#4]
 2755 0010 1268     	 ldr r2,[r2]
 2756 0012 1268     	 ldr r2,[r2]
 2757 0014 22F00F02 	 bic r2,r2,#15
 2758 0018 42F00202 	 orr r2,r2,#2
 2759 001c 1A60     	 str r2,[r3]
 822:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x2U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 823:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~(uint32_t)(CAN_MO_MOFGPR_BOT_Msk |
 2760              	 .loc 2 823 0
 2761 001e 7B68     	 ldr r3,[r7,#4]
 2762 0020 1B68     	 ldr r3,[r3]
 2763 0022 7A68     	 ldr r2,[r7,#4]
 2764 0024 1268     	 ldr r2,[r2]
 2765 0026 5268     	 ldr r2,[r2,#4]
 2766 0028 02F07F42 	 and r2,r2,#-16777216
 824:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 825:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_CUR_Msk)) |
 826:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 2767              	 .loc 2 826 0
 2768 002c 3978     	 ldrb r1,[r7]
 825:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 2769              	 .loc 2 825 0
 2770 002e 1143     	 orrs r1,r1,r2
 827:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2771              	 .loc 2 827 0
 2772 0030 BA78     	 ldrb r2,[r7,#2]
 2773 0032 1204     	 lsls r2,r2,#16
 2774 0034 02F47F02 	 and r2,r2,#16711680
 826:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2775              	 .loc 2 826 0
 2776 0038 1143     	 orrs r1,r1,r2
 828:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_top << CAN_MO_MOFGPR_TOP_Pos) & (uint32_t)
 2777              	 .loc 2 828 0
 2778 003a 7A78     	 ldrb r2,[r7,#1]
 2779 003c 1202     	 lsls r2,r2,#8
 2780 003e 92B2     	 uxth r2,r2
 827:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2781              	 .loc 2 827 0
 2782 0040 0A43     	 orrs r2,r2,r1
 823:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 2783              	 .loc 2 823 0
 2784 0042 5A60     	 str r2,[r3,#4]
 829:../Libraries/XMCLib/src/xmc_can.c **** }
 2785              	 .loc 2 829 0
 2786 0044 0C37     	 adds r7,r7,#12
 2787              	.LCFI162:
 2788              	 .cfi_def_cfa_offset 4
 2789 0046 BD46     	 mov sp,r7
 2790              	.LCFI163:
 2791              	 .cfi_def_cfa_register 13
 2792              	 
 2793 0048 5DF8047B 	 ldr r7,[sp],#4
 2794              	.LCFI164:
 2795              	 .cfi_restore 7
 2796              	 .cfi_def_cfa_offset 0
 2797 004c 7047     	 bx lr
 2798              	 .cfi_endproc
 2799              	.LFE246:
 2801 004e 00BF     	 .section .text.XMC_CAN_RXFIFO_ConfigMOBaseObject,"ax",%progbits
 2802              	 .align 2
 2803              	 .global XMC_CAN_RXFIFO_ConfigMOBaseObject
 2804              	 .thumb
 2805              	 .thumb_func
 2807              	XMC_CAN_RXFIFO_ConfigMOBaseObject:
 2808              	.LFB247:
 830:../Libraries/XMCLib/src/xmc_can.c **** /* Function to Initialize the receive FIFO MO base object */
 831:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_RXFIFO_ConfigMOBaseObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_t
 832:../Libraries/XMCLib/src/xmc_can.c **** {
 2809              	 .loc 2 832 0
 2810              	 .cfi_startproc
 2811              	 
 2812              	 
 2813              	 
 2814 0000 80B4     	 push {r7}
 2815              	.LCFI165:
 2816              	 .cfi_def_cfa_offset 4
 2817              	 .cfi_offset 7,-4
 2818 0002 83B0     	 sub sp,sp,#12
 2819              	.LCFI166:
 2820              	 .cfi_def_cfa_offset 16
 2821 0004 00AF     	 add r7,sp,#0
 2822              	.LCFI167:
 2823              	 .cfi_def_cfa_register 7
 2824 0006 7860     	 str r0,[r7,#4]
 2825 0008 3960     	 str r1,[r7]
 833:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 2826              	 .loc 2 833 0
 2827 000a 7B68     	 ldr r3,[r7,#4]
 2828 000c 1B68     	 ldr r3,[r3]
 2829 000e 7A68     	 ldr r2,[r7,#4]
 2830 0010 1268     	 ldr r2,[r2]
 2831 0012 1268     	 ldr r2,[r2]
 2832 0014 22F00F02 	 bic r2,r2,#15
 2833 0018 42F00102 	 orr r2,r2,#1
 2834 001c 1A60     	 str r2,[r3]
 834:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x1U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 835:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~( uint32_t)(CAN_MO_MOFGPR_BOT_Msk 
 2835              	 .loc 2 835 0
 2836 001e 7B68     	 ldr r3,[r7,#4]
 2837 0020 1B68     	 ldr r3,[r3]
 2838 0022 7A68     	 ldr r2,[r7,#4]
 2839 0024 1268     	 ldr r2,[r2]
 2840 0026 5268     	 ldr r2,[r2,#4]
 2841 0028 02F07F42 	 and r2,r2,#-16777216
 836:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 837:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_CUR_Msk)) |
 838:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 2842              	 .loc 2 838 0
 2843 002c 3978     	 ldrb r1,[r7]
 837:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 2844              	 .loc 2 837 0
 2845 002e 1143     	 orrs r1,r1,r2
 839:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2846              	 .loc 2 839 0
 2847 0030 BA78     	 ldrb r2,[r7,#2]
 2848 0032 1204     	 lsls r2,r2,#16
 2849 0034 02F47F02 	 and r2,r2,#16711680
 838:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2850              	 .loc 2 838 0
 2851 0038 1143     	 orrs r1,r1,r2
 840:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_top << CAN_MO_MOFGPR_TOP_Pos) & (uint32_t)
 2852              	 .loc 2 840 0
 2853 003a 7A78     	 ldrb r2,[r7,#1]
 2854 003c 1202     	 lsls r2,r2,#8
 2855 003e 92B2     	 uxth r2,r2
 839:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2856              	 .loc 2 839 0
 2857 0040 0A43     	 orrs r2,r2,r1
 835:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 2858              	 .loc 2 835 0
 2859 0042 5A60     	 str r2,[r3,#4]
 841:../Libraries/XMCLib/src/xmc_can.c **** }
 2860              	 .loc 2 841 0
 2861 0044 0C37     	 adds r7,r7,#12
 2862              	.LCFI168:
 2863              	 .cfi_def_cfa_offset 4
 2864 0046 BD46     	 mov sp,r7
 2865              	.LCFI169:
 2866              	 .cfi_def_cfa_register 13
 2867              	 
 2868 0048 5DF8047B 	 ldr r7,[sp],#4
 2869              	.LCFI170:
 2870              	 .cfi_restore 7
 2871              	 .cfi_def_cfa_offset 0
 2872 004c 7047     	 bx lr
 2873              	 .cfi_endproc
 2874              	.LFE247:
 2876 004e 00BF     	 .section .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject,"ax",%progbits
 2877              	 .align 2
 2878              	 .global XMC_CAN_TXFIFO_ConfigMOSlaveObject
 2879              	 .thumb
 2880              	 .thumb_func
 2882              	XMC_CAN_TXFIFO_ConfigMOSlaveObject:
 2883              	.LFB248:
 842:../Libraries/XMCLib/src/xmc_can.c **** 
 843:../Libraries/XMCLib/src/xmc_can.c **** /* Function to Initialize the FIFO MO slave object */
 844:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_TXFIFO_ConfigMOSlaveObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_
 845:../Libraries/XMCLib/src/xmc_can.c **** {
 2884              	 .loc 2 845 0
 2885              	 .cfi_startproc
 2886              	 
 2887              	 
 2888              	 
 2889 0000 80B4     	 push {r7}
 2890              	.LCFI171:
 2891              	 .cfi_def_cfa_offset 4
 2892              	 .cfi_offset 7,-4
 2893 0002 83B0     	 sub sp,sp,#12
 2894              	.LCFI172:
 2895              	 .cfi_def_cfa_offset 16
 2896 0004 00AF     	 add r7,sp,#0
 2897              	.LCFI173:
 2898              	 .cfi_def_cfa_register 7
 2899 0006 7860     	 str r0,[r7,#4]
 2900 0008 3960     	 str r1,[r7]
 846:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 2901              	 .loc 2 846 0
 2902 000a 7B68     	 ldr r3,[r7,#4]
 2903 000c 1B68     	 ldr r3,[r3]
 2904 000e 7A68     	 ldr r2,[r7,#4]
 2905 0010 1268     	 ldr r2,[r2]
 2906 0012 1268     	 ldr r2,[r2]
 2907 0014 22F00F02 	 bic r2,r2,#15
 2908 0018 42F00302 	 orr r2,r2,#3
 2909 001c 1A60     	 str r2,[r3]
 847:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x3U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 848:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~(uint32_t)(CAN_MO_MOFGPR_CUR_Msk))
 2910              	 .loc 2 848 0
 2911 001e 7B68     	 ldr r3,[r7,#4]
 2912 0020 1B68     	 ldr r3,[r3]
 2913 0022 7A68     	 ldr r2,[r7,#4]
 2914 0024 1268     	 ldr r2,[r2]
 2915 0026 5268     	 ldr r2,[r2,#4]
 2916 0028 22F47F01 	 bic r1,r2,#16711680
 849:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2917              	 .loc 2 849 0
 2918 002c BA78     	 ldrb r2,[r7,#2]
 2919 002e 1204     	 lsls r2,r2,#16
 2920 0030 02F47F02 	 and r2,r2,#16711680
 848:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2921              	 .loc 2 848 0
 2922 0034 0A43     	 orrs r2,r2,r1
 2923 0036 5A60     	 str r2,[r3,#4]
 850:../Libraries/XMCLib/src/xmc_can.c **** 
 851:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOCTR  = CAN_MO_MOCTR_SETTXEN0_Msk|
 2924              	 .loc 2 851 0
 2925 0038 7B68     	 ldr r3,[r7,#4]
 2926 003a 1B68     	 ldr r3,[r3]
 2927 003c 034A     	 ldr r2,.L134
 2928 003e DA61     	 str r2,[r3,#28]
 852:../Libraries/XMCLib/src/xmc_can.c ****                                CAN_MO_MOCTR_RESTXEN1_Msk;
 853:../Libraries/XMCLib/src/xmc_can.c **** }
 2929              	 .loc 2 853 0
 2930 0040 0C37     	 adds r7,r7,#12
 2931              	.LCFI174:
 2932              	 .cfi_def_cfa_offset 4
 2933 0042 BD46     	 mov sp,r7
 2934              	.LCFI175:
 2935              	 .cfi_def_cfa_register 13
 2936              	 
 2937 0044 5DF8047B 	 ldr r7,[sp],#4
 2938              	.LCFI176:
 2939              	 .cfi_restore 7
 2940              	 .cfi_def_cfa_offset 0
 2941 0048 7047     	 bx lr
 2942              	.L135:
 2943 004a 00BF     	 .align 2
 2944              	.L134:
 2945 004c 00040002 	 .word 33555456
 2946              	 .cfi_endproc
 2947              	.LFE248:
 2949              	 .section .text.XMC_CAN_GATEWAY_InitSourceObject,"ax",%progbits
 2950              	 .align 2
 2951              	 .global XMC_CAN_GATEWAY_InitSourceObject
 2952              	 .thumb
 2953              	 .thumb_func
 2955              	XMC_CAN_GATEWAY_InitSourceObject:
 2956              	.LFB249:
 854:../Libraries/XMCLib/src/xmc_can.c **** 
 855:../Libraries/XMCLib/src/xmc_can.c **** /* Function to Initialize the Gateway Source Object */
 856:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_GATEWAY_InitSourceObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_GATEWAY_CONFIG
 857:../Libraries/XMCLib/src/xmc_can.c **** {
 2957              	 .loc 2 857 0
 2958              	 .cfi_startproc
 2959              	 
 2960              	 
 2961              	 
 2962 0000 80B4     	 push {r7}
 2963              	.LCFI177:
 2964              	 .cfi_def_cfa_offset 4
 2965              	 .cfi_offset 7,-4
 2966 0002 85B0     	 sub sp,sp,#20
 2967              	.LCFI178:
 2968              	 .cfi_def_cfa_offset 24
 2969 0004 00AF     	 add r7,sp,#0
 2970              	.LCFI179:
 2971              	 .cfi_def_cfa_register 7
 2972 0006 F860     	 str r0,[r7,#12]
 2973 0008 3B1D     	 adds r3,r7,#4
 2974 000a 83E80600 	 stmia r3,{r1,r2}
 858:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = (((uint32_t)0x4U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 2975              	 .loc 2 858 0
 2976 000e FB68     	 ldr r3,[r7,#12]
 2977 0010 1B68     	 ldr r3,[r3]
 859:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 2978              	 .loc 2 859 0
 2979 0012 FA79     	 ldrb r2,[r7,#7]
 2980 0014 1202     	 lsls r2,r2,#8
 2981 0016 02F48071 	 and r1,r2,#256
 860:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_length_code_copy) << CAN_MO_MOF
 2982              	 .loc 2 860 0
 2983 001a 7A7A     	 ldrb r2,[r7,#9]
 2984 001c 9202     	 lsls r2,r2,#10
 2985 001e 02F48062 	 and r2,r2,#1024
 859:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 2986              	 .loc 2 859 0
 2987 0022 1143     	 orrs r1,r1,r2
 861:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_identifier_copy) << CAN_MO_MOFCR_IDC
 2988              	 .loc 2 861 0
 2989 0024 3A7A     	 ldrb r2,[r7,#8]
 2990 0026 5202     	 lsls r2,r2,#9
 2991 0028 02F40072 	 and r2,r2,#512
 860:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_length_code_copy) << CAN_MO_MOF
 2992              	 .loc 2 860 0
 2993 002c 1143     	 orrs r1,r1,r2
 862:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_copy) << CAN_MO_MOFCR_DATC_Pos)
 2994              	 .loc 2 862 0
 2995 002e BA7A     	 ldrb r2,[r7,#10]
 2996 0030 D202     	 lsls r2,r2,#11
 2997 0032 02F40062 	 and r2,r2,#2048
 861:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_identifier_copy) << CAN_MO_MOFCR_IDC
 2998              	 .loc 2 861 0
 2999 0036 0A43     	 orrs r2,r2,r1
 3000 0038 42F00402 	 orr r2,r2,#4
 858:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 3001              	 .loc 2 858 0
 3002 003c 1A60     	 str r2,[r3]
 863:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 3003              	 .loc 2 863 0
 3004 003e FB68     	 ldr r3,[r7,#12]
 3005 0040 1B68     	 ldr r3,[r3]
 3006 0042 3A79     	 ldrb r2,[r7,#4]
 3007 0044 1146     	 mov r1,r2
 864:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_gateway.gateway_base << CAN_MO_MOFGPR_CUR_Pos) & (ui
 3008              	 .loc 2 864 0
 3009 0046 BA79     	 ldrb r2,[r7,#6]
 3010 0048 1204     	 lsls r2,r2,#16
 3011 004a 02F47F02 	 and r2,r2,#16711680
 863:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 3012              	 .loc 2 863 0
 3013 004e 1143     	 orrs r1,r1,r2
 865:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_gateway.gateway_top << CAN_MO_MOFGPR_TOP_Pos) & (uin
 3014              	 .loc 2 865 0
 3015 0050 7A79     	 ldrb r2,[r7,#5]
 3016 0052 1202     	 lsls r2,r2,#8
 3017 0054 92B2     	 uxth r2,r2
 863:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 3018              	 .loc 2 863 0
 3019 0056 0A43     	 orrs r2,r2,r1
 3020 0058 5A60     	 str r2,[r3,#4]
 866:../Libraries/XMCLib/src/xmc_can.c **** }
 3021              	 .loc 2 866 0
 3022 005a 1437     	 adds r7,r7,#20
 3023              	.LCFI180:
 3024              	 .cfi_def_cfa_offset 4
 3025 005c BD46     	 mov sp,r7
 3026              	.LCFI181:
 3027              	 .cfi_def_cfa_register 13
 3028              	 
 3029 005e 5DF8047B 	 ldr r7,[sp],#4
 3030              	.LCFI182:
 3031              	 .cfi_restore 7
 3032              	 .cfi_def_cfa_offset 0
 3033 0062 7047     	 bx lr
 3034              	 .cfi_endproc
 3035              	.LFE249:
 3037              	 .text
 3038              	.Letext0:
 3039              	 .file 3 "d:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3040              	 .file 4 "d:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3041              	 .file 5 "F:/Fuckultate/ProectSI/Libraries/CMSIS/Infineon/XMC4700_series/Include/XMC4700.h"
 3042              	 .file 6 "F:/Fuckultate/ProectSI/Libraries/XMCLib/inc/xmc4_scu.h"
 3043              	 .file 7 "F:/Fuckultate/ProectSI/Libraries/CMSIS/Include/core_cm4.h"
 3044              	 .file 8 "F:/Fuckultate/ProectSI/Libraries/CMSIS/Infineon/XMC4700_series/Include/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_can.c
    {standard input}:20     .text.XMC_CAN_IsPanelControlReady:00000000 $t
    {standard input}:24     .text.XMC_CAN_IsPanelControlReady:00000000 XMC_CAN_IsPanelControlReady
    {standard input}:70     .text.XMC_CAN_PanelControl:00000000 $t
    {standard input}:74     .text.XMC_CAN_PanelControl:00000000 XMC_CAN_PanelControl
    {standard input}:134    .text.XMC_CAN_NODE_EnableConfigurationChange:00000000 $t
    {standard input}:138    .text.XMC_CAN_NODE_EnableConfigurationChange:00000000 XMC_CAN_NODE_EnableConfigurationChange
    {standard input}:179    .text.XMC_CAN_NODE_DisableConfigurationChange:00000000 $t
    {standard input}:183    .text.XMC_CAN_NODE_DisableConfigurationChange:00000000 XMC_CAN_NODE_DisableConfigurationChange
    {standard input}:224    .text.max:00000000 $t
    {standard input}:228    .text.max:00000000 max
    {standard input}:272    .text.min:00000000 $t
    {standard input}:276    .text.min:00000000 min
    {standard input}:319    .text.XMC_CAN_NODE_NominalBitTimeConfigureEx:00000000 $t
    {standard input}:324    .text.XMC_CAN_NODE_NominalBitTimeConfigureEx:00000000 XMC_CAN_NODE_NominalBitTimeConfigureEx
    {standard input}:524    .text.XMC_CAN_NODE_NominalBitTimeConfigureEx:0000011c $d
    {standard input}:529    .text.XMC_CAN_NODE_NominalBitTimeConfigure:00000000 $t
    {standard input}:534    .text.XMC_CAN_NODE_NominalBitTimeConfigure:00000000 XMC_CAN_NODE_NominalBitTimeConfigure
    {standard input}:837    .text.XMC_CAN_NODE_NominalBitTimeConfigure:000001c0 $d
    {standard input}:842    .text.XMC_CAN_AllocateMOtoNodeList:00000000 $t
    {standard input}:847    .text.XMC_CAN_AllocateMOtoNodeList:00000000 XMC_CAN_AllocateMOtoNodeList
    {standard input}:901    .text.XMC_CAN_Disable:00000000 $t
    {standard input}:906    .text.XMC_CAN_Disable:00000000 XMC_CAN_Disable
    {standard input}:946    .text.XMC_CAN_Disable:00000020 $d
    {standard input}:951    .text.XMC_CAN_Enable:00000000 $t
    {standard input}:956    .text.XMC_CAN_Enable:00000000 XMC_CAN_Enable
    {standard input}:1007   .text.XMC_CAN_Enable:00000034 $d
    {standard input}:1012   .text.XMC_CAN_Init:00000000 $t
    {standard input}:1017   .text.XMC_CAN_Init:00000000 XMC_CAN_Init
    {standard input}:1169   .text.XMC_CAN_SetBaudrateClockSource:00000000 XMC_CAN_SetBaudrateClockSource
    {standard input}:1266   .text.XMC_CAN_GetBaudrateClockFrequency:00000000 XMC_CAN_GetBaudrateClockFrequency
    {standard input}:1164   .text.XMC_CAN_SetBaudrateClockSource:00000000 $t
    {standard input}:1214   .text.XMC_CAN_GetBaudrateClockSource:00000000 $t
    {standard input}:1219   .text.XMC_CAN_GetBaudrateClockSource:00000000 XMC_CAN_GetBaudrateClockSource
    {standard input}:1261   .text.XMC_CAN_GetBaudrateClockFrequency:00000000 $t
    {standard input}:1328   .text.XMC_CAN_InitEx:00000000 $t
    {standard input}:1333   .text.XMC_CAN_InitEx:00000000 XMC_CAN_InitEx
    {standard input}:1416   .text.XMC_CAN_MO_SetIdentifier:00000000 $t
    {standard input}:1421   .text.XMC_CAN_MO_SetIdentifier:00000000 XMC_CAN_MO_SetIdentifier
    {standard input}:1501   .text.XMC_CAN_MO_GetIdentifier:00000000 $t
    {standard input}:1506   .text.XMC_CAN_MO_GetIdentifier:00000000 XMC_CAN_MO_GetIdentifier
    {standard input}:1567   .text.XMC_CAN_MO_GetAcceptanceMask:00000000 $t
    {standard input}:1572   .text.XMC_CAN_MO_GetAcceptanceMask:00000000 XMC_CAN_MO_GetAcceptanceMask
    {standard input}:1640   .text.XMC_CAN_MO_SetAcceptanceMask:00000000 $t
    {standard input}:1645   .text.XMC_CAN_MO_SetAcceptanceMask:00000000 XMC_CAN_MO_SetAcceptanceMask
    {standard input}:1731   .text.XMC_CAN_MO_Config:00000000 $t
    {standard input}:1736   .text.XMC_CAN_MO_Config:00000000 XMC_CAN_MO_Config
    {standard input}:1944   .text.XMC_CAN_MO_UpdateData:00000000 XMC_CAN_MO_UpdateData
    {standard input}:1933   .text.XMC_CAN_MO_Config:00000130 $d
    {standard input}:1939   .text.XMC_CAN_MO_UpdateData:00000000 $t
    {standard input}:2035   .text.XMC_CAN_MO_UpdateData:0000006c $d
    {standard input}:2040   .text.XMC_CAN_MO_Transmit:00000000 $t
    {standard input}:2045   .text.XMC_CAN_MO_Transmit:00000000 XMC_CAN_MO_Transmit
    {standard input}:2127   .text.XMC_CAN_MO_ReceiveData:00000000 $t
    {standard input}:2132   .text.XMC_CAN_MO_ReceiveData:00000000 XMC_CAN_MO_ReceiveData
    {standard input}:2250   .text.XMC_CAN_MO_Receive:00000000 $t
    {standard input}:2255   .text.XMC_CAN_MO_Receive:00000000 XMC_CAN_MO_Receive
    {standard input}:2497   .text.XMC_CAN_MO_Receive:0000019c $d
    {standard input}:2502   .text.XMC_CAN_NODE_EnableEvent:00000000 $t
    {standard input}:2507   .text.XMC_CAN_NODE_EnableEvent:00000000 XMC_CAN_NODE_EnableEvent
    {standard input}:2564   .text.XMC_CAN_NODE_DisableEvent:00000000 $t
    {standard input}:2569   .text.XMC_CAN_NODE_DisableEvent:00000000 XMC_CAN_NODE_DisableEvent
    {standard input}:2628   .text.XMC_CAN_TXFIFO_Transmit:00000000 $t
    {standard input}:2633   .text.XMC_CAN_TXFIFO_Transmit:00000000 XMC_CAN_TXFIFO_Transmit
    {standard input}:2727   .text.XMC_CAN_TXFIFO_ConfigMOBaseObject:00000000 $t
    {standard input}:2732   .text.XMC_CAN_TXFIFO_ConfigMOBaseObject:00000000 XMC_CAN_TXFIFO_ConfigMOBaseObject
    {standard input}:2802   .text.XMC_CAN_RXFIFO_ConfigMOBaseObject:00000000 $t
    {standard input}:2807   .text.XMC_CAN_RXFIFO_ConfigMOBaseObject:00000000 XMC_CAN_RXFIFO_ConfigMOBaseObject
    {standard input}:2877   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:00000000 $t
    {standard input}:2882   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:00000000 XMC_CAN_TXFIFO_ConfigMOSlaveObject
    {standard input}:2945   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:0000004c $d
    {standard input}:2950   .text.XMC_CAN_GATEWAY_InitSourceObject:00000000 $t
    {standard input}:2955   .text.XMC_CAN_GATEWAY_InitSourceObject:00000000 XMC_CAN_GATEWAY_InitSourceObject
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_CLOCK_GatePeripheralClock
XMC_SCU_CLOCK_UngatePeripheralClock
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_CLOCK_GetPeripheralClockFrequency
OSCHP_GetFrequency
